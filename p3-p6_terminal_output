Last login: Tue Feb 23 02:34:50 on console
tonys-mbp:~ Tony$ ssh tony.bumatay@shell.cec.wustl.edu
tony.bumatay@shell.cec.wustl.edu's password:
Last login: Wed Feb 17 16:28:16 2016 from tonys-mbp.dhcp.wustl.edu
##### ATTENTION #####

shell.cec is no longer suited for
computationally-heavy tasks.

Please use 'qlogin' to obtain a
terminal on one of the LinuxLab
hosts.

Thank you!

EIT

#####
[tony.bumatay@shell ~]$ ls
artifacts.xml        documents              equeue        perl5      Users
CSE132-tony.bumatay  Documents              Music         Pictures   Videos
cse361               Downloads              My Documents  Public     winprofile
Desktop              eclipse.configuration  p2            Templates
[tony.bumatay@shell ~]$ cd cse361/
[tony.bumatay@shell cse361]$ ls
tony.bumatay
[tony.bumatay@shell cse361]$ cd tony.bumatay/
[tony.bumatay@shell tony.bumatay]$ ls
lab0  lab1  lab2
[tony.bumatay@shell tony.bumatay]$ cd lab2
[tony.bumatay@shell lab2]$ ls
bomb33  bomb33.tar
[tony.bumatay@shell lab2]$ cd bomb33/
[tony.bumatay@shell bomb33]$ ls
bomb  bomb.c  breakpoints.txt  output.txt  README  solutions.txt  symtable.txt
[tony.bumatay@shell bomb33]$ vim solutions.txt
[tony.bumatay@shell bomb33]$ gdb bomb
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-64.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb...done.
(gdb) source breakpoints.txt
Breakpoint 1 at 0x4015ef
Breakpoint 2 at 0x400f0c
Breakpoint 3 at 0x400f57
Breakpoint 4 at 0x4010e2
Breakpoint 5 at 0x401139
Breakpoint 6 at 0x40117a
Breakpoint 7 at 0x4012a9
(gdb) r solutions.txt
Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
warning: the debug information found in "/usr/lib/debug//lib64/libc-2.17.so.debug" does not match "/lib64/libc.so.6" (CRC mismatch).

warning: the debug information found in "/usr/lib/debug/usr/lib64/libc-2.17.so.debug" does not match "/lib64/libc.so.6" (CRC mismatch).

warning: the debug information found in "/usr/lib/debug//usr/lib64/libc-2.17.so.debug" does not match "/lib64/libc.so.6" (CRC mismatch).

warning: the debug information found in "/usr/lib/debug/usr/lib64//libc-2.17.so.debug" does not match "/lib64/libc.so.6" (CRC mismatch).

Initialization error: Running on an illegal host [2]
[Inferior 1 (process 3448) exited with code 010]
Missing separate debuginfos, use: debuginfo-install glibc-2.17-106.el7_2.4.x86_64
(gdb) quit
[tony.bumatay@shell bomb33]$ qlogin
Your job 38256 ("QLOGIN") has been submitted
waiting for interactive job to be scheduled ...
Your interactive job 38256 has been successfully scheduled.
Establishing /project/linuxlab/sge/qlogin_ssh.sh session to host linuxlab005.seas.wustl.edu ...
ssh 43773 linuxlab005.seas.wustl.edu
Warning: Permanently added '[linuxlab005.seas.wustl.edu]:43773,[172.16.3.105]:43773' (ECDSA) to the list of known hosts.
tony.bumatay@linuxlab005.seas.wustl.edu's password:
[tony.bumatay@linuxlab005 ~]$ ls
artifacts.xml        Desktop    Downloads              Music         perl5     Templates  winprofile
CSE132-tony.bumatay  documents  eclipse.configuration  My Documents  Pictures  Users
cse361               Documents  equeue                 p2            Public    Videos
[tony.bumatay@linuxlab005 ~]$ cd cse361/
[tony.bumatay@linuxlab005 cse361]$ ls
tony.bumatay
[tony.bumatay@linuxlab005 cse361]$ cd tony.bumatay/
[tony.bumatay@linuxlab005 tony.bumatay]$ ls
lab0  lab1  lab2
[tony.bumatay@linuxlab005 tony.bumatay]$ cd lab2
[tony.bumatay@linuxlab005 lab2]$ lsc
bash: lsc: command not found...
[tony.bumatay@linuxlab005 lab2]$ ls
bomb33  bomb33.tar
[tony.bumatay@linuxlab005 lab2]$ cd bomb
-bash: cd: bomb: No such file or directory
[tony.bumatay@linuxlab005 lab2]$ cd bomb33/
[tony.bumatay@linuxlab005 bomb33]$ ls
bomb  bomb.c  breakpoints.txt  output.txt  README  solutions.txt  symtable.txt
[tony.bumatay@linuxlab005 bomb33]$ gdb bomb
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-80.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb...done.
(gdb) source breakpoints.txt
Breakpoint 1 at 0x4015ef
Breakpoint 2 at 0x400f0c
Breakpoint 3 at 0x400f57
Breakpoint 4 at 0x4010e2
Breakpoint 5 at 0x401139
Breakpoint 6 at 0x40117a
Breakpoint 7 at 0x4012a9
(gdb) r solutions.txt
Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?

Breakpoint 2, 0x0000000000400f0c in phase_2 ()
Missing separate debuginfos, use: debuginfo-install nss-mdns-0.10-12.el7.x86_64
(gdb) finish
Run till exit from #0  0x0000000000400f0c in phase_2 ()
main (argc=<optimized out>, argv=<optimized out>) at bomb.c:83
83	    phase_defused();
(gdb)
"finish" not meaningful in the outermost frame.
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?

Breakpoint 2, 0x0000000000400f0c in phase_2 ()
(gdb) quit
A debugging session is active.

	Inferior 1 [process 21874] will be killed.

Quit anyway? (y or n) y
[tony.bumatay@linuxlab005 bomb33]$ gdb bomb
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-80.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb...done.
(gdb) source breakpoints.txt
Breakpoint 1 at 0x4015ef
Breakpoint 2 at 0x400f0c
Breakpoint 3 at 0x400f57
Breakpoint 4 at 0x4010e2
Breakpoint 5 at 0x401139
Breakpoint 6 at 0x40117a
Breakpoint 7 at 0x4012a9
(gdb) r
Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
I am not part of the problem. I am a Republican.
Phase 1 defused. How about the next one?
1 2 4 7 11 16

Breakpoint 2, 0x0000000000400f0c in phase_2 ()
Missing separate debuginfos, use: debuginfo-install nss-mdns-0.10-12.el7.x86_64
(gdb) finish
Run till exit from #0  0x0000000000400f0c in phase_2 ()
main (argc=<optimized out>, argv=<optimized out>) at bomb.c:83
83	    phase_defused();
(gdb) quit
A debugging session is active.

	Inferior 1 [process 21892] will be killed.

Quit anyway? (y or n) y
[tony.bumatay@linuxlab005 bomb33]$ vim breakpoints.txt
[tony.bumatay@linuxlab005 bomb33]$ gdb bomb
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-80.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb...done.
(gdb) source breakpoints.txt
Breakpoint 1 at 0x4015ef
Breakpoint 2 at 0x400f57
Breakpoint 3 at 0x4010e2
Breakpoint 4 at 0x401139
Breakpoint 5 at 0x40117a
Breakpoint 6 at 0x4012a9
(gdb) r
Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
I am not part of the problem. I am a Republican.
Phase 1 defused. How about the next one?
1 2 4 7 11 16
That's number 2.  Keep going!
skj

Breakpoint 2, 0x0000000000400f57 in phase_3 ()
Missing separate debuginfos, use: debuginfo-install nss-mdns-0.10-12.el7.x86_64
(gdb) quit
A debugging session is active.

	Inferior 1 [process 22258] will be killed.

Quit anyway? (y or n) y
[tony.bumatay@linuxlab005 bomb33]$ gdb bomb
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-80.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb...done.
(gdb) source breakpoints.txt
Breakpoint 1 at 0x4015ef
Breakpoint 2 at 0x400f57
Breakpoint 3 at 0x4010e2
Breakpoint 4 at 0x401139
Breakpoint 5 at 0x40117a
Breakpoint 6 at 0x4012a9
(gdb) r solutions.txt
Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
idk

Breakpoint 2, 0x0000000000400f57 in phase_3 ()
Missing separate debuginfos, use: debuginfo-install nss-mdns-0.10-12.el7.x86_64
(gdb) disas
Dump of assembler code for function phase_3:
=> 0x0000000000400f57 <+0>:	sub    $0x18,%rsp
   0x0000000000400f5b <+4>:	lea    0x8(%rsp),%r8
   0x0000000000400f60 <+9>:	lea    0x7(%rsp),%rcx
   0x0000000000400f65 <+14>:	lea    0xc(%rsp),%rdx
   0x0000000000400f6a <+19>:	mov    $0x40257e,%esi
   0x0000000000400f6f <+24>:	mov    $0x0,%eax
   0x0000000000400f74 <+29>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x0000000000400f79 <+34>:	cmp    $0x2,%eax
   0x0000000000400f7c <+37>:	jg     0x400f83 <phase_3+44>
   0x0000000000400f7e <+39>:	callq  0x4015ef <explode_bomb>
   0x0000000000400f83 <+44>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f88 <+49>:	ja     0x40108a <phase_3+307>
   0x0000000000400f8e <+55>:	mov    0xc(%rsp),%eax
   0x0000000000400f92 <+59>:	jmpq   *0x4025a0(,%rax,8)
   0x0000000000400f99 <+66>:	mov    $0x6d,%eax
   0x0000000000400f9e <+71>:	cmpl   $0x81,0x8(%rsp)
   0x0000000000400fa6 <+79>:	je     0x401094 <phase_3+317>
   0x0000000000400fac <+85>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fb1 <+90>:	mov    $0x6d,%eax
   0x0000000000400fb6 <+95>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fbb <+100>:	mov    $0x78,%eax
   0x0000000000400fc0 <+105>:	cmpl   $0x146,0x8(%rsp)
   0x0000000000400fc8 <+113>:	je     0x401094 <phase_3+317>
   0x0000000000400fce <+119>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fd3 <+124>:	mov    $0x78,%eax
   0x0000000000400fd8 <+129>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fdd <+134>:	mov    $0x77,%eax
   0x0000000000400fe2 <+139>:	cmpl   $0x15f,0x8(%rsp)
   0x0000000000400fea <+147>:	je     0x401094 <phase_3+317>
   0x0000000000400ff0 <+153>:	callq  0x4015ef <explode_bomb>
   0x0000000000400ff5 <+158>:	mov    $0x77,%eax
   0x0000000000400ffa <+163>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fff <+168>:	mov    $0x78,%eax
   0x0000000000401004 <+173>:	cmpl   $0xd2,0x8(%rsp)
   0x000000000040100c <+181>:	je     0x401094 <phase_3+317>
   0x0000000000401012 <+187>:	callq  0x4015ef <explode_bomb>
   0x0000000000401017 <+192>:	mov    $0x78,%eax
   0x000000000040101c <+197>:	jmp    0x401094 <phase_3+317>
   0x000000000040101e <+199>:	mov    $0x79,%eax
   0x0000000000401023 <+204>:	cmpl   $0x305,0x8(%rsp)
   0x000000000040102b <+212>:	je     0x401094 <phase_3+317>
   0x000000000040102d <+214>:	callq  0x4015ef <explode_bomb>
   0x0000000000401032 <+219>:	mov    $0x79,%eax
   0x0000000000401037 <+224>:	jmp    0x401094 <phase_3+317>
   0x0000000000401039 <+226>:	mov    $0x6b,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040103e <+231>:	cmpl   $0x12f,0x8(%rsp)
   0x0000000000401046 <+239>:	je     0x401094 <phase_3+317>
   0x0000000000401048 <+241>:	callq  0x4015ef <explode_bomb>
   0x000000000040104d <+246>:	mov    $0x6b,%eax
   0x0000000000401052 <+251>:	jmp    0x401094 <phase_3+317>
   0x0000000000401054 <+253>:	mov    $0x6b,%eax
   0x0000000000401059 <+258>:	cmpl   $0x387,0x8(%rsp)
   0x0000000000401061 <+266>:	je     0x401094 <phase_3+317>
   0x0000000000401063 <+268>:	callq  0x4015ef <explode_bomb>
   0x0000000000401068 <+273>:	mov    $0x6b,%eax
   0x000000000040106d <+278>:	jmp    0x401094 <phase_3+317>
   0x000000000040106f <+280>:	mov    $0x75,%eax
   0x0000000000401074 <+285>:	cmpl   $0x2e4,0x8(%rsp)
   0x000000000040107c <+293>:	je     0x401094 <phase_3+317>
   0x000000000040107e <+295>:	callq  0x4015ef <explode_bomb>
   0x0000000000401083 <+300>:	mov    $0x75,%eax
   0x0000000000401088 <+305>:	jmp    0x401094 <phase_3+317>
   0x000000000040108a <+307>:	callq  0x4015ef <explode_bomb>
   0x000000000040108f <+312>:	mov    $0x76,%eax
   0x0000000000401094 <+317>:	cmp    0x7(%rsp),%al
   0x0000000000401098 <+321>:	je     0x40109f <phase_3+328>
   0x000000000040109a <+323>:	callq  0x4015ef <explode_bomb>
   0x000000000040109f <+328>:	add    $0x18,%rsp
   0x00000000004010a3 <+332>:	retq
End of assembler dump.
(gdb) x/s 0x40257e
0x40257e:	"%d %c %d"
(gdb) x/i 0x40257e
   0x40257e:	and    $0x63252064,%eax
(gdb) x/d 0x40257e
0x40257e:	37
(gdb) p $0x40257e
$1 = void
(gdb) p/x 0x40257e
$2 = 0x40257e
(gdb) p/x $0x40257e
$3 = Value can't be converted to integer.
(gdb) i r
rax            0x604c60	6311008
rbx            0x7fffffffdef8	140737488346872
rcx            0x3	3
rdx            0x3	3
rsi            0x604c60	6311008
rdi            0x604c60	6311008
rbp            0x0	0x0
rsp            0x7fffffffde08	0x7fffffffde08
r8             0x2aaaaaae0004	46912496336900
r9             0x0	0
r10            0x3	3
r11            0x246	582
r12            0x400cd0	4197584
r13            0x7fffffffdef0	140737488346864
r14            0x0	0
r15            0x0	0
rip            0x400f57	0x400f57 <phase_3>
eflags         0x202	[ IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
4 b 5

Breakpoint 2, 0x0000000000400f57 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
=> 0x0000000000400f57 <+0>:	sub    $0x18,%rsp
   0x0000000000400f5b <+4>:	lea    0x8(%rsp),%r8
   0x0000000000400f60 <+9>:	lea    0x7(%rsp),%rcx
   0x0000000000400f65 <+14>:	lea    0xc(%rsp),%rdx
   0x0000000000400f6a <+19>:	mov    $0x40257e,%esi
   0x0000000000400f6f <+24>:	mov    $0x0,%eax
   0x0000000000400f74 <+29>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x0000000000400f79 <+34>:	cmp    $0x2,%eax
   0x0000000000400f7c <+37>:	jg     0x400f83 <phase_3+44>
   0x0000000000400f7e <+39>:	callq  0x4015ef <explode_bomb>
   0x0000000000400f83 <+44>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f88 <+49>:	ja     0x40108a <phase_3+307>
   0x0000000000400f8e <+55>:	mov    0xc(%rsp),%eax
   0x0000000000400f92 <+59>:	jmpq   *0x4025a0(,%rax,8)
   0x0000000000400f99 <+66>:	mov    $0x6d,%eax
   0x0000000000400f9e <+71>:	cmpl   $0x81,0x8(%rsp)
   0x0000000000400fa6 <+79>:	je     0x401094 <phase_3+317>
   0x0000000000400fac <+85>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fb1 <+90>:	mov    $0x6d,%eax
   0x0000000000400fb6 <+95>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fbb <+100>:	mov    $0x78,%eax
   0x0000000000400fc0 <+105>:	cmpl   $0x146,0x8(%rsp)
   0x0000000000400fc8 <+113>:	je     0x401094 <phase_3+317>
   0x0000000000400fce <+119>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fd3 <+124>:	mov    $0x78,%eax
   0x0000000000400fd8 <+129>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fdd <+134>:	mov    $0x77,%eax
   0x0000000000400fe2 <+139>:	cmpl   $0x15f,0x8(%rsp)
   0x0000000000400fea <+147>:	je     0x401094 <phase_3+317>
   0x0000000000400ff0 <+153>:	callq  0x4015ef <explode_bomb>
   0x0000000000400ff5 <+158>:	mov    $0x77,%eax
   0x0000000000400ffa <+163>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fff <+168>:	mov    $0x78,%eax
   0x0000000000401004 <+173>:	cmpl   $0xd2,0x8(%rsp)
   0x000000000040100c <+181>:	je     0x401094 <phase_3+317>
   0x0000000000401012 <+187>:	callq  0x4015ef <explode_bomb>
   0x0000000000401017 <+192>:	mov    $0x78,%eax
   0x000000000040101c <+197>:	jmp    0x401094 <phase_3+317>
   0x000000000040101e <+199>:	mov    $0x79,%eax
   0x0000000000401023 <+204>:	cmpl   $0x305,0x8(%rsp)
   0x000000000040102b <+212>:	je     0x401094 <phase_3+317>
   0x000000000040102d <+214>:	callq  0x4015ef <explode_bomb>
   0x0000000000401032 <+219>:	mov    $0x79,%eax
   0x0000000000401037 <+224>:	jmp    0x401094 <phase_3+317>
   0x0000000000401039 <+226>:	mov    $0x6b,%eax
---Type <return> to continue, or q <return> to quit---until
   0x000000000040103e <+231>:	cmpl   $0x12f,0x8(%rsp)
   0x0000000000401046 <+239>:	je     0x401094 <phase_3+317>
   0x0000000000401048 <+241>:	callq  0x4015ef <explode_bomb>
   0x000000000040104d <+246>:	mov    $0x6b,%eax
   0x0000000000401052 <+251>:	jmp    0x401094 <phase_3+317>
   0x0000000000401054 <+253>:	mov    $0x6b,%eax
   0x0000000000401059 <+258>:	cmpl   $0x387,0x8(%rsp)
   0x0000000000401061 <+266>:	je     0x401094 <phase_3+317>
   0x0000000000401063 <+268>:	callq  0x4015ef <explode_bomb>
   0x0000000000401068 <+273>:	mov    $0x6b,%eax
   0x000000000040106d <+278>:	jmp    0x401094 <phase_3+317>
   0x000000000040106f <+280>:	mov    $0x75,%eax
   0x0000000000401074 <+285>:	cmpl   $0x2e4,0x8(%rsp)
   0x000000000040107c <+293>:	je     0x401094 <phase_3+317>
   0x000000000040107e <+295>:	callq  0x4015ef <explode_bomb>
   0x0000000000401083 <+300>:	mov    $0x75,%eax
   0x0000000000401088 <+305>:	jmp    0x401094 <phase_3+317>
   0x000000000040108a <+307>:	callq  0x4015ef <explode_bomb>
   0x000000000040108f <+312>:	mov    $0x76,%eax
   0x0000000000401094 <+317>:	cmp    0x7(%rsp),%al
   0x0000000000401098 <+321>:	je     0x40109f <phase_3+328>
   0x000000000040109a <+323>:	callq  0x4015ef <explode_bomb>
   0x000000000040109f <+328>:	add    $0x18,%rsp
   0x00000000004010a3 <+332>:	retq
End of assembler dump.
(gdb) until *0x0400f7c
0x0000000000400f7c in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f57 <+0>:	sub    $0x18,%rsp
   0x0000000000400f5b <+4>:	lea    0x8(%rsp),%r8
   0x0000000000400f60 <+9>:	lea    0x7(%rsp),%rcx
   0x0000000000400f65 <+14>:	lea    0xc(%rsp),%rdx
   0x0000000000400f6a <+19>:	mov    $0x40257e,%esi
   0x0000000000400f6f <+24>:	mov    $0x0,%eax
   0x0000000000400f74 <+29>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x0000000000400f79 <+34>:	cmp    $0x2,%eax
=> 0x0000000000400f7c <+37>:	jg     0x400f83 <phase_3+44>
   0x0000000000400f7e <+39>:	callq  0x4015ef <explode_bomb>
   0x0000000000400f83 <+44>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f88 <+49>:	ja     0x40108a <phase_3+307>
   0x0000000000400f8e <+55>:	mov    0xc(%rsp),%eax
   0x0000000000400f92 <+59>:	jmpq   *0x4025a0(,%rax,8)
   0x0000000000400f99 <+66>:	mov    $0x6d,%eax
   0x0000000000400f9e <+71>:	cmpl   $0x81,0x8(%rsp)
   0x0000000000400fa6 <+79>:	je     0x401094 <phase_3+317>
   0x0000000000400fac <+85>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fb1 <+90>:	mov    $0x6d,%eax
   0x0000000000400fb6 <+95>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fbb <+100>:	mov    $0x78,%eax
   0x0000000000400fc0 <+105>:	cmpl   $0x146,0x8(%rsp)
   0x0000000000400fc8 <+113>:	je     0x401094 <phase_3+317>
   0x0000000000400fce <+119>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fd3 <+124>:	mov    $0x78,%eax
   0x0000000000400fd8 <+129>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fdd <+134>:	mov    $0x77,%eax
   0x0000000000400fe2 <+139>:	cmpl   $0x15f,0x8(%rsp)
   0x0000000000400fea <+147>:	je     0x401094 <phase_3+317>
   0x0000000000400ff0 <+153>:	callq  0x4015ef <explode_bomb>
   0x0000000000400ff5 <+158>:	mov    $0x77,%eax
   0x0000000000400ffa <+163>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fff <+168>:	mov    $0x78,%eax
   0x0000000000401004 <+173>:	cmpl   $0xd2,0x8(%rsp)
   0x000000000040100c <+181>:	je     0x401094 <phase_3+317>
   0x0000000000401012 <+187>:	callq  0x4015ef <explode_bomb>
   0x0000000000401017 <+192>:	mov    $0x78,%eax
   0x000000000040101c <+197>:	jmp    0x401094 <phase_3+317>
   0x000000000040101e <+199>:	mov    $0x79,%eax
   0x0000000000401023 <+204>:	cmpl   $0x305,0x8(%rsp)
   0x000000000040102b <+212>:	je     0x401094 <phase_3+317>
   0x000000000040102d <+214>:	callq  0x4015ef <explode_bomb>
   0x0000000000401032 <+219>:	mov    $0x79,%eax
   0x0000000000401037 <+224>:	jmp    0x401094 <phase_3+317>
   0x0000000000401039 <+226>:	mov    $0x6b,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040103e <+231>:	cmpl   $0x12f,0x8(%rsp)
   0x0000000000401046 <+239>:	je     0x401094 <phase_3+317>
   0x0000000000401048 <+241>:	callq  0x4015ef <explode_bomb>
   0x000000000040104d <+246>:	mov    $0x6b,%eax
   0x0000000000401052 <+251>:	jmp    0x401094 <phase_3+317>
   0x0000000000401054 <+253>:	mov    $0x6b,%eax
   0x0000000000401059 <+258>:	cmpl   $0x387,0x8(%rsp)
   0x0000000000401061 <+266>:	je     0x401094 <phase_3+317>
   0x0000000000401063 <+268>:	callq  0x4015ef <explode_bomb>
   0x0000000000401068 <+273>:	mov    $0x6b,%eax
   0x000000000040106d <+278>:	jmp    0x401094 <phase_3+317>
   0x000000000040106f <+280>:	mov    $0x75,%eax
   0x0000000000401074 <+285>:	cmpl   $0x2e4,0x8(%rsp)
   0x000000000040107c <+293>:	je     0x401094 <phase_3+317>
   0x000000000040107e <+295>:	callq  0x4015ef <explode_bomb>
   0x0000000000401083 <+300>:	mov    $0x75,%eax
   0x0000000000401088 <+305>:	jmp    0x401094 <phase_3+317>
   0x000000000040108a <+307>:	callq  0x4015ef <explode_bomb>
   0x000000000040108f <+312>:	mov    $0x76,%eax
   0x0000000000401094 <+317>:	cmp    0x7(%rsp),%al
   0x0000000000401098 <+321>:	je     0x40109f <phase_3+328>
   0x000000000040109a <+323>:	callq  0x4015ef <explode_bomb>
   0x000000000040109f <+328>:	add    $0x18,%rsp
   0x00000000004010a3 <+332>:	retq
End of assembler dump.
(gdb) i r
rax            0x3	3
rbx            0x7fffffffdef8	140737488346872
rcx            0x28	40
rdx            0x7fffffffddf8	140737488346616
rsi            0x7fffffffd7f0	140737488345072
rdi            0x1999999999999999	1844674407370955161
rbp            0x0	0x0
rsp            0x7fffffffddf0	0x7fffffffddf0
r8             0x2aaaab08a060	46912502276192
r9             0x0	0
r10            0x5	5
r11            0x0	0
r12            0x400cd0	4197584
r13            0x7fffffffdef0	140737488346864
r14            0x0	0
r15            0x0	0
rip            0x400f7c	0x400f7c <phase_3+37>
eflags         0x202	[ IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) p $0x7fffffffddf0
$4 = void
(gdb) p $rsp
$5 = (void *) 0x7fffffffddf0
(gdb) p *(int *) $rsp
$6 = -8456
(gdb) p *(int *) ($rsp+4)
$7 = 1644199935
(gdb) p *(int *) ($rsp+8)
$8 = 5
(gdb) p *(int *) ($rsp+12)
$9 = 4
(gdb) p *(int *) ($rsp+16)
$10 = 4197584
(gdb) p *(int *) ($rsp+7)
$11 = 1378
(gdb) p $0x400f83
$12 = void
(gdb) x/i $0x400f83
Value can't be converted to integer.
(gdb) x/s $0x400f83
Value can't be converted to integer.
(gdb) ni
0x0000000000400f83 in phase_3 ()
(gdb) ni
0x0000000000400f88 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f57 <+0>:	sub    $0x18,%rsp
   0x0000000000400f5b <+4>:	lea    0x8(%rsp),%r8
   0x0000000000400f60 <+9>:	lea    0x7(%rsp),%rcx
   0x0000000000400f65 <+14>:	lea    0xc(%rsp),%rdx
   0x0000000000400f6a <+19>:	mov    $0x40257e,%esi
   0x0000000000400f6f <+24>:	mov    $0x0,%eax
   0x0000000000400f74 <+29>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x0000000000400f79 <+34>:	cmp    $0x2,%eax
   0x0000000000400f7c <+37>:	jg     0x400f83 <phase_3+44>
   0x0000000000400f7e <+39>:	callq  0x4015ef <explode_bomb>
   0x0000000000400f83 <+44>:	cmpl   $0x7,0xc(%rsp)
=> 0x0000000000400f88 <+49>:	ja     0x40108a <phase_3+307>
   0x0000000000400f8e <+55>:	mov    0xc(%rsp),%eax
   0x0000000000400f92 <+59>:	jmpq   *0x4025a0(,%rax,8)
   0x0000000000400f99 <+66>:	mov    $0x6d,%eax
   0x0000000000400f9e <+71>:	cmpl   $0x81,0x8(%rsp)
   0x0000000000400fa6 <+79>:	je     0x401094 <phase_3+317>
   0x0000000000400fac <+85>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fb1 <+90>:	mov    $0x6d,%eax
   0x0000000000400fb6 <+95>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fbb <+100>:	mov    $0x78,%eax
   0x0000000000400fc0 <+105>:	cmpl   $0x146,0x8(%rsp)
   0x0000000000400fc8 <+113>:	je     0x401094 <phase_3+317>
   0x0000000000400fce <+119>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fd3 <+124>:	mov    $0x78,%eax
   0x0000000000400fd8 <+129>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fdd <+134>:	mov    $0x77,%eax
   0x0000000000400fe2 <+139>:	cmpl   $0x15f,0x8(%rsp)
   0x0000000000400fea <+147>:	je     0x401094 <phase_3+317>
   0x0000000000400ff0 <+153>:	callq  0x4015ef <explode_bomb>
   0x0000000000400ff5 <+158>:	mov    $0x77,%eax
   0x0000000000400ffa <+163>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fff <+168>:	mov    $0x78,%eax
   0x0000000000401004 <+173>:	cmpl   $0xd2,0x8(%rsp)
   0x000000000040100c <+181>:	je     0x401094 <phase_3+317>
   0x0000000000401012 <+187>:	callq  0x4015ef <explode_bomb>
   0x0000000000401017 <+192>:	mov    $0x78,%eax
   0x000000000040101c <+197>:	jmp    0x401094 <phase_3+317>
   0x000000000040101e <+199>:	mov    $0x79,%eax
   0x0000000000401023 <+204>:	cmpl   $0x305,0x8(%rsp)
   0x000000000040102b <+212>:	je     0x401094 <phase_3+317>
   0x000000000040102d <+214>:	callq  0x4015ef <explode_bomb>
   0x0000000000401032 <+219>:	mov    $0x79,%eax
   0x0000000000401037 <+224>:	jmp    0x401094 <phase_3+317>
   0x0000000000401039 <+226>:	mov    $0x6b,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040103e <+231>:	cmpl   $0x12f,0x8(%rsp)
   0x0000000000401046 <+239>:	je     0x401094 <phase_3+317>
   0x0000000000401048 <+241>:	callq  0x4015ef <explode_bomb>
   0x000000000040104d <+246>:	mov    $0x6b,%eax
   0x0000000000401052 <+251>:	jmp    0x401094 <phase_3+317>
   0x0000000000401054 <+253>:	mov    $0x6b,%eax
   0x0000000000401059 <+258>:	cmpl   $0x387,0x8(%rsp)
   0x0000000000401061 <+266>:	je     0x401094 <phase_3+317>
   0x0000000000401063 <+268>:	callq  0x4015ef <explode_bomb>
   0x0000000000401068 <+273>:	mov    $0x6b,%eax
   0x000000000040106d <+278>:	jmp    0x401094 <phase_3+317>
   0x000000000040106f <+280>:	mov    $0x75,%eax
   0x0000000000401074 <+285>:	cmpl   $0x2e4,0x8(%rsp)
   0x000000000040107c <+293>:	je     0x401094 <phase_3+317>
   0x000000000040107e <+295>:	callq  0x4015ef <explode_bomb>
   0x0000000000401083 <+300>:	mov    $0x75,%eax
   0x0000000000401088 <+305>:	jmp    0x401094 <phase_3+317>
   0x000000000040108a <+307>:	callq  0x4015ef <explode_bomb>
   0x000000000040108f <+312>:	mov    $0x76,%eax
   0x0000000000401094 <+317>:	cmp    0x7(%rsp),%al
   0x0000000000401098 <+321>:	je     0x40109f <phase_3+328>
   0x000000000040109a <+323>:	callq  0x4015ef <explode_bomb>
   0x000000000040109f <+328>:	add    $0x18,%rsp
   0x00000000004010a3 <+332>:	retq
End of assembler dump.
(gdb) p *(int *) ($rsp+4)
$13 = 1644199935
(gdb) p *(int *) ($rsp+5)
$14 = 90308735
(gdb) p *(int *) ($rsp+6)
$15 = 352768
(gdb) p *(int *) ($rsp+7)
$16 = 1378
(gdb) p *(int *) ($rsp+8)
$17 = 5
(gdb) p *(int *) ($rsp+9)
$18 = 67108864
(gdb) p *(int *) ($rsp+10)
$19 = 262144
(gdb) p *(int *) ($rsp+11)
$20 = 1024
(gdb) p *(int *) ($rsp+12)
$21 = 4
(gdb) p *(int *) ($rsp+13)
$22 = -805306368
(gdb) p *(int *) ($rsp+14)
$23 = 214958080
(gdb) p *(int *) ($rsp+15)
$24 = 1074581504
(gdb) p *(int *) ($rsp+16)
$25 = 4197584
(gdb) p *(int *) ($rsp+17)
$26 = 16396
(gdb) p *(int *) ($rsp+18)
$27 = 64
(gdb) p *(int *) ($rsp+19)
$28 = 0
(gdb) p *(int *) ($rsp+20)
$29 = 0
(gdb) p *(int *) ($rsp+21)
$30 = -1929379840
(gdb) p *(int *) ($rsp+22)
$31 = 244121600
(gdb) p *(int *) ($rsp+23)
$32 = 1074695424
(gdb) p *(int *) ($rsp+24)
$33 = 4198029
(gdb) p *(int *) ($rsp+25)
$34 = 16398
(gdb) p *(int *) ($rsp+25)
$35 = 16398
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
7 y 129

Breakpoint 2, 0x0000000000400f57 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
=> 0x0000000000400f57 <+0>:	sub    $0x18,%rsp
   0x0000000000400f5b <+4>:	lea    0x8(%rsp),%r8
   0x0000000000400f60 <+9>:	lea    0x7(%rsp),%rcx
   0x0000000000400f65 <+14>:	lea    0xc(%rsp),%rdx
   0x0000000000400f6a <+19>:	mov    $0x40257e,%esi
   0x0000000000400f6f <+24>:	mov    $0x0,%eax
   0x0000000000400f74 <+29>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x0000000000400f79 <+34>:	cmp    $0x2,%eax
   0x0000000000400f7c <+37>:	jg     0x400f83 <phase_3+44>
   0x0000000000400f7e <+39>:	callq  0x4015ef <explode_bomb>
   0x0000000000400f83 <+44>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f88 <+49>:	ja     0x40108a <phase_3+307>
   0x0000000000400f8e <+55>:	mov    0xc(%rsp),%eax
   0x0000000000400f92 <+59>:	jmpq   *0x4025a0(,%rax,8)
   0x0000000000400f99 <+66>:	mov    $0x6d,%eax
   0x0000000000400f9e <+71>:	cmpl   $0x81,0x8(%rsp)
   0x0000000000400fa6 <+79>:	je     0x401094 <phase_3+317>
   0x0000000000400fac <+85>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fb1 <+90>:	mov    $0x6d,%eax
   0x0000000000400fb6 <+95>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fbb <+100>:	mov    $0x78,%eax
   0x0000000000400fc0 <+105>:	cmpl   $0x146,0x8(%rsp)
   0x0000000000400fc8 <+113>:	je     0x401094 <phase_3+317>
   0x0000000000400fce <+119>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fd3 <+124>:	mov    $0x78,%eax
   0x0000000000400fd8 <+129>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fdd <+134>:	mov    $0x77,%eax
   0x0000000000400fe2 <+139>:	cmpl   $0x15f,0x8(%rsp)
   0x0000000000400fea <+147>:	je     0x401094 <phase_3+317>
   0x0000000000400ff0 <+153>:	callq  0x4015ef <explode_bomb>
   0x0000000000400ff5 <+158>:	mov    $0x77,%eax
   0x0000000000400ffa <+163>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fff <+168>:	mov    $0x78,%eax
   0x0000000000401004 <+173>:	cmpl   $0xd2,0x8(%rsp)
   0x000000000040100c <+181>:	je     0x401094 <phase_3+317>
   0x0000000000401012 <+187>:	callq  0x4015ef <explode_bomb>
   0x0000000000401017 <+192>:	mov    $0x78,%eax
   0x000000000040101c <+197>:	jmp    0x401094 <phase_3+317>
   0x000000000040101e <+199>:	mov    $0x79,%eax
   0x0000000000401023 <+204>:	cmpl   $0x305,0x8(%rsp)
   0x000000000040102b <+212>:	je     0x401094 <phase_3+317>
   0x000000000040102d <+214>:	callq  0x4015ef <explode_bomb>
   0x0000000000401032 <+219>:	mov    $0x79,%eax
   0x0000000000401037 <+224>:	jmp    0x401094 <phase_3+317>
   0x0000000000401039 <+226>:	mov    $0x6b,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040103e <+231>:	cmpl   $0x12f,0x8(%rsp)
   0x0000000000401046 <+239>:	je     0x401094 <phase_3+317>
   0x0000000000401048 <+241>:	callq  0x4015ef <explode_bomb>
   0x000000000040104d <+246>:	mov    $0x6b,%eax
   0x0000000000401052 <+251>:	jmp    0x401094 <phase_3+317>
   0x0000000000401054 <+253>:	mov    $0x6b,%eax
   0x0000000000401059 <+258>:	cmpl   $0x387,0x8(%rsp)
   0x0000000000401061 <+266>:	je     0x401094 <phase_3+317>
   0x0000000000401063 <+268>:	callq  0x4015ef <explode_bomb>
   0x0000000000401068 <+273>:	mov    $0x6b,%eax
   0x000000000040106d <+278>:	jmp    0x401094 <phase_3+317>
   0x000000000040106f <+280>:	mov    $0x75,%eax
   0x0000000000401074 <+285>:	cmpl   $0x2e4,0x8(%rsp)
   0x000000000040107c <+293>:	je     0x401094 <phase_3+317>
   0x000000000040107e <+295>:	callq  0x4015ef <explode_bomb>
   0x0000000000401083 <+300>:	mov    $0x75,%eax
   0x0000000000401088 <+305>:	jmp    0x401094 <phase_3+317>
   0x000000000040108a <+307>:	callq  0x4015ef <explode_bomb>
   0x000000000040108f <+312>:	mov    $0x76,%eax
   0x0000000000401094 <+317>:	cmp    0x7(%rsp),%al
   0x0000000000401098 <+321>:	je     0x40109f <phase_3+328>
   0x000000000040109a <+323>:	callq  0x4015ef <explode_bomb>
   0x000000000040109f <+328>:	add    $0x18,%rsp
   0x00000000004010a3 <+332>:	retq
End of assembler dump.
(gdb) until *0x0400fa6

Breakpoint 1, 0x00000000004015ef in explode_bomb ()
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
7 y 129

Breakpoint 2, 0x0000000000400f57 in phase_3 ()
(gdb) b *0x0400f7c
Breakpoint 7 at 0x400f7c
(gdb) c
Continuing.

Breakpoint 7, 0x0000000000400f7c in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f57 <+0>:	sub    $0x18,%rsp
   0x0000000000400f5b <+4>:	lea    0x8(%rsp),%r8
   0x0000000000400f60 <+9>:	lea    0x7(%rsp),%rcx
   0x0000000000400f65 <+14>:	lea    0xc(%rsp),%rdx
   0x0000000000400f6a <+19>:	mov    $0x40257e,%esi
   0x0000000000400f6f <+24>:	mov    $0x0,%eax
   0x0000000000400f74 <+29>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x0000000000400f79 <+34>:	cmp    $0x2,%eax
=> 0x0000000000400f7c <+37>:	jg     0x400f83 <phase_3+44>
   0x0000000000400f7e <+39>:	callq  0x4015ef <explode_bomb>
   0x0000000000400f83 <+44>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f88 <+49>:	ja     0x40108a <phase_3+307>
   0x0000000000400f8e <+55>:	mov    0xc(%rsp),%eax
   0x0000000000400f92 <+59>:	jmpq   *0x4025a0(,%rax,8)
   0x0000000000400f99 <+66>:	mov    $0x6d,%eax
   0x0000000000400f9e <+71>:	cmpl   $0x81,0x8(%rsp)
   0x0000000000400fa6 <+79>:	je     0x401094 <phase_3+317>
   0x0000000000400fac <+85>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fb1 <+90>:	mov    $0x6d,%eax
   0x0000000000400fb6 <+95>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fbb <+100>:	mov    $0x78,%eax
   0x0000000000400fc0 <+105>:	cmpl   $0x146,0x8(%rsp)
   0x0000000000400fc8 <+113>:	je     0x401094 <phase_3+317>
   0x0000000000400fce <+119>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fd3 <+124>:	mov    $0x78,%eax
   0x0000000000400fd8 <+129>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fdd <+134>:	mov    $0x77,%eax
   0x0000000000400fe2 <+139>:	cmpl   $0x15f,0x8(%rsp)
   0x0000000000400fea <+147>:	je     0x401094 <phase_3+317>
   0x0000000000400ff0 <+153>:	callq  0x4015ef <explode_bomb>
   0x0000000000400ff5 <+158>:	mov    $0x77,%eax
   0x0000000000400ffa <+163>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fff <+168>:	mov    $0x78,%eax
   0x0000000000401004 <+173>:	cmpl   $0xd2,0x8(%rsp)
   0x000000000040100c <+181>:	je     0x401094 <phase_3+317>
   0x0000000000401012 <+187>:	callq  0x4015ef <explode_bomb>
   0x0000000000401017 <+192>:	mov    $0x78,%eax
   0x000000000040101c <+197>:	jmp    0x401094 <phase_3+317>
   0x000000000040101e <+199>:	mov    $0x79,%eax
   0x0000000000401023 <+204>:	cmpl   $0x305,0x8(%rsp)
   0x000000000040102b <+212>:	je     0x401094 <phase_3+317>
   0x000000000040102d <+214>:	callq  0x4015ef <explode_bomb>
   0x0000000000401032 <+219>:	mov    $0x79,%eax
   0x0000000000401037 <+224>:	jmp    0x401094 <phase_3+317>
   0x0000000000401039 <+226>:	mov    $0x6b,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040103e <+231>:	cmpl   $0x12f,0x8(%rsp)
   0x0000000000401046 <+239>:	je     0x401094 <phase_3+317>
   0x0000000000401048 <+241>:	callq  0x4015ef <explode_bomb>
   0x000000000040104d <+246>:	mov    $0x6b,%eax
   0x0000000000401052 <+251>:	jmp    0x401094 <phase_3+317>
   0x0000000000401054 <+253>:	mov    $0x6b,%eax
   0x0000000000401059 <+258>:	cmpl   $0x387,0x8(%rsp)
   0x0000000000401061 <+266>:	je     0x401094 <phase_3+317>
   0x0000000000401063 <+268>:	callq  0x4015ef <explode_bomb>
   0x0000000000401068 <+273>:	mov    $0x6b,%eax
   0x000000000040106d <+278>:	jmp    0x401094 <phase_3+317>
   0x000000000040106f <+280>:	mov    $0x75,%eax
   0x0000000000401074 <+285>:	cmpl   $0x2e4,0x8(%rsp)
   0x000000000040107c <+293>:	je     0x401094 <phase_3+317>
   0x000000000040107e <+295>:	callq  0x4015ef <explode_bomb>
   0x0000000000401083 <+300>:	mov    $0x75,%eax
   0x0000000000401088 <+305>:	jmp    0x401094 <phase_3+317>
   0x000000000040108a <+307>:	callq  0x4015ef <explode_bomb>
   0x000000000040108f <+312>:	mov    $0x76,%eax
   0x0000000000401094 <+317>:	cmp    0x7(%rsp),%al
   0x0000000000401098 <+321>:	je     0x40109f <phase_3+328>
   0x000000000040109a <+323>:	callq  0x4015ef <explode_bomb>
   0x000000000040109f <+328>:	add    $0x18,%rsp
   0x00000000004010a3 <+332>:	retq
End of assembler dump.
(gdb) ni
0x0000000000400f83 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f57 <+0>:	sub    $0x18,%rsp
   0x0000000000400f5b <+4>:	lea    0x8(%rsp),%r8
   0x0000000000400f60 <+9>:	lea    0x7(%rsp),%rcx
   0x0000000000400f65 <+14>:	lea    0xc(%rsp),%rdx
   0x0000000000400f6a <+19>:	mov    $0x40257e,%esi
   0x0000000000400f6f <+24>:	mov    $0x0,%eax
   0x0000000000400f74 <+29>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x0000000000400f79 <+34>:	cmp    $0x2,%eax
   0x0000000000400f7c <+37>:	jg     0x400f83 <phase_3+44>
   0x0000000000400f7e <+39>:	callq  0x4015ef <explode_bomb>
=> 0x0000000000400f83 <+44>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f88 <+49>:	ja     0x40108a <phase_3+307>
   0x0000000000400f8e <+55>:	mov    0xc(%rsp),%eax
   0x0000000000400f92 <+59>:	jmpq   *0x4025a0(,%rax,8)
   0x0000000000400f99 <+66>:	mov    $0x6d,%eax
   0x0000000000400f9e <+71>:	cmpl   $0x81,0x8(%rsp)
   0x0000000000400fa6 <+79>:	je     0x401094 <phase_3+317>
   0x0000000000400fac <+85>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fb1 <+90>:	mov    $0x6d,%eax
   0x0000000000400fb6 <+95>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fbb <+100>:	mov    $0x78,%eax
   0x0000000000400fc0 <+105>:	cmpl   $0x146,0x8(%rsp)
   0x0000000000400fc8 <+113>:	je     0x401094 <phase_3+317>
   0x0000000000400fce <+119>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fd3 <+124>:	mov    $0x78,%eax
   0x0000000000400fd8 <+129>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fdd <+134>:	mov    $0x77,%eax
   0x0000000000400fe2 <+139>:	cmpl   $0x15f,0x8(%rsp)
   0x0000000000400fea <+147>:	je     0x401094 <phase_3+317>
   0x0000000000400ff0 <+153>:	callq  0x4015ef <explode_bomb>
   0x0000000000400ff5 <+158>:	mov    $0x77,%eax
   0x0000000000400ffa <+163>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fff <+168>:	mov    $0x78,%eax
   0x0000000000401004 <+173>:	cmpl   $0xd2,0x8(%rsp)
   0x000000000040100c <+181>:	je     0x401094 <phase_3+317>
   0x0000000000401012 <+187>:	callq  0x4015ef <explode_bomb>
   0x0000000000401017 <+192>:	mov    $0x78,%eax
   0x000000000040101c <+197>:	jmp    0x401094 <phase_3+317>
   0x000000000040101e <+199>:	mov    $0x79,%eax
   0x0000000000401023 <+204>:	cmpl   $0x305,0x8(%rsp)
   0x000000000040102b <+212>:	je     0x401094 <phase_3+317>
   0x000000000040102d <+214>:	callq  0x4015ef <explode_bomb>
   0x0000000000401032 <+219>:	mov    $0x79,%eax
   0x0000000000401037 <+224>:	jmp    0x401094 <phase_3+317>
   0x0000000000401039 <+226>:	mov    $0x6b,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040103e <+231>:	cmpl   $0x12f,0x8(%rsp)
   0x0000000000401046 <+239>:	je     0x401094 <phase_3+317>
   0x0000000000401048 <+241>:	callq  0x4015ef <explode_bomb>
   0x000000000040104d <+246>:	mov    $0x6b,%eax
   0x0000000000401052 <+251>:	jmp    0x401094 <phase_3+317>
   0x0000000000401054 <+253>:	mov    $0x6b,%eax
   0x0000000000401059 <+258>:	cmpl   $0x387,0x8(%rsp)
   0x0000000000401061 <+266>:	je     0x401094 <phase_3+317>
   0x0000000000401063 <+268>:	callq  0x4015ef <explode_bomb>
   0x0000000000401068 <+273>:	mov    $0x6b,%eax
   0x000000000040106d <+278>:	jmp    0x401094 <phase_3+317>
   0x000000000040106f <+280>:	mov    $0x75,%eax
   0x0000000000401074 <+285>:	cmpl   $0x2e4,0x8(%rsp)
   0x000000000040107c <+293>:	je     0x401094 <phase_3+317>
   0x000000000040107e <+295>:	callq  0x4015ef <explode_bomb>
   0x0000000000401083 <+300>:	mov    $0x75,%eax
   0x0000000000401088 <+305>:	jmp    0x401094 <phase_3+317>
   0x000000000040108a <+307>:	callq  0x4015ef <explode_bomb>
   0x000000000040108f <+312>:	mov    $0x76,%eax
   0x0000000000401094 <+317>:	cmp    0x7(%rsp),%al
   0x0000000000401098 <+321>:	je     0x40109f <phase_3+328>
   0x000000000040109a <+323>:	callq  0x4015ef <explode_bomb>
   0x000000000040109f <+328>:	add    $0x18,%rsp
   0x00000000004010a3 <+332>:	retq
End of assembler dump.
(gdb) x/i 0x40108a
   0x40108a <phase_3+307>:	callq  0x4015ef <explode_bomb>
(gdb) ni
0x0000000000400f88 in phase_3 ()
(gdb) ni
0x0000000000400f8e in phase_3 ()
(gdb) b *0x0400fa6
Breakpoint 8 at 0x400fa6
(gdb) c
Continuing.

Breakpoint 1, 0x00000000004015ef in explode_bomb ()
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
7 h 129

Breakpoint 2, 0x0000000000400f57 in phase_3 ()
(gdb) b *0x0400f92
Breakpoint 9 at 0x400f92
(gdb) c
Continuing.

Breakpoint 7, 0x0000000000400f7c in phase_3 ()
(gdb) c
Continuing.

Breakpoint 9, 0x0000000000400f92 in phase_3 ()
(gdb) ni
0x000000000040106f in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f57 <+0>:	sub    $0x18,%rsp
   0x0000000000400f5b <+4>:	lea    0x8(%rsp),%r8
   0x0000000000400f60 <+9>:	lea    0x7(%rsp),%rcx
   0x0000000000400f65 <+14>:	lea    0xc(%rsp),%rdx
   0x0000000000400f6a <+19>:	mov    $0x40257e,%esi
   0x0000000000400f6f <+24>:	mov    $0x0,%eax
   0x0000000000400f74 <+29>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x0000000000400f79 <+34>:	cmp    $0x2,%eax
   0x0000000000400f7c <+37>:	jg     0x400f83 <phase_3+44>
   0x0000000000400f7e <+39>:	callq  0x4015ef <explode_bomb>
   0x0000000000400f83 <+44>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f88 <+49>:	ja     0x40108a <phase_3+307>
   0x0000000000400f8e <+55>:	mov    0xc(%rsp),%eax
   0x0000000000400f92 <+59>:	jmpq   *0x4025a0(,%rax,8)
   0x0000000000400f99 <+66>:	mov    $0x6d,%eax
   0x0000000000400f9e <+71>:	cmpl   $0x81,0x8(%rsp)
   0x0000000000400fa6 <+79>:	je     0x401094 <phase_3+317>
   0x0000000000400fac <+85>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fb1 <+90>:	mov    $0x6d,%eax
   0x0000000000400fb6 <+95>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fbb <+100>:	mov    $0x78,%eax
   0x0000000000400fc0 <+105>:	cmpl   $0x146,0x8(%rsp)
   0x0000000000400fc8 <+113>:	je     0x401094 <phase_3+317>
   0x0000000000400fce <+119>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fd3 <+124>:	mov    $0x78,%eax
   0x0000000000400fd8 <+129>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fdd <+134>:	mov    $0x77,%eax
   0x0000000000400fe2 <+139>:	cmpl   $0x15f,0x8(%rsp)
   0x0000000000400fea <+147>:	je     0x401094 <phase_3+317>
   0x0000000000400ff0 <+153>:	callq  0x4015ef <explode_bomb>
   0x0000000000400ff5 <+158>:	mov    $0x77,%eax
   0x0000000000400ffa <+163>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fff <+168>:	mov    $0x78,%eax
   0x0000000000401004 <+173>:	cmpl   $0xd2,0x8(%rsp)
   0x000000000040100c <+181>:	je     0x401094 <phase_3+317>
   0x0000000000401012 <+187>:	callq  0x4015ef <explode_bomb>
   0x0000000000401017 <+192>:	mov    $0x78,%eax
   0x000000000040101c <+197>:	jmp    0x401094 <phase_3+317>
   0x000000000040101e <+199>:	mov    $0x79,%eax
   0x0000000000401023 <+204>:	cmpl   $0x305,0x8(%rsp)
   0x000000000040102b <+212>:	je     0x401094 <phase_3+317>
   0x000000000040102d <+214>:	callq  0x4015ef <explode_bomb>
   0x0000000000401032 <+219>:	mov    $0x79,%eax
   0x0000000000401037 <+224>:	jmp    0x401094 <phase_3+317>
   0x0000000000401039 <+226>:	mov    $0x6b,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040103e <+231>:	cmpl   $0x12f,0x8(%rsp)
   0x0000000000401046 <+239>:	je     0x401094 <phase_3+317>
   0x0000000000401048 <+241>:	callq  0x4015ef <explode_bomb>
   0x000000000040104d <+246>:	mov    $0x6b,%eax
   0x0000000000401052 <+251>:	jmp    0x401094 <phase_3+317>
   0x0000000000401054 <+253>:	mov    $0x6b,%eax
   0x0000000000401059 <+258>:	cmpl   $0x387,0x8(%rsp)
   0x0000000000401061 <+266>:	je     0x401094 <phase_3+317>
   0x0000000000401063 <+268>:	callq  0x4015ef <explode_bomb>
   0x0000000000401068 <+273>:	mov    $0x6b,%eax
   0x000000000040106d <+278>:	jmp    0x401094 <phase_3+317>
=> 0x000000000040106f <+280>:	mov    $0x75,%eax
   0x0000000000401074 <+285>:	cmpl   $0x2e4,0x8(%rsp)
   0x000000000040107c <+293>:	je     0x401094 <phase_3+317>
   0x000000000040107e <+295>:	callq  0x4015ef <explode_bomb>
   0x0000000000401083 <+300>:	mov    $0x75,%eax
   0x0000000000401088 <+305>:	jmp    0x401094 <phase_3+317>
   0x000000000040108a <+307>:	callq  0x4015ef <explode_bomb>
   0x000000000040108f <+312>:	mov    $0x76,%eax
   0x0000000000401094 <+317>:	cmp    0x7(%rsp),%al
   0x0000000000401098 <+321>:	je     0x40109f <phase_3+328>
   0x000000000040109a <+323>:	callq  0x4015ef <explode_bomb>
   0x000000000040109f <+328>:	add    $0x18,%rsp
   0x00000000004010a3 <+332>:	retq
End of assembler dump.
(gdb) ni
0x0000000000401074 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f57 <+0>:	sub    $0x18,%rsp
   0x0000000000400f5b <+4>:	lea    0x8(%rsp),%r8
   0x0000000000400f60 <+9>:	lea    0x7(%rsp),%rcx
   0x0000000000400f65 <+14>:	lea    0xc(%rsp),%rdx
   0x0000000000400f6a <+19>:	mov    $0x40257e,%esi
   0x0000000000400f6f <+24>:	mov    $0x0,%eax
   0x0000000000400f74 <+29>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x0000000000400f79 <+34>:	cmp    $0x2,%eax
   0x0000000000400f7c <+37>:	jg     0x400f83 <phase_3+44>
   0x0000000000400f7e <+39>:	callq  0x4015ef <explode_bomb>
   0x0000000000400f83 <+44>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f88 <+49>:	ja     0x40108a <phase_3+307>
   0x0000000000400f8e <+55>:	mov    0xc(%rsp),%eax
   0x0000000000400f92 <+59>:	jmpq   *0x4025a0(,%rax,8)
   0x0000000000400f99 <+66>:	mov    $0x6d,%eax
   0x0000000000400f9e <+71>:	cmpl   $0x81,0x8(%rsp)
   0x0000000000400fa6 <+79>:	je     0x401094 <phase_3+317>
   0x0000000000400fac <+85>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fb1 <+90>:	mov    $0x6d,%eax
   0x0000000000400fb6 <+95>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fbb <+100>:	mov    $0x78,%eax
   0x0000000000400fc0 <+105>:	cmpl   $0x146,0x8(%rsp)
   0x0000000000400fc8 <+113>:	je     0x401094 <phase_3+317>
   0x0000000000400fce <+119>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fd3 <+124>:	mov    $0x78,%eax
   0x0000000000400fd8 <+129>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fdd <+134>:	mov    $0x77,%eax
   0x0000000000400fe2 <+139>:	cmpl   $0x15f,0x8(%rsp)
   0x0000000000400fea <+147>:	je     0x401094 <phase_3+317>
   0x0000000000400ff0 <+153>:	callq  0x4015ef <explode_bomb>
   0x0000000000400ff5 <+158>:	mov    $0x77,%eax
   0x0000000000400ffa <+163>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fff <+168>:	mov    $0x78,%eax
   0x0000000000401004 <+173>:	cmpl   $0xd2,0x8(%rsp)
   0x000000000040100c <+181>:	je     0x401094 <phase_3+317>
   0x0000000000401012 <+187>:	callq  0x4015ef <explode_bomb>
   0x0000000000401017 <+192>:	mov    $0x78,%eax
   0x000000000040101c <+197>:	jmp    0x401094 <phase_3+317>
   0x000000000040101e <+199>:	mov    $0x79,%eax
   0x0000000000401023 <+204>:	cmpl   $0x305,0x8(%rsp)
   0x000000000040102b <+212>:	je     0x401094 <phase_3+317>
   0x000000000040102d <+214>:	callq  0x4015ef <explode_bomb>
   0x0000000000401032 <+219>:	mov    $0x79,%eax
   0x0000000000401037 <+224>:	jmp    0x401094 <phase_3+317>
   0x0000000000401039 <+226>:	mov    $0x6b,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040103e <+231>:	cmpl   $0x12f,0x8(%rsp)
   0x0000000000401046 <+239>:	je     0x401094 <phase_3+317>
   0x0000000000401048 <+241>:	callq  0x4015ef <explode_bomb>
   0x000000000040104d <+246>:	mov    $0x6b,%eax
   0x0000000000401052 <+251>:	jmp    0x401094 <phase_3+317>
   0x0000000000401054 <+253>:	mov    $0x6b,%eax
   0x0000000000401059 <+258>:	cmpl   $0x387,0x8(%rsp)
   0x0000000000401061 <+266>:	je     0x401094 <phase_3+317>
   0x0000000000401063 <+268>:	callq  0x4015ef <explode_bomb>
   0x0000000000401068 <+273>:	mov    $0x6b,%eax
   0x000000000040106d <+278>:	jmp    0x401094 <phase_3+317>
   0x000000000040106f <+280>:	mov    $0x75,%eax
=> 0x0000000000401074 <+285>:	cmpl   $0x2e4,0x8(%rsp)
   0x000000000040107c <+293>:	je     0x401094 <phase_3+317>
   0x000000000040107e <+295>:	callq  0x4015ef <explode_bomb>
   0x0000000000401083 <+300>:	mov    $0x75,%eax
   0x0000000000401088 <+305>:	jmp    0x401094 <phase_3+317>
   0x000000000040108a <+307>:	callq  0x4015ef <explode_bomb>
   0x000000000040108f <+312>:	mov    $0x76,%eax
   0x0000000000401094 <+317>:	cmp    0x7(%rsp),%al
   0x0000000000401098 <+321>:	je     0x40109f <phase_3+328>
   0x000000000040109a <+323>:	callq  0x4015ef <explode_bomb>
   0x000000000040109f <+328>:	add    $0x18,%rsp
   0x00000000004010a3 <+332>:	retq
End of assembler dump.
(gdb) p $0x2e4
$36 = void
(gdb) p 0x2e4
$37 = 740
(gdb) ni
0x000000000040107c in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f57 <+0>:	sub    $0x18,%rsp
   0x0000000000400f5b <+4>:	lea    0x8(%rsp),%r8
   0x0000000000400f60 <+9>:	lea    0x7(%rsp),%rcx
   0x0000000000400f65 <+14>:	lea    0xc(%rsp),%rdx
   0x0000000000400f6a <+19>:	mov    $0x40257e,%esi
   0x0000000000400f6f <+24>:	mov    $0x0,%eax
   0x0000000000400f74 <+29>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x0000000000400f79 <+34>:	cmp    $0x2,%eax
   0x0000000000400f7c <+37>:	jg     0x400f83 <phase_3+44>
   0x0000000000400f7e <+39>:	callq  0x4015ef <explode_bomb>
   0x0000000000400f83 <+44>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f88 <+49>:	ja     0x40108a <phase_3+307>
   0x0000000000400f8e <+55>:	mov    0xc(%rsp),%eax
   0x0000000000400f92 <+59>:	jmpq   *0x4025a0(,%rax,8)
   0x0000000000400f99 <+66>:	mov    $0x6d,%eax
   0x0000000000400f9e <+71>:	cmpl   $0x81,0x8(%rsp)
   0x0000000000400fa6 <+79>:	je     0x401094 <phase_3+317>
   0x0000000000400fac <+85>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fb1 <+90>:	mov    $0x6d,%eax
   0x0000000000400fb6 <+95>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fbb <+100>:	mov    $0x78,%eax
   0x0000000000400fc0 <+105>:	cmpl   $0x146,0x8(%rsp)
   0x0000000000400fc8 <+113>:	je     0x401094 <phase_3+317>
   0x0000000000400fce <+119>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fd3 <+124>:	mov    $0x78,%eax
   0x0000000000400fd8 <+129>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fdd <+134>:	mov    $0x77,%eax
   0x0000000000400fe2 <+139>:	cmpl   $0x15f,0x8(%rsp)
   0x0000000000400fea <+147>:	je     0x401094 <phase_3+317>
   0x0000000000400ff0 <+153>:	callq  0x4015ef <explode_bomb>
   0x0000000000400ff5 <+158>:	mov    $0x77,%eax
   0x0000000000400ffa <+163>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fff <+168>:	mov    $0x78,%eax
   0x0000000000401004 <+173>:	cmpl   $0xd2,0x8(%rsp)
   0x000000000040100c <+181>:	je     0x401094 <phase_3+317>
   0x0000000000401012 <+187>:	callq  0x4015ef <explode_bomb>
   0x0000000000401017 <+192>:	mov    $0x78,%eax
   0x000000000040101c <+197>:	jmp    0x401094 <phase_3+317>
   0x000000000040101e <+199>:	mov    $0x79,%eax
   0x0000000000401023 <+204>:	cmpl   $0x305,0x8(%rsp)
   0x000000000040102b <+212>:	je     0x401094 <phase_3+317>
   0x000000000040102d <+214>:	callq  0x4015ef <explode_bomb>
   0x0000000000401032 <+219>:	mov    $0x79,%eax
   0x0000000000401037 <+224>:	jmp    0x401094 <phase_3+317>
   0x0000000000401039 <+226>:	mov    $0x6b,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040103e <+231>:	cmpl   $0x12f,0x8(%rsp)
   0x0000000000401046 <+239>:	je     0x401094 <phase_3+317>
   0x0000000000401048 <+241>:	callq  0x4015ef <explode_bomb>
   0x000000000040104d <+246>:	mov    $0x6b,%eax
   0x0000000000401052 <+251>:	jmp    0x401094 <phase_3+317>
   0x0000000000401054 <+253>:	mov    $0x6b,%eax
   0x0000000000401059 <+258>:	cmpl   $0x387,0x8(%rsp)
   0x0000000000401061 <+266>:	je     0x401094 <phase_3+317>
   0x0000000000401063 <+268>:	callq  0x4015ef <explode_bomb>
   0x0000000000401068 <+273>:	mov    $0x6b,%eax
   0x000000000040106d <+278>:	jmp    0x401094 <phase_3+317>
   0x000000000040106f <+280>:	mov    $0x75,%eax
   0x0000000000401074 <+285>:	cmpl   $0x2e4,0x8(%rsp)
=> 0x000000000040107c <+293>:	je     0x401094 <phase_3+317>
   0x000000000040107e <+295>:	callq  0x4015ef <explode_bomb>
   0x0000000000401083 <+300>:	mov    $0x75,%eax
   0x0000000000401088 <+305>:	jmp    0x401094 <phase_3+317>
   0x000000000040108a <+307>:	callq  0x4015ef <explode_bomb>
   0x000000000040108f <+312>:	mov    $0x76,%eax
   0x0000000000401094 <+317>:	cmp    0x7(%rsp),%al
   0x0000000000401098 <+321>:	je     0x40109f <phase_3+328>
   0x000000000040109a <+323>:	callq  0x4015ef <explode_bomb>
   0x000000000040109f <+328>:	add    $0x18,%rsp
   0x00000000004010a3 <+332>:	retq
End of assembler dump.
(gdb) ni
0x000000000040107e in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f57 <+0>:	sub    $0x18,%rsp
   0x0000000000400f5b <+4>:	lea    0x8(%rsp),%r8
   0x0000000000400f60 <+9>:	lea    0x7(%rsp),%rcx
   0x0000000000400f65 <+14>:	lea    0xc(%rsp),%rdx
   0x0000000000400f6a <+19>:	mov    $0x40257e,%esi
   0x0000000000400f6f <+24>:	mov    $0x0,%eax
   0x0000000000400f74 <+29>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x0000000000400f79 <+34>:	cmp    $0x2,%eax
   0x0000000000400f7c <+37>:	jg     0x400f83 <phase_3+44>
   0x0000000000400f7e <+39>:	callq  0x4015ef <explode_bomb>
   0x0000000000400f83 <+44>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f88 <+49>:	ja     0x40108a <phase_3+307>
   0x0000000000400f8e <+55>:	mov    0xc(%rsp),%eax
   0x0000000000400f92 <+59>:	jmpq   *0x4025a0(,%rax,8)
   0x0000000000400f99 <+66>:	mov    $0x6d,%eax
   0x0000000000400f9e <+71>:	cmpl   $0x81,0x8(%rsp)
   0x0000000000400fa6 <+79>:	je     0x401094 <phase_3+317>
   0x0000000000400fac <+85>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fb1 <+90>:	mov    $0x6d,%eax
   0x0000000000400fb6 <+95>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fbb <+100>:	mov    $0x78,%eax
   0x0000000000400fc0 <+105>:	cmpl   $0x146,0x8(%rsp)
   0x0000000000400fc8 <+113>:	je     0x401094 <phase_3+317>
   0x0000000000400fce <+119>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fd3 <+124>:	mov    $0x78,%eax
   0x0000000000400fd8 <+129>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fdd <+134>:	mov    $0x77,%eax
   0x0000000000400fe2 <+139>:	cmpl   $0x15f,0x8(%rsp)
   0x0000000000400fea <+147>:	je     0x401094 <phase_3+317>
   0x0000000000400ff0 <+153>:	callq  0x4015ef <explode_bomb>
   0x0000000000400ff5 <+158>:	mov    $0x77,%eax
   0x0000000000400ffa <+163>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fff <+168>:	mov    $0x78,%eax
   0x0000000000401004 <+173>:	cmpl   $0xd2,0x8(%rsp)
   0x000000000040100c <+181>:	je     0x401094 <phase_3+317>
   0x0000000000401012 <+187>:	callq  0x4015ef <explode_bomb>
   0x0000000000401017 <+192>:	mov    $0x78,%eax
   0x000000000040101c <+197>:	jmp    0x401094 <phase_3+317>
   0x000000000040101e <+199>:	mov    $0x79,%eax
   0x0000000000401023 <+204>:	cmpl   $0x305,0x8(%rsp)
   0x000000000040102b <+212>:	je     0x401094 <phase_3+317>
   0x000000000040102d <+214>:	callq  0x4015ef <explode_bomb>
   0x0000000000401032 <+219>:	mov    $0x79,%eax
   0x0000000000401037 <+224>:	jmp    0x401094 <phase_3+317>
   0x0000000000401039 <+226>:	mov    $0x6b,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040103e <+231>:	cmpl   $0x12f,0x8(%rsp)
   0x0000000000401046 <+239>:	je     0x401094 <phase_3+317>
   0x0000000000401048 <+241>:	callq  0x4015ef <explode_bomb>
   0x000000000040104d <+246>:	mov    $0x6b,%eax
   0x0000000000401052 <+251>:	jmp    0x401094 <phase_3+317>
   0x0000000000401054 <+253>:	mov    $0x6b,%eax
   0x0000000000401059 <+258>:	cmpl   $0x387,0x8(%rsp)
   0x0000000000401061 <+266>:	je     0x401094 <phase_3+317>
   0x0000000000401063 <+268>:	callq  0x4015ef <explode_bomb>
   0x0000000000401068 <+273>:	mov    $0x6b,%eax
   0x000000000040106d <+278>:	jmp    0x401094 <phase_3+317>
   0x000000000040106f <+280>:	mov    $0x75,%eax
   0x0000000000401074 <+285>:	cmpl   $0x2e4,0x8(%rsp)
   0x000000000040107c <+293>:	je     0x401094 <phase_3+317>
=> 0x000000000040107e <+295>:	callq  0x4015ef <explode_bomb>
   0x0000000000401083 <+300>:	mov    $0x75,%eax
   0x0000000000401088 <+305>:	jmp    0x401094 <phase_3+317>
   0x000000000040108a <+307>:	callq  0x4015ef <explode_bomb>
   0x000000000040108f <+312>:	mov    $0x76,%eax
   0x0000000000401094 <+317>:	cmp    0x7(%rsp),%al
   0x0000000000401098 <+321>:	je     0x40109f <phase_3+328>
   0x000000000040109a <+323>:	callq  0x4015ef <explode_bomb>
   0x000000000040109f <+328>:	add    $0x18,%rsp
   0x00000000004010a3 <+332>:	retq
End of assembler dump.
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
7 i 740

Breakpoint 2, 0x0000000000400f57 in phase_3 ()
(gdb) b *0x040107c
Breakpoint 10 at 0x40107c
(gdb) c
Continuing.

Breakpoint 7, 0x0000000000400f7c in phase_3 ()
(gdb) c
Continuing.

Breakpoint 9, 0x0000000000400f92 in phase_3 ()
(gdb) c
Continuing.

Breakpoint 10, 0x000000000040107c in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f57 <+0>:	sub    $0x18,%rsp
   0x0000000000400f5b <+4>:	lea    0x8(%rsp),%r8
   0x0000000000400f60 <+9>:	lea    0x7(%rsp),%rcx
   0x0000000000400f65 <+14>:	lea    0xc(%rsp),%rdx
   0x0000000000400f6a <+19>:	mov    $0x40257e,%esi
   0x0000000000400f6f <+24>:	mov    $0x0,%eax
   0x0000000000400f74 <+29>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x0000000000400f79 <+34>:	cmp    $0x2,%eax
   0x0000000000400f7c <+37>:	jg     0x400f83 <phase_3+44>
   0x0000000000400f7e <+39>:	callq  0x4015ef <explode_bomb>
   0x0000000000400f83 <+44>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f88 <+49>:	ja     0x40108a <phase_3+307>
   0x0000000000400f8e <+55>:	mov    0xc(%rsp),%eax
   0x0000000000400f92 <+59>:	jmpq   *0x4025a0(,%rax,8)
   0x0000000000400f99 <+66>:	mov    $0x6d,%eax
   0x0000000000400f9e <+71>:	cmpl   $0x81,0x8(%rsp)
   0x0000000000400fa6 <+79>:	je     0x401094 <phase_3+317>
   0x0000000000400fac <+85>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fb1 <+90>:	mov    $0x6d,%eax
   0x0000000000400fb6 <+95>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fbb <+100>:	mov    $0x78,%eax
   0x0000000000400fc0 <+105>:	cmpl   $0x146,0x8(%rsp)
   0x0000000000400fc8 <+113>:	je     0x401094 <phase_3+317>
   0x0000000000400fce <+119>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fd3 <+124>:	mov    $0x78,%eax
   0x0000000000400fd8 <+129>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fdd <+134>:	mov    $0x77,%eax
   0x0000000000400fe2 <+139>:	cmpl   $0x15f,0x8(%rsp)
   0x0000000000400fea <+147>:	je     0x401094 <phase_3+317>
   0x0000000000400ff0 <+153>:	callq  0x4015ef <explode_bomb>
   0x0000000000400ff5 <+158>:	mov    $0x77,%eax
   0x0000000000400ffa <+163>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fff <+168>:	mov    $0x78,%eax
   0x0000000000401004 <+173>:	cmpl   $0xd2,0x8(%rsp)
   0x000000000040100c <+181>:	je     0x401094 <phase_3+317>
   0x0000000000401012 <+187>:	callq  0x4015ef <explode_bomb>
   0x0000000000401017 <+192>:	mov    $0x78,%eax
   0x000000000040101c <+197>:	jmp    0x401094 <phase_3+317>
   0x000000000040101e <+199>:	mov    $0x79,%eax
   0x0000000000401023 <+204>:	cmpl   $0x305,0x8(%rsp)
   0x000000000040102b <+212>:	je     0x401094 <phase_3+317>
   0x000000000040102d <+214>:	callq  0x4015ef <explode_bomb>
   0x0000000000401032 <+219>:	mov    $0x79,%eax
   0x0000000000401037 <+224>:	jmp    0x401094 <phase_3+317>
   0x0000000000401039 <+226>:	mov    $0x6b,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040103e <+231>:	cmpl   $0x12f,0x8(%rsp)
   0x0000000000401046 <+239>:	je     0x401094 <phase_3+317>
   0x0000000000401048 <+241>:	callq  0x4015ef <explode_bomb>
   0x000000000040104d <+246>:	mov    $0x6b,%eax
   0x0000000000401052 <+251>:	jmp    0x401094 <phase_3+317>
   0x0000000000401054 <+253>:	mov    $0x6b,%eax
   0x0000000000401059 <+258>:	cmpl   $0x387,0x8(%rsp)
   0x0000000000401061 <+266>:	je     0x401094 <phase_3+317>
   0x0000000000401063 <+268>:	callq  0x4015ef <explode_bomb>
   0x0000000000401068 <+273>:	mov    $0x6b,%eax
   0x000000000040106d <+278>:	jmp    0x401094 <phase_3+317>
   0x000000000040106f <+280>:	mov    $0x75,%eax
   0x0000000000401074 <+285>:	cmpl   $0x2e4,0x8(%rsp)
=> 0x000000000040107c <+293>:	je     0x401094 <phase_3+317>
   0x000000000040107e <+295>:	callq  0x4015ef <explode_bomb>
   0x0000000000401083 <+300>:	mov    $0x75,%eax
   0x0000000000401088 <+305>:	jmp    0x401094 <phase_3+317>
   0x000000000040108a <+307>:	callq  0x4015ef <explode_bomb>
   0x000000000040108f <+312>:	mov    $0x76,%eax
   0x0000000000401094 <+317>:	cmp    0x7(%rsp),%al
   0x0000000000401098 <+321>:	je     0x40109f <phase_3+328>
   0x000000000040109a <+323>:	callq  0x4015ef <explode_bomb>
   0x000000000040109f <+328>:	add    $0x18,%rsp
   0x00000000004010a3 <+332>:	retq
End of assembler dump.
(gdb) ni
0x0000000000401094 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f57 <+0>:	sub    $0x18,%rsp
   0x0000000000400f5b <+4>:	lea    0x8(%rsp),%r8
   0x0000000000400f60 <+9>:	lea    0x7(%rsp),%rcx
   0x0000000000400f65 <+14>:	lea    0xc(%rsp),%rdx
   0x0000000000400f6a <+19>:	mov    $0x40257e,%esi
   0x0000000000400f6f <+24>:	mov    $0x0,%eax
   0x0000000000400f74 <+29>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x0000000000400f79 <+34>:	cmp    $0x2,%eax
   0x0000000000400f7c <+37>:	jg     0x400f83 <phase_3+44>
   0x0000000000400f7e <+39>:	callq  0x4015ef <explode_bomb>
   0x0000000000400f83 <+44>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f88 <+49>:	ja     0x40108a <phase_3+307>
   0x0000000000400f8e <+55>:	mov    0xc(%rsp),%eax
   0x0000000000400f92 <+59>:	jmpq   *0x4025a0(,%rax,8)
   0x0000000000400f99 <+66>:	mov    $0x6d,%eax
   0x0000000000400f9e <+71>:	cmpl   $0x81,0x8(%rsp)
   0x0000000000400fa6 <+79>:	je     0x401094 <phase_3+317>
   0x0000000000400fac <+85>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fb1 <+90>:	mov    $0x6d,%eax
   0x0000000000400fb6 <+95>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fbb <+100>:	mov    $0x78,%eax
   0x0000000000400fc0 <+105>:	cmpl   $0x146,0x8(%rsp)
   0x0000000000400fc8 <+113>:	je     0x401094 <phase_3+317>
   0x0000000000400fce <+119>:	callq  0x4015ef <explode_bomb>
   0x0000000000400fd3 <+124>:	mov    $0x78,%eax
   0x0000000000400fd8 <+129>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fdd <+134>:	mov    $0x77,%eax
   0x0000000000400fe2 <+139>:	cmpl   $0x15f,0x8(%rsp)
   0x0000000000400fea <+147>:	je     0x401094 <phase_3+317>
   0x0000000000400ff0 <+153>:	callq  0x4015ef <explode_bomb>
   0x0000000000400ff5 <+158>:	mov    $0x77,%eax
   0x0000000000400ffa <+163>:	jmpq   0x401094 <phase_3+317>
   0x0000000000400fff <+168>:	mov    $0x78,%eax
   0x0000000000401004 <+173>:	cmpl   $0xd2,0x8(%rsp)
   0x000000000040100c <+181>:	je     0x401094 <phase_3+317>
   0x0000000000401012 <+187>:	callq  0x4015ef <explode_bomb>
   0x0000000000401017 <+192>:	mov    $0x78,%eax
   0x000000000040101c <+197>:	jmp    0x401094 <phase_3+317>
   0x000000000040101e <+199>:	mov    $0x79,%eax
   0x0000000000401023 <+204>:	cmpl   $0x305,0x8(%rsp)
   0x000000000040102b <+212>:	je     0x401094 <phase_3+317>
   0x000000000040102d <+214>:	callq  0x4015ef <explode_bomb>
   0x0000000000401032 <+219>:	mov    $0x79,%eax
   0x0000000000401037 <+224>:	jmp    0x401094 <phase_3+317>
   0x0000000000401039 <+226>:	mov    $0x6b,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040103e <+231>:	cmpl   $0x12f,0x8(%rsp)
   0x0000000000401046 <+239>:	je     0x401094 <phase_3+317>
   0x0000000000401048 <+241>:	callq  0x4015ef <explode_bomb>
   0x000000000040104d <+246>:	mov    $0x6b,%eax
   0x0000000000401052 <+251>:	jmp    0x401094 <phase_3+317>
   0x0000000000401054 <+253>:	mov    $0x6b,%eax
   0x0000000000401059 <+258>:	cmpl   $0x387,0x8(%rsp)
   0x0000000000401061 <+266>:	je     0x401094 <phase_3+317>
   0x0000000000401063 <+268>:	callq  0x4015ef <explode_bomb>
   0x0000000000401068 <+273>:	mov    $0x6b,%eax
   0x000000000040106d <+278>:	jmp    0x401094 <phase_3+317>
   0x000000000040106f <+280>:	mov    $0x75,%eax
   0x0000000000401074 <+285>:	cmpl   $0x2e4,0x8(%rsp)
   0x000000000040107c <+293>:	je     0x401094 <phase_3+317>
   0x000000000040107e <+295>:	callq  0x4015ef <explode_bomb>
   0x0000000000401083 <+300>:	mov    $0x75,%eax
   0x0000000000401088 <+305>:	jmp    0x401094 <phase_3+317>
   0x000000000040108a <+307>:	callq  0x4015ef <explode_bomb>
   0x000000000040108f <+312>:	mov    $0x76,%eax
=> 0x0000000000401094 <+317>:	cmp    0x7(%rsp),%al
   0x0000000000401098 <+321>:	je     0x40109f <phase_3+328>
   0x000000000040109a <+323>:	callq  0x4015ef <explode_bomb>
   0x000000000040109f <+328>:	add    $0x18,%rsp
   0x00000000004010a3 <+332>:	retq
End of assembler dump.
(gdb) i r
rax            0x75	117
rbx            0x7fffffffdef8	140737488346872
rcx            0x28	40
rdx            0x7fffffffddf8	140737488346616
rsi            0x7fffffffd7f0	140737488345072
rdi            0x1999999999999999	1844674407370955161
rbp            0x0	0x0
rsp            0x7fffffffddf0	0x7fffffffddf0
r8             0x2aaaab08a060	46912502276192
r9             0x0	0
r10            0x2e4	740
r11            0x0	0
r12            0x400cd0	4197584
r13            0x7fffffffdef0	140737488346864
r14            0x0	0
r15            0x0	0
rip            0x401094	0x401094 <phase_3+317>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) x/c $al
0x75:	Cannot access memory at address 0x75
(gdb) p/x $al
$38 = 0x75
(gdb) p 0x75
$39 = 117
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
7 u 740

Breakpoint 2, 0x0000000000400f57 in phase_3 ()
(gdb) finish
Run till exit from #0  0x0000000000400f57 in phase_3 ()

Breakpoint 7, 0x0000000000400f7c in phase_3 ()
(gdb) c
Continuing.

Breakpoint 9, 0x0000000000400f92 in phase_3 ()
(gdb) c
Continuing.

Breakpoint 10, 0x000000000040107c in phase_3 ()
(gdb) c
Continuing.
Halfway there!
Write failed: Broken pipe
tonys-mbp:~ Tony$ ssh tony.bumatay@shell.cec.wustl.edu
tony.bumatay@shell.cec.wustl.edu's password:
Last login: Tue Feb 23 02:39:16 2016 from tonys-mbp.dhcp.wustl.edu
##### ATTENTION #####

shell.cec is no longer suited for
computationally-heavy tasks.

Please use 'qlogin' to obtain a
terminal on one of the LinuxLab
hosts.

Thank you!

EIT

#####
[tony.bumatay@shell ~]$ qlogin
Your job 38385 ("QLOGIN") has been submitted
waiting for interactive job to be scheduled ...
Your interactive job 38385 has been successfully scheduled.
Establishing /project/linuxlab/sge/qlogin_ssh.sh session to host linuxlab007.seas.wustl.edu ...
ssh 54881 linuxlab007.seas.wustl.edu
Warning: Permanently added '[linuxlab007.seas.wustl.edu]:54881,[172.16.3.107]:54881' (ECDSA) to the list of known hosts.
tony.bumatay@linuxlab007.seas.wustl.edu's password:


Permission denied, please try again.
tony.bumatay@linuxlab007.seas.wustl.edu's password:
Last failed login: Tue Feb 23 18:22:21 CST 2016 from shell.cec.wustl.edu on ssh:notty
There was 1 failed login attempt since the last successful login.
[tony.bumatay@linuxlab007 ~]$ ls
artifacts.xml        Desktop    Downloads              Music         perl5     Templates  winprofile
CSE132-tony.bumatay  documents  eclipse.configuration  My Documents  Pictures  Users
cse361               Documents  equeue                 p2            Public    Videos
[tony.bumatay@linuxlab007 ~]$ cd cse361/
[tony.bumatay@linuxlab007 cse361]$ ls
tony.bumatay
[tony.bumatay@linuxlab007 cse361]$ cd tony.bumatay/
[tony.bumatay@linuxlab007 tony.bumatay]$ ls
lab0  lab1  lab2
[tony.bumatay@linuxlab007 tony.bumatay]$ cd lab2
[tony.bumatay@linuxlab007 lab2]$ ls
bomb33  bomb33.tar
[tony.bumatay@linuxlab007 lab2]$ cd bomb
-bash: cd: bomb: No such file or directory
[tony.bumatay@linuxlab007 lab2]$ cd bomb33/
[tony.bumatay@linuxlab007 bomb33]$ ls
bomb  bomb.c  breakpoints.txt  output.txt  README  solutions.txt  symtable.txt
[tony.bumatay@linuxlab007 bomb33]$ gdb bomb
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-80.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb...done.
(gdb) q
[tony.bumatay@linuxlab007 bomb33]$ ls
bomb  bomb.c  breakpoints.txt  output.txt  README  solutions.txt  symtable.txt
[tony.bumatay@linuxlab007 bomb33]$ vim solutions.txt
[tony.bumatay@linuxlab007 bomb33]$ gdb bomb
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-80.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb...done.
(gdb) source breakpoints.txt
Breakpoint 1 at 0x4015ef
Breakpoint 2 at 0x400f57
Breakpoint 3 at 0x4010e2
Breakpoint 4 at 0x401139
Breakpoint 5 at 0x40117a
Breakpoint 6 at 0x4012a9
(gdb) r solutions.txt
Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!

Breakpoint 2, 0x0000000000400f57 in phase_3 ()
Missing separate debuginfos, use: debuginfo-install nss-mdns-0.10-12.el7.x86_64
(gdb) finish
Run till exit from #0  0x0000000000400f57 in phase_3 ()
main (argc=<optimized out>, argv=<optimized out>) at bomb.c:90
90	    phase_defused();
(gdb) s
91	    printf("Halfway there!\n");
(gdb) s
_IO_puts (str=str@entry=0x402427 "Halfway there!") at ioputs.c:34
34	{
(gdb) s
36	  _IO_size_t len = strlen (str);
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!

Breakpoint 2, 0x0000000000400f57 in phase_3 ()
(gdb) q
A debugging session is active.

	Inferior 1 [process 9636] will be killed.

Quit anyway? (y or n) y
[tony.bumatay@linuxlab007 bomb33]$ vim breakpoints.txt
[tony.bumatay@linuxlab007 bomb33]$ gdb bomb
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-80.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb...done.
(gdb) source breakpoints.txt
Breakpoint 1 at 0x4015ef
Breakpoint 2 at 0x4010e2
Breakpoint 3 at 0x401139
Breakpoint 4 at 0x40117a
Breakpoint 5 at 0x4012a9
(gdb) r solutions.txt
Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
not sure what

Breakpoint 2, 0x00000000004010e2 in phase_4 ()
Missing separate debuginfos, use: debuginfo-install nss-mdns-0.10-12.el7.x86_64
(gdb) until *0x04010f0
0x00000000004010f0 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
=> 0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) x/s $rsp
0x7fffffffddf0:	"\370\336\377\377\377\177"
(gdb) ni
0x00000000004010f5 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
=> 0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) p $0x40286d
$1 = void
(gdb) x/s $0x40286d
Value can't be converted to integer.
(gdb) x/s 0x40286d
0x40286d:	"%d %d"
(gdb) p *(int*)$rsp
$2 = -8456
(gdb) p *(int*)($rsp+4)
$3 = 32767
(gdb) p *(int*)($rsp+8)
$4 = 4200143
(gdb) p *(int*)($rsp+12)
$5 = 0
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
6 7

Breakpoint 2, 0x00000000004010e2 in phase_4 ()
(gdb) until *0x04010f0
0x00000000004010f0 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
=> 0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) ni
0x00000000004010f5 in phase_4 ()
(gdb) p *(int*)($rsp+8)
$6 = 4200143
(gdb) p *(int*)($rsp+12)
$7 = 0
(gdb) p *(dec*)($rsp+8)
No symbol "dec" in current context.
(gdb) Write failed: Broken pipe
tonys-mbp:~ Tony$ ssh tony.bumatay@shell.cec.wustl.edu
tony.bumatay@shell.cec.wustl.edu's password:
Last login: Tue Feb 23 18:20:30 2016 from tonys-mbp.dhcp.wustl.edu
##### ATTENTION #####

shell.cec is no longer suited for
computationally-heavy tasks.

Please use 'qlogin' to obtain a
terminal on one of the LinuxLab
hosts.

Thank you!

EIT

#####
[tony.bumatay@shell ~]$ qlogin
Your job 38511 ("QLOGIN") has been submitted
waiting for interactive job to be scheduled ...
Your interactive job 38511 has been successfully scheduled.
Establishing /project/linuxlab/sge/qlogin_ssh.sh session to host linuxlab001.seas.wustl.edu ...
ssh 34752 linuxlab001.seas.wustl.edu
Warning: Permanently added '[linuxlab001.seas.wustl.edu]:34752,[172.16.3.101]:34752' (ECDSA) to the list of known hosts.
tony.bumatay@linuxlab001.seas.wustl.edu's password:
[tony.bumatay@linuxlab001 ~]$ ls
cartifacts.xml        Desktop    Downloads              Music         perl5     Templates  winprofile
CSE132-tony.bumatay  documents  eclipse.configuration  My Documents  Pictures  Users
cse361               Documents  equeue                 p2            Public    Videos
[tony.bumatay@linuxlab001 ~]$ cd cse361/tony.bumatay/lab2/
[tony.bumatay@linuxlab001 lab2]$ ls
bomb33  bomb33.tar
[tony.bumatay@linuxlab001 lab2]$ cd bomb33/
[tony.bumatay@linuxlab001 bomb33]$ gdb bomb
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-80.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb...done.
(gdb) source breakpoints.txt
Breakpoint 1 at 0x4015ef
Breakpoint 2 at 0x4010e2
Breakpoint 3 at 0x401139
Breakpoint 4 at 0x40117a
Breakpoint 5 at 0x4012a9
(gdb) r solutions.txt
Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
8 10

Breakpoint 2, 0x00000000004010e2 in phase_4 ()
Missing separate debuginfos, use: debuginfo-install nss-mdns-0.10-12.el7.x86_64
(gdb) disas
Dump of assembler code for function phase_4:
=> 0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) b *0x04010f5
Breakpoint 6 at 0x4010f5
(gdb) c
Continuing.

Breakpoint 6, 0x00000000004010f5 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
=> 0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) i r
rax            0x604cb0	6311088
rbx            0x7fffffffde88	140737488346760
rcx            0x7fffffffdd88	140737488346504
rdx            0x7fffffffdd8c	140737488346508
rsi            0x40286d	4204653
rdi            0x604cb0	6311088
rbp            0x0	0x0
rsp            0x7fffffffdd80	0x7fffffffdd80
r8             0x2aaaaaae0005	46912496336901
r9             0x0	0
r10            0x4	4
r11            0x246	582
r12            0x400cd0	4197584
r13            0x7fffffffde80	140737488346752
r14            0x0	0
r15            0x0	0
rip            0x4010f5	0x4010f5 <phase_4+19>
eflags         0x202	[ IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) p *(int*)($rsp+8)
$1 = 4200143
(gdb) p *(int*)($rsp+12)
$2 = 0
(gdb) ni
0x00000000004010fa in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
=> 0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) i r
rax            0x0	0
rbx            0x7fffffffde88	140737488346760
rcx            0x7fffffffdd88	140737488346504
rdx            0x7fffffffdd8c	140737488346508
rsi            0x40286d	4204653
rdi            0x604cb0	6311088
rbp            0x0	0x0
rsp            0x7fffffffdd80	0x7fffffffdd80
r8             0x2aaaaaae0005	46912496336901
r9             0x0	0
r10            0x4	4
r11            0x246	582
r12            0x400cd0	4197584
r13            0x7fffffffde80	140737488346752
r14            0x0	0
r15            0x0	0
rip            0x4010fa	0x4010fa <phase_4+24>
eflags         0x202	[ IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) ni
0x00000000004010ff in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
=> 0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) ni
0x0000000000401102 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
=> 0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) ni
0x0000000000401104 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
=> 0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) p *(int*)($rsp+12)
$3 = 8
(gdb) ni
0x0000000000401109 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
=> 0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) ni
0x0000000000401110 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
=> 0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) ni
0x0000000000401115 in phase_4 ()
(gdb) ni
0x000000000040111a in phase_4 ()
(gdb) ni
0x000000000040111e in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
=> 0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) i r
rax            0x2	2
rbx            0x7fffffffde88	140737488346760
rcx            0x20	32
rdx            0xe	14
rsi            0x0	0
rdi            0x8	8
rbp            0x0	0x0
rsp            0x7fffffffdd80	0x7fffffffdd80
r8             0x2aaaab08a060	46912502276192
r9             0x0	0
r10            0xa	10
r11            0x0	0
r12            0x400cd0	4197584
r13            0x7fffffffde80	140737488346752
r14            0x0	0
r15            0x0	0
rip            0x40111e	0x40111e <phase_4+60>
eflags         0x297	[ CF PF AF SF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) p $eax
$4 = 2
(gdb) p $esi
$5 = 0
(gdb) p $edx
$6 = 14
(gdb) p $edi
$7 = 8
(gdb) b *0x040111e
Breakpoint 7 at 0x40111e
(gdb) si
0x00000000004010a4 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
=> 0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) ni
0x00000000004010a8 in func4 ()
(gdb) ni
0x00000000004010aa in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
=> 0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) i r
rax            0xe	14
rbx            0x7fffffffde88	140737488346760
rcx            0x20	32
rdx            0xe	14
rsi            0x0	0
rdi            0x8	8
rbp            0x0	0x0
rsp            0x7fffffffdd70	0x7fffffffdd70
r8             0x2aaaab08a060	46912502276192
r9             0x0	0
r10            0xa	10
r11            0x0	0
r12            0x400cd0	4197584
r13            0x7fffffffde80	140737488346752
r14            0x0	0
r15            0x0	0
rip            0x4010aa	0x4010aa <func4+6>
eflags         0x202	[ IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) p $eax
$8 = 14
(gdb) ni
0x00000000004010ac in func4 ()
(gdb) ni
0x00000000004010ae in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
=> 0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) p $ecx
$9 = 14
(gdb) ni
0x00000000004010b1 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
=> 0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) p $ecx
$10 = 0
(gdb) p $eax
$11 = 14
(gdb) ni
0x00000000004010b3 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
=> 0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) p $eax
$12 = 14
(gdb) p $ecx
$13 = 0
(gdb) ni
0x00000000004010b5 in func4 ()
(gdb) ni
0x00000000004010b8 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
=> 0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) p $edi
$14 = 8
(gdb) p $ecx
$15 = 7
(gdb) ni
0x00000000004010ba in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
=> 0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) ni
0x00000000004010c8 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
=> 0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) ni
0x00000000004010cd in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
=> 0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) p $edi
$16 = 8
(gdb) p $ecx
$17 = 7
(gdb) ni
0x00000000004010cf in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
=> 0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) ni
0x00000000004010d1 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
=> 0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) ni
0x00000000004010d4 in func4 ()
(gdb) ni
0x00000000004010d9 in func4 ()
(gdb) ni
0x00000000004010dd in func4 ()
(gdb) ni
0x00000000004010e1 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
=> 0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) p $rsp
$18 = (void *) 0x7fffffffdd78
(gdb) x/i $rsp
   0x7fffffffdd78:	and    (%rcx),%edx
(gdb) p 0x7fffffffdd78
$19 = 140737488346488
(gdb) p $0x7fffffffdd78
$20 = void
(gdb) ni
0x0000000000401123 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
=> 0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) p $eax
$21 = 1
(gdb) p *(int*)($rsp+8)
$22 = 10
(gdb) ni
0x0000000000401126 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
=> 0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) ni
0x000000000040112f in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
=> 0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
6 2

Breakpoint 2, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 6, 0x00000000004010f5 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 7, 0x000000000040111e in phase_4 ()
(gdb) c
Continuing.

Breakpoint 1, 0x00000000004015ef in explode_bomb ()
(gdb) disas
Dump of assembler code for function explode_bomb:
=> 0x00000000004015ef <+0>:	sub    $0x8,%rsp
   0x00000000004015f3 <+4>:	mov    $0x402841,%edi
   0x00000000004015f8 <+9>:	callq  0x400b40 <puts@plt>
   0x00000000004015fd <+14>:	mov    $0x40284a,%edi
   0x0000000000401602 <+19>:	callq  0x400b40 <puts@plt>
   0x0000000000401607 <+24>:	mov    $0x0,%edi
   0x000000000040160c <+29>:	callq  0x401530 <send_msg>
   0x0000000000401611 <+34>:	mov    $0x4026f0,%edi
   0x0000000000401616 <+39>:	callq  0x400b40 <puts@plt>
   0x000000000040161b <+44>:	mov    $0x8,%edi
   0x0000000000401620 <+49>:	callq  0x400c80 <exit@plt>
End of assembler dump.
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
13 2

Breakpoint 2, 0x00000000004010e2 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
=> 0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) b *0x0401109
Breakpoint 8 at 0x401109
(gdb) b *0x040111a
Breakpoint 9 at 0x40111a
(gdb) disas
Dump of assembler code for function phase_4:
=> 0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) c
Continuing.

Breakpoint 6, 0x00000000004010f5 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
=> 0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401109 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
=> 0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) ni
0x0000000000401110 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
=> 0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) c
Continuing.

Breakpoint 9, 0x000000000040111a in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
=> 0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) ni

Breakpoint 7, 0x000000000040111e in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
=> 0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) ni
0x0000000000401123 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
=> 0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) p $eax
$23 = 3
(gdb) disas func4
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
10 5

Breakpoint 2, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 6, 0x00000000004010f5 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
=> 0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401109 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
=> 0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) ni
0x0000000000401110 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
=> 0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) c
Continuing.

Breakpoint 9, 0x000000000040111a in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
=> 0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) ni

Breakpoint 7, 0x000000000040111e in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
=> 0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) si
0x00000000004010a4 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
=> 0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) b *0x04010b8
Breakpoint 10 at 0x4010b8
(gdb) b *0x04010bf
Breakpoint 11 at 0x4010bf
(gdb) c
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
=> 0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) ni
0x00000000004010ba in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
=> 0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) ni
0x00000000004010c8 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
=> 0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) ni
0x00000000004010cd in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
=> 0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) p $eax
$24 = 0
(gdb) p $edi
$25 = 10
(gdb) p $ecx
$26 = 7
(gdb) ni
0x00000000004010cf in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
=> 0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) ni
0x00000000004010d1 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
=> 0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) ni
0x00000000004010d4 in func4 ()
(gdb) ni

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
=> 0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) ni
0x00000000004010ba in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
=> 0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) ni
0x00000000004010bc in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
=> 0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) p $edi
$27 = 10
(gdb) p $ecx
$28 = 11
(gdb) ni

Breakpoint 11, 0x00000000004010bf in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
=> 0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) ni

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
=> 0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) p $edi
$29 = 10
(gdb) p $ecx
$30 = 9
(gdb) ni
0x00000000004010ba in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
=> 0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) ni
0x00000000004010c8 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
=> 0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) ni
0x00000000004010cd in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
=> 0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) p $edi
$31 = 10
(gdb) p $ecx
$32 = 9
(gdb) ni
0x00000000004010cf in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
=> 0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) ni
0x00000000004010d1 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
=> 0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) p $esi
$33 = 8
(gdb) ni
0x00000000004010d4 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
=> 0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) ni

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
=> 0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) ni
0x00000000004010ba in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
=> 0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) ni
0x00000000004010c8 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
=> 0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) p $edi
$34 = 10
(gdb) p $esi
$35 = 10
(gdb) ni
0x00000000004010cd in func4 ()
(gdb) ni
0x00000000004010cf in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
=> 0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) ni
0x00000000004010dd in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
=> 0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) c
Continuing.

Breakpoint 1, 0x00000000004015ef in explode_bomb ()
(gdb) disas
Dump of assembler code for function explode_bomb:
=> 0x00000000004015ef <+0>:	sub    $0x8,%rsp
   0x00000000004015f3 <+4>:	mov    $0x402841,%edi
   0x00000000004015f8 <+9>:	callq  0x400b40 <puts@plt>
   0x00000000004015fd <+14>:	mov    $0x40284a,%edi
   0x0000000000401602 <+19>:	callq  0x400b40 <puts@plt>
   0x0000000000401607 <+24>:	mov    $0x0,%edi
   0x000000000040160c <+29>:	callq  0x401530 <send_msg>
   0x0000000000401611 <+34>:	mov    $0x4026f0,%edi
   0x0000000000401616 <+39>:	callq  0x400b40 <puts@plt>
   0x000000000040161b <+44>:	mov    $0x8,%edi
   0x0000000000401620 <+49>:	callq  0x400c80 <exit@plt>
End of assembler dump.
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
10 5

Breakpoint 2, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 6, 0x00000000004010f5 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
=> 0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401109 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
=> 0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) ni
0x0000000000401110 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
=> 0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) b *0x0401123
Breakpoint 12 at 0x401123
(gdb) c
Continuing.

Breakpoint 9, 0x000000000040111a in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
=> 0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) c
Continuing.

Breakpoint 7, 0x000000000040111e in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
=> 0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) c
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
=> 0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) c
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
=> 0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) c
Continuing.

Breakpoint 11, 0x00000000004010bf in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
=> 0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) c
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
=> 0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) c
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
=> 0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) c
Continuing.

Breakpoint 12, 0x0000000000401123 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
=> 0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) c
Continuing.

Breakpoint 1, 0x00000000004015ef in explode_bomb ()
(gdb) disas
Dump of assembler code for function explode_bomb:
=> 0x00000000004015ef <+0>:	sub    $0x8,%rsp
   0x00000000004015f3 <+4>:	mov    $0x402841,%edi
   0x00000000004015f8 <+9>:	callq  0x400b40 <puts@plt>
   0x00000000004015fd <+14>:	mov    $0x40284a,%edi
   0x0000000000401602 <+19>:	callq  0x400b40 <puts@plt>
   0x0000000000401607 <+24>:	mov    $0x0,%edi
   0x000000000040160c <+29>:	callq  0x401530 <send_msg>
   0x0000000000401611 <+34>:	mov    $0x4026f0,%edi
   0x0000000000401616 <+39>:	callq  0x400b40 <puts@plt>
   0x000000000040161b <+44>:	mov    $0x8,%edi
   0x0000000000401620 <+49>:	callq  0x400c80 <exit@plt>
End of assembler dump.
(gdb) p $eax
$36 = 5
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
13 5

Breakpoint 2, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 6, 0x00000000004010f5 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401109 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 9, 0x000000000040111a in phase_4 ()
(gdb) c
Continuing.

Breakpoint 7, 0x000000000040111e in phase_4 ()
(gdb)
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 12, 0x0000000000401123 in phase_4 ()
(gdb)
Continuing.

Breakpoint 1, 0x00000000004015ef in explode_bomb ()
(gdb) p $eax
$37 = 3
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
14 5

Breakpoint 2, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 6, 0x00000000004010f5 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401109 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 9, 0x000000000040111a in phase_4 ()
(gdb) c
Continuing.

Breakpoint 7, 0x000000000040111e in phase_4 ()
(gdb) c
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb) c
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb) c
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb) c
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb) c
Continuing.

Breakpoint 12, 0x0000000000401123 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
=> 0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) ni
0x0000000000401126 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
=> 0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) ni
0x000000000040112f in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
=> 0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) p $eax
$38 = 7
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
12 5

Breakpoint 2, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 6, 0x00000000004010f5 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401109 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 9, 0x000000000040111a in phase_4 ()
(gdb) c
Continuing.

Breakpoint 7, 0x000000000040111e in phase_4 ()
(gdb) c
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb) c
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb) c
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb) c
Continuing.

Breakpoint 11, 0x00000000004010bf in func4 ()
(gdb) c
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 12, 0x0000000000401123 in phase_4 ()
(gdb)
Continuing.

Breakpoint 1, 0x00000000004015ef in explode_bomb ()
(gdb) p $eax
$39 = 3
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
11 5

Breakpoint 2, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 6, 0x00000000004010f5 in phase_4 ()
(gdb)
Continuing.

Breakpoint 8, 0x0000000000401109 in phase_4 ()
(gdb)
Continuing.

Breakpoint 9, 0x000000000040111a in phase_4 ()
(gdb)
Continuing.

Breakpoint 7, 0x000000000040111e in phase_4 ()
(gdb)
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 12, 0x0000000000401123 in phase_4 ()
(gdb)
Continuing.

Breakpoint 1, 0x00000000004015ef in explode_bomb ()
(gdb)
Continuing.

BOOM!!!
The bomb has blown up.
Your instructor has been notified.
[Inferior 1 (process 10128) exited with code 010]
(gdb) $eax
Undefined command: "$eax".  Try "help".
(gdb) p $eax
No registers.
(gdb) r
Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
11 5

Breakpoint 2, 0x00000000004010e2 in phase_4 ()
(gdb) disas explode_bomb
Dump of assembler code for function explode_bomb:
   0x00000000004015ef <+0>:	sub    $0x8,%rsp
   0x00000000004015f3 <+4>:	mov    $0x402841,%edi
   0x00000000004015f8 <+9>:	callq  0x400b40 <puts@plt>
   0x00000000004015fd <+14>:	mov    $0x40284a,%edi
   0x0000000000401602 <+19>:	callq  0x400b40 <puts@plt>
   0x0000000000401607 <+24>:	mov    $0x0,%edi
   0x000000000040160c <+29>:	callq  0x401530 <send_msg>
   0x0000000000401611 <+34>:	mov    $0x4026f0,%edi
   0x0000000000401616 <+39>:	callq  0x400b40 <puts@plt>
   0x000000000040161b <+44>:	mov    $0x8,%edi
   0x0000000000401620 <+49>:	callq  0x400c80 <exit@plt>
End of assembler dump.
(gdb) b *0x04015ef
Note: breakpoint 1 also set at pc 0x4015ef.
Breakpoint 13 at 0x4015ef
(gdb) b *0x04015f3
Breakpoint 14 at 0x4015f3
(gdb) ni
0x00000000004010e6 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
=> 0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) c
Continuing.

Breakpoint 6, 0x00000000004010f5 in phase_4 ()
(gdb)
Continuing.

Breakpoint 8, 0x0000000000401109 in phase_4 ()
(gdb)
Continuing.

Breakpoint 9, 0x000000000040111a in phase_4 ()
(gdb)
Continuing.

Breakpoint 7, 0x000000000040111e in phase_4 ()
(gdb)
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 12, 0x0000000000401123 in phase_4 ()
(gdb)
Continuing.

Breakpoint 1, 0x00000000004015ef in explode_bomb ()
(gdb) p $eax
$40 = 1
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
11 2

Breakpoint 2, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 6, 0x00000000004010f5 in phase_4 ()
(gdb)
Continuing.

Breakpoint 8, 0x0000000000401109 in phase_4 ()
(gdb)
Continuing.

Breakpoint 9, 0x000000000040111a in phase_4 ()
(gdb)
Continuing.

Breakpoint 7, 0x000000000040111e in phase_4 ()
(gdb)
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 12, 0x0000000000401123 in phase_4 ()
(gdb)
Continuing.

Breakpoint 1, 0x00000000004015ef in explode_bomb ()
(gdb) p $eax
$41 = 1
(gdb) 7 5
Undefined command: "7".  Try "help".
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
7 5

Breakpoint 2, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 6, 0x00000000004010f5 in phase_4 ()
(gdb)
Continuing.

Breakpoint 8, 0x0000000000401109 in phase_4 ()
(gdb)
Continuing.

Breakpoint 9, 0x000000000040111a in phase_4 ()
(gdb)
Continuing.

Breakpoint 7, 0x000000000040111e in phase_4 ()
(gdb)
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 12, 0x0000000000401123 in phase_4 ()
(gdb)
Continuing.

Breakpoint 1, 0x00000000004015ef in explode_bomb ()
(gdb) p $eax
$42 = 0
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
6 5

Breakpoint 2, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 6, 0x00000000004010f5 in phase_4 ()
(gdb)
Continuing.

Breakpoint 8, 0x0000000000401109 in phase_4 ()
(gdb)
Continuing.

Breakpoint 9, 0x000000000040111a in phase_4 ()
(gdb)
Continuing.

Breakpoint 7, 0x000000000040111e in phase_4 ()
(gdb)
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 11, 0x00000000004010bf in func4 ()
(gdb)
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 12, 0x0000000000401123 in phase_4 ()
(gdb)
Continuing.

Breakpoint 1, 0x00000000004015ef in explode_bomb ()
(gdb) p $eax
$43 = 6
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
0 2

Breakpoint 2, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 6, 0x00000000004010f5 in phase_4 ()
(gdb)
Continuing.

Breakpoint 8, 0x0000000000401109 in phase_4 ()
(gdb)
Continuing.

Breakpoint 9, 0x000000000040111a in phase_4 ()
(gdb)
Continuing.

Breakpoint 7, 0x000000000040111e in phase_4 ()
(gdb)
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 11, 0x00000000004010bf in func4 ()
(gdb)
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 11, 0x00000000004010bf in func4 ()
(gdb)
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 11, 0x00000000004010bf in func4 ()
(gdb)
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 12, 0x0000000000401123 in phase_4 ()
(gdb)
Continuing.

Breakpoint 1, 0x00000000004015ef in explode_bomb ()
(gdb) p $eax
$44 = 0
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
2 2

Breakpoint 2, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 6, 0x00000000004010f5 in phase_4 ()
(gdb)
Continuing.

Breakpoint 8, 0x0000000000401109 in phase_4 ()
(gdb)
Continuing.

Breakpoint 9, 0x000000000040111a in phase_4 ()
(gdb)
Continuing.

Breakpoint 7, 0x000000000040111e in phase_4 ()
(gdb)
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 11, 0x00000000004010bf in func4 ()
(gdb)
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 11, 0x00000000004010bf in func4 ()
(gdb)
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb)
Continuing.

Breakpoint 12, 0x0000000000401123 in phase_4 ()
(gdb)
Continuing.

Breakpoint 1, 0x00000000004015ef in explode_bomb ()
(gdb) p $eax
$45 = 4
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
10 5

Breakpoint 2, 0x00000000004010e2 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
=> 0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) disas func4
Dump of assembler code for function func4:
   0x00000000004010a4 <+0>:	sub    $0x8,%rsp
   0x00000000004010a8 <+4>:	mov    %edx,%eax
   0x00000000004010aa <+6>:	sub    %esi,%eax
   0x00000000004010ac <+8>:	mov    %eax,%ecx
   0x00000000004010ae <+10>:	shr    $0x1f,%ecx
   0x00000000004010b1 <+13>:	add    %ecx,%eax
   0x00000000004010b3 <+15>:	sar    %eax
   0x00000000004010b5 <+17>:	lea    (%rax,%rsi,1),%ecx
   0x00000000004010b8 <+20>:	cmp    %edi,%ecx
   0x00000000004010ba <+22>:	jle    0x4010c8 <func4+36>
   0x00000000004010bc <+24>:	lea    -0x1(%rcx),%edx
   0x00000000004010bf <+27>:	callq  0x4010a4 <func4>
   0x00000000004010c4 <+32>:	add    %eax,%eax
   0x00000000004010c6 <+34>:	jmp    0x4010dd <func4+57>
   0x00000000004010c8 <+36>:	mov    $0x0,%eax
   0x00000000004010cd <+41>:	cmp    %edi,%ecx
   0x00000000004010cf <+43>:	jge    0x4010dd <func4+57>
   0x00000000004010d1 <+45>:	lea    0x1(%rcx),%esi
   0x00000000004010d4 <+48>:	callq  0x4010a4 <func4>
   0x00000000004010d9 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004010dd <+57>:	add    $0x8,%rsp
   0x00000000004010e1 <+61>:	retq
End of assembler dump.
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
7 2

Breakpoint 2, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 6, 0x00000000004010f5 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401109 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 9, 0x000000000040111a in phase_4 ()
(gdb) c
Continuing.

Breakpoint 7, 0x000000000040111e in phase_4 ()
(gdb) c
Continuing.

Breakpoint 10, 0x00000000004010b8 in func4 ()
(gdb) c
Continuing.

Breakpoint 12, 0x0000000000401123 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 1, 0x00000000004015ef in explode_bomb ()
(gdb) p $eax
$46 = 0
(gdb) quit
A debugging session is active.

	Inferior 1 [process 19108] will be killed.

Quit anyway? (y or n) y
[tony.bumatay@linuxlab001 bomb33]$ gdb bomb
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-80.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb...done.
(gdb) source breakpoints.txt
Breakpoint 1 at 0x4015ef
Breakpoint 2 at 0x4015ef
Breakpoint 3 at 0x4015f3
Breakpoint 4 at 0x4010e2
Breakpoint 5 at 0x401139
Breakpoint 6 at 0x40117a
Breakpoint 7 at 0x4012a9
(gdb) r solutions.txt
Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
disas

Breakpoint 4, 0x00000000004010e2 in phase_4 ()
Missing separate debuginfos, use: debuginfo-install nss-mdns-0.10-12.el7.x86_64
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
7 2

Breakpoint 4, 0x00000000004010e2 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
=> 0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
   0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) b *0x040112f
Breakpoint 8 at 0x40112f
(gdb) c
Continuing.

Breakpoint 8, 0x000000000040112f in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
=> 0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) p $eax
$1 = 0
(gdb) p *(int *) $eax
Cannot access memory at address 0x0
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
1 2

Breakpoint 4, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 8, 0x000000000040112f in phase_4 ()
(gdb) p $eax
$2 = 0
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
10 2

Breakpoint 4, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 8, 0x000000000040112f in phase_4 ()
(gdb) p $eax
$3 = 5
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
11 2

Breakpoint 4, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 8, 0x000000000040112f in phase_4 ()
(gdb) p $eax
$4 = 1
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
12 2

Breakpoint 4, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 8, 0x000000000040112f in phase_4 ()
(gdb) p $eax
$5 = 3
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
1Halfway there!
13 2

Breakpoint 4, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 1, 0x00000000004015ef in explode_bomb ()
(gdb) p $eax
$6 = 2
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
13 2

Breakpoint 4, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 8, 0x000000000040112f in phase_4 ()
(gdb) p $eax
$7 = 3
(gdb) disas
Dump of assembler code for function phase_4:
   0x00000000004010e2 <+0>:	sub    $0x18,%rsp
   0x00000000004010e6 <+4>:	lea    0x8(%rsp),%rcx
   0x00000000004010eb <+9>:	lea    0xc(%rsp),%rdx
   0x00000000004010f0 <+14>:	mov    $0x40286d,%esi
   0x00000000004010f5 <+19>:	mov    $0x0,%eax
   0x00000000004010fa <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004010ff <+29>:	cmp    $0x2,%eax
   0x0000000000401102 <+32>:	jne    0x40110b <phase_4+41>
   0x0000000000401104 <+34>:	cmpl   $0xe,0xc(%rsp)
   0x0000000000401109 <+39>:	jbe    0x401110 <phase_4+46>
   0x000000000040110b <+41>:	callq  0x4015ef <explode_bomb>
   0x0000000000401110 <+46>:	mov    $0xe,%edx
   0x0000000000401115 <+51>:	mov    $0x0,%esi
   0x000000000040111a <+56>:	mov    0xc(%rsp),%edi
   0x000000000040111e <+60>:	callq  0x4010a4 <func4>
   0x0000000000401123 <+65>:	cmp    $0x2,%eax
   0x0000000000401126 <+68>:	jne    0x40112f <phase_4+77>
   0x0000000000401128 <+70>:	cmpl   $0x2,0x8(%rsp)
   0x000000000040112d <+75>:	je     0x401134 <phase_4+82>
=> 0x000000000040112f <+77>:	callq  0x4015ef <explode_bomb>
   0x0000000000401134 <+82>:	add    $0x18,%rsp
   0x0000000000401138 <+86>:	retq
End of assembler dump.
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
14 2

Breakpoint 4, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 8, 0x000000000040112f in phase_4 ()
(gdb) p $eax
$8 = 7
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Please answer y or n.
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
15 2

Breakpoint 4, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 1, 0x00000000004015ef in explode_bomb ()
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
2 2

Breakpoint 4, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 8, 0x000000000040112f in phase_4 ()
(gdb) p $eax
$9 = 4
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
3 2

Breakpoint 4, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.

Breakpoint 8, 0x000000000040112f in phase_4 ()
(gdb) p $eax
$10 = 0
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
4 2

Breakpoint 4, 0x00000000004010e2 in phase_4 ()
(gdb) c
Continuing.
So you got that one.  Try this one.
test

Breakpoint 5, 0x0000000000401139 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
=> 0x0000000000401139 <+0>:	push   %rbx
   0x000000000040113a <+1>:	mov    %rdi,%rbx
   0x000000000040113d <+4>:	callq  0x401371 <string_length>
   0x0000000000401142 <+9>:	cmp    $0x6,%eax
   0x0000000000401145 <+12>:	je     0x40114c <phase_5+19>
   0x0000000000401147 <+14>:	callq  0x4015ef <explode_bomb>
   0x000000000040114c <+19>:	mov    $0x0,%eax
   0x0000000000401151 <+24>:	mov    $0x0,%edx
   0x0000000000401156 <+29>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040115a <+33>:	and    $0xf,%ecx
   0x000000000040115d <+36>:	add    0x4025e0(,%rcx,4),%edx
   0x0000000000401164 <+43>:	add    $0x1,%rax
   0x0000000000401168 <+47>:	cmp    $0x6,%rax
   0x000000000040116c <+51>:	jne    0x401156 <phase_5+29>
   0x000000000040116e <+53>:	cmp    $0x31,%edx
   0x0000000000401171 <+56>:	je     0x401178 <phase_5+63>
   0x0000000000401173 <+58>:	callq  0x4015ef <explode_bomb>
   0x0000000000401178 <+63>:	pop    %rbx
   0x0000000000401179 <+64>:	retq
End of assembler dump.
(gdb) x/s 0x401371
0x401371 <string_length>:	"\200?"
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
jd

Breakpoint 4, 0x00000000004010e2 in phase_4 ()
(gdb) quit
A debugging session is active.

	Inferior 1 [process 21674] will be killed.

Quit anyway? (y or n) y
[tony.bumatay@linuxlab001 bomb33]$ vim solutions.txt
[tony.bumatay@linuxlab001 bomb33]$ gdb bomb
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-80.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb...done.
(gdb) source breakpoints.txt
Breakpoint 1 at 0x4015ef
Breakpoint 2 at 0x4015ef
Breakpoint 3 at 0x4015f3
Breakpoint 4 at 0x4010e2
Breakpoint 5 at 0x401139
Breakpoint 6 at 0x40117a
Breakpoint 7 at 0x4012a9
(gdb) r solutions.txt
Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!

Breakpoint 4, 0x00000000004010e2 in phase_4 ()
Missing separate debuginfos, use: debuginfo-install nss-mdns-0.10-12.el7.x86_64
(gdb) quit
A debugging session is active.

	Inferior 1 [process 21939] will be killed.

Quit anyway? (y or n) y
[tony.bumatay@linuxlab001 bomb33]$ vim breakpoints.txt
[tony.bumatay@linuxlab001 bomb33]$ gdb bomb
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-80.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb...done.
(gdb) source breakpoints.txt
Breakpoint 1 at 0x4015ef
Breakpoint 2 at 0x4015ef
Breakpoint 3 at 0x4015f3
Breakpoint 4 at 0x401139
Breakpoint 5 at 0x40117a
Breakpoint 6 at 0x4012a9
(gdb) r solutions.txt
Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
abcdef

Breakpoint 4, 0x0000000000401139 in phase_5 ()
Missing separate debuginfos, use: debuginfo-install nss-mdns-0.10-12.el7.x86_64
(gdb) disas
Dump of assembler code for function phase_5:
=> 0x0000000000401139 <+0>:	push   %rbx
   0x000000000040113a <+1>:	mov    %rdi,%rbx
   0x000000000040113d <+4>:	callq  0x401371 <string_length>
   0x0000000000401142 <+9>:	cmp    $0x6,%eax
   0x0000000000401145 <+12>:	je     0x40114c <phase_5+19>
   0x0000000000401147 <+14>:	callq  0x4015ef <explode_bomb>
   0x000000000040114c <+19>:	mov    $0x0,%eax
   0x0000000000401151 <+24>:	mov    $0x0,%edx
   0x0000000000401156 <+29>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040115a <+33>:	and    $0xf,%ecx
   0x000000000040115d <+36>:	add    0x4025e0(,%rcx,4),%edx
   0x0000000000401164 <+43>:	add    $0x1,%rax
   0x0000000000401168 <+47>:	cmp    $0x6,%rax
   0x000000000040116c <+51>:	jne    0x401156 <phase_5+29>
   0x000000000040116e <+53>:	cmp    $0x31,%edx
   0x0000000000401171 <+56>:	je     0x401178 <phase_5+63>
   0x0000000000401173 <+58>:	callq  0x4015ef <explode_bomb>
   0x0000000000401178 <+63>:	pop    %rbx
   0x0000000000401179 <+64>:	retq
End of assembler dump.
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
123456

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
=> 0x0000000000401139 <+0>:	push   %rbx
   0x000000000040113a <+1>:	mov    %rdi,%rbx
   0x000000000040113d <+4>:	callq  0x401371 <string_length>
   0x0000000000401142 <+9>:	cmp    $0x6,%eax
   0x0000000000401145 <+12>:	je     0x40114c <phase_5+19>
   0x0000000000401147 <+14>:	callq  0x4015ef <explode_bomb>
   0x000000000040114c <+19>:	mov    $0x0,%eax
   0x0000000000401151 <+24>:	mov    $0x0,%edx
   0x0000000000401156 <+29>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040115a <+33>:	and    $0xf,%ecx
   0x000000000040115d <+36>:	add    0x4025e0(,%rcx,4),%edx
   0x0000000000401164 <+43>:	add    $0x1,%rax
   0x0000000000401168 <+47>:	cmp    $0x6,%rax
   0x000000000040116c <+51>:	jne    0x401156 <phase_5+29>
   0x000000000040116e <+53>:	cmp    $0x31,%edx
   0x0000000000401171 <+56>:	je     0x401178 <phase_5+63>
   0x0000000000401173 <+58>:	callq  0x4015ef <explode_bomb>
   0x0000000000401178 <+63>:	pop    %rbx
   0x0000000000401179 <+64>:	retq
End of assembler dump.
(gdb) b *0x0401173
Breakpoint 7 at 0x401173
(gdb) c
Continuing.

Breakpoint 7, 0x0000000000401173 in phase_5 ()
(gdb) p $edx
$1 = 54
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
123455

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 7, 0x0000000000401173 in phase_5 ()
(gdb) p $edx
$2 = 61
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
123450

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 7, 0x0000000000401173 in phase_5 ()
(gdb) p $edx
$3 = 47
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
123452

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 7, 0x0000000000401173 in phase_5 ()
(gdb) p $edx
$4 = 51
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
123451

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 7, 0x0000000000401173 in phase_5 ()
(gdb) p $edx
$5 = 55
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
111110

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 7, 0x0000000000401173 in phase_5 ()
(gdb) p $edx
$6 = 52
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
111111

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 7, 0x0000000000401173 in phase_5 ()
(gdb) p $edx
$7 = 60
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
111112

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 7, 0x0000000000401173 in phase_5 ()
(gdb) p $edx
$8 = 56
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
111113

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 7, 0x0000000000401173 in phase_5 ()
(gdb) p $edx
$9 = 51
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
111114

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 7, 0x0000000000401173 in phase_5 ()
(gdb) p $edx
$10 = 62
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
111115

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 7, 0x0000000000401173 in phase_5 ()
(gdb) p $edx
$11 = 66
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
111101

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 7, 0x0000000000401173 in phase_5 ()
(gdb) p $edx
$12 = 52
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
111103

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 7, 0x0000000000401173 in phase_5 ()
(gdb) p $edx
$13 = 43
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
111102

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 7, 0x0000000000401173 in phase_5 ()
(gdb) p $edx
$14 = 48
(gdb) 011102
Undefined command: "011102".  Try "help".
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
011102

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 7, 0x0000000000401173 in phase_5 ()
(gdb) p $edx
$15 = 40
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
111104

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 7, 0x0000000000401173 in phase_5 ()
(gdb) p $edx
$16 = 54
(gdb) disas
Dump of assembler code for function phase_5:
   0x0000000000401139 <+0>:	push   %rbx
   0x000000000040113a <+1>:	mov    %rdi,%rbx
   0x000000000040113d <+4>:	callq  0x401371 <string_length>
   0x0000000000401142 <+9>:	cmp    $0x6,%eax
   0x0000000000401145 <+12>:	je     0x40114c <phase_5+19>
   0x0000000000401147 <+14>:	callq  0x4015ef <explode_bomb>
   0x000000000040114c <+19>:	mov    $0x0,%eax
   0x0000000000401151 <+24>:	mov    $0x0,%edx
   0x0000000000401156 <+29>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040115a <+33>:	and    $0xf,%ecx
   0x000000000040115d <+36>:	add    0x4025e0(,%rcx,4),%edx
   0x0000000000401164 <+43>:	add    $0x1,%rax
   0x0000000000401168 <+47>:	cmp    $0x6,%rax
   0x000000000040116c <+51>:	jne    0x401156 <phase_5+29>
   0x000000000040116e <+53>:	cmp    $0x31,%edx
   0x0000000000401171 <+56>:	je     0x401178 <phase_5+63>
=> 0x0000000000401173 <+58>:	callq  0x4015ef <explode_bomb>
   0x0000000000401178 <+63>:	pop    %rbx
   0x0000000000401179 <+64>:	retq
End of assembler dump.
(gdb) p $0x4025e0
$17 = void
(gdb) p 0x4025e0
$18 = 4204000
(gdb) p/s 0x4025e0
$19 = 4204000
(gdb) p/x 0x4025e0
$20 = 0x4025e0
(gdb) p/x *0x4025e0
$21 = 0x2
(gdb) p/t 0xf
$22 = 1111
(gdb) p $ecx
$23 = 4
(gdb) b *0x0401156
Breakpoint 8 at 0x401156
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
11102

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 1, 0x00000000004015ef in explode_bomb ()
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
111102

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x0000000000401139 <+0>:	push   %rbx
   0x000000000040113a <+1>:	mov    %rdi,%rbx
   0x000000000040113d <+4>:	callq  0x401371 <string_length>
   0x0000000000401142 <+9>:	cmp    $0x6,%eax
   0x0000000000401145 <+12>:	je     0x40114c <phase_5+19>
   0x0000000000401147 <+14>:	callq  0x4015ef <explode_bomb>
   0x000000000040114c <+19>:	mov    $0x0,%eax
   0x0000000000401151 <+24>:	mov    $0x0,%edx
=> 0x0000000000401156 <+29>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040115a <+33>:	and    $0xf,%ecx
   0x000000000040115d <+36>:	add    0x4025e0(,%rcx,4),%edx
   0x0000000000401164 <+43>:	add    $0x1,%rax
   0x0000000000401168 <+47>:	cmp    $0x6,%rax
   0x000000000040116c <+51>:	jne    0x401156 <phase_5+29>
   0x000000000040116e <+53>:	cmp    $0x31,%edx
   0x0000000000401171 <+56>:	je     0x401178 <phase_5+63>
   0x0000000000401173 <+58>:	callq  0x4015ef <explode_bomb>
   0x0000000000401178 <+63>:	pop    %rbx
   0x0000000000401179 <+64>:	retq
End of assembler dump.
(gdb) $ecx
Undefined command: "$ecx".  Try "help".
(gdb) p $ecx
$24 = 6
(gdb) ni
0x000000000040115a in phase_5 ()
(gdb) p $ecx
$25 = 49
(gdb) disas
Dump of assembler code for function phase_5:
   0x0000000000401139 <+0>:	push   %rbx
   0x000000000040113a <+1>:	mov    %rdi,%rbx
   0x000000000040113d <+4>:	callq  0x401371 <string_length>
   0x0000000000401142 <+9>:	cmp    $0x6,%eax
   0x0000000000401145 <+12>:	je     0x40114c <phase_5+19>
   0x0000000000401147 <+14>:	callq  0x4015ef <explode_bomb>
   0x000000000040114c <+19>:	mov    $0x0,%eax
   0x0000000000401151 <+24>:	mov    $0x0,%edx
   0x0000000000401156 <+29>:	movzbl (%rbx,%rax,1),%ecx
=> 0x000000000040115a <+33>:	and    $0xf,%ecx
   0x000000000040115d <+36>:	add    0x4025e0(,%rcx,4),%edx
   0x0000000000401164 <+43>:	add    $0x1,%rax
   0x0000000000401168 <+47>:	cmp    $0x6,%rax
   0x000000000040116c <+51>:	jne    0x401156 <phase_5+29>
   0x000000000040116e <+53>:	cmp    $0x31,%edx
   0x0000000000401171 <+56>:	je     0x401178 <phase_5+63>
   0x0000000000401173 <+58>:	callq  0x4015ef <explode_bomb>
   0x0000000000401178 <+63>:	pop    %rbx
   0x0000000000401179 <+64>:	retq
End of assembler dump.
(gdb) p $edx
$26 = 0
(gdb) p $rcx
$27 = 49
(gdb) ni
0x000000000040115d in phase_5 ()
(gdb) p $ecx
$28 = 1
(gdb) p $edx
$29 = 0
(gdb) ni
0x0000000000401164 in phase_5 ()
(gdb) p $edx
$30 = 10
(gdb) disas
Dump of assembler code for function phase_5:
   0x0000000000401139 <+0>:	push   %rbx
   0x000000000040113a <+1>:	mov    %rdi,%rbx
   0x000000000040113d <+4>:	callq  0x401371 <string_length>
   0x0000000000401142 <+9>:	cmp    $0x6,%eax
   0x0000000000401145 <+12>:	je     0x40114c <phase_5+19>
   0x0000000000401147 <+14>:	callq  0x4015ef <explode_bomb>
   0x000000000040114c <+19>:	mov    $0x0,%eax
   0x0000000000401151 <+24>:	mov    $0x0,%edx
   0x0000000000401156 <+29>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040115a <+33>:	and    $0xf,%ecx
   0x000000000040115d <+36>:	add    0x4025e0(,%rcx,4),%edx
=> 0x0000000000401164 <+43>:	add    $0x1,%rax
   0x0000000000401168 <+47>:	cmp    $0x6,%rax
   0x000000000040116c <+51>:	jne    0x401156 <phase_5+29>
   0x000000000040116e <+53>:	cmp    $0x31,%edx
   0x0000000000401171 <+56>:	je     0x401178 <phase_5+63>
   0x0000000000401173 <+58>:	callq  0x4015ef <explode_bomb>
   0x0000000000401178 <+63>:	pop    %rbx
   0x0000000000401179 <+64>:	retq
End of assembler dump.
(gdb) ni
0x0000000000401168 in phase_5 ()
(gdb) ni
0x000000000040116c in phase_5 ()
(gdb) ni

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x0000000000401139 <+0>:	push   %rbx
   0x000000000040113a <+1>:	mov    %rdi,%rbx
   0x000000000040113d <+4>:	callq  0x401371 <string_length>
   0x0000000000401142 <+9>:	cmp    $0x6,%eax
   0x0000000000401145 <+12>:	je     0x40114c <phase_5+19>
   0x0000000000401147 <+14>:	callq  0x4015ef <explode_bomb>
   0x000000000040114c <+19>:	mov    $0x0,%eax
   0x0000000000401151 <+24>:	mov    $0x0,%edx
=> 0x0000000000401156 <+29>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040115a <+33>:	and    $0xf,%ecx
   0x000000000040115d <+36>:	add    0x4025e0(,%rcx,4),%edx
   0x0000000000401164 <+43>:	add    $0x1,%rax
   0x0000000000401168 <+47>:	cmp    $0x6,%rax
   0x000000000040116c <+51>:	jne    0x401156 <phase_5+29>
   0x000000000040116e <+53>:	cmp    $0x31,%edx
   0x0000000000401171 <+56>:	je     0x401178 <phase_5+63>
   0x0000000000401173 <+58>:	callq  0x4015ef <explode_bomb>
   0x0000000000401178 <+63>:	pop    %rbx
   0x0000000000401179 <+64>:	retq
End of assembler dump.
(gdb) p $ecx
$31 = 1
(gdb) ni
0x000000000040115a in phase_5 ()
(gdb) ni
0x000000000040115d in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x0000000000401139 <+0>:	push   %rbx
   0x000000000040113a <+1>:	mov    %rdi,%rbx
   0x000000000040113d <+4>:	callq  0x401371 <string_length>
   0x0000000000401142 <+9>:	cmp    $0x6,%eax
   0x0000000000401145 <+12>:	je     0x40114c <phase_5+19>
   0x0000000000401147 <+14>:	callq  0x4015ef <explode_bomb>
   0x000000000040114c <+19>:	mov    $0x0,%eax
   0x0000000000401151 <+24>:	mov    $0x0,%edx
   0x0000000000401156 <+29>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040115a <+33>:	and    $0xf,%ecx
=> 0x000000000040115d <+36>:	add    0x4025e0(,%rcx,4),%edx
   0x0000000000401164 <+43>:	add    $0x1,%rax
   0x0000000000401168 <+47>:	cmp    $0x6,%rax
   0x000000000040116c <+51>:	jne    0x401156 <phase_5+29>
   0x000000000040116e <+53>:	cmp    $0x31,%edx
   0x0000000000401171 <+56>:	je     0x401178 <phase_5+63>
   0x0000000000401173 <+58>:	callq  0x4015ef <explode_bomb>
   0x0000000000401178 <+63>:	pop    %rbx
   0x0000000000401179 <+64>:	retq
End of assembler dump.
(gdb) p $ecx
$32 = 1
(gdb) p $edx
$33 = 10
(gdb) ni
0x0000000000401164 in phase_5 ()
(gdb) p $edx
$34 = 20
(gdb) ni
0x0000000000401168 in phase_5 ()
(gdb) ni
0x000000000040116c in phase_5 ()
(gdb) ni

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x0000000000401139 <+0>:	push   %rbx
   0x000000000040113a <+1>:	mov    %rdi,%rbx
   0x000000000040113d <+4>:	callq  0x401371 <string_length>
   0x0000000000401142 <+9>:	cmp    $0x6,%eax
   0x0000000000401145 <+12>:	je     0x40114c <phase_5+19>
   0x0000000000401147 <+14>:	callq  0x4015ef <explode_bomb>
   0x000000000040114c <+19>:	mov    $0x0,%eax
   0x0000000000401151 <+24>:	mov    $0x0,%edx
=> 0x0000000000401156 <+29>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040115a <+33>:	and    $0xf,%ecx
   0x000000000040115d <+36>:	add    0x4025e0(,%rcx,4),%edx
   0x0000000000401164 <+43>:	add    $0x1,%rax
   0x0000000000401168 <+47>:	cmp    $0x6,%rax
   0x000000000040116c <+51>:	jne    0x401156 <phase_5+29>
   0x000000000040116e <+53>:	cmp    $0x31,%edx
   0x0000000000401171 <+56>:	je     0x401178 <phase_5+63>
   0x0000000000401173 <+58>:	callq  0x4015ef <explode_bomb>
   0x0000000000401178 <+63>:	pop    %rbx
   0x0000000000401179 <+64>:	retq
End of assembler dump.
(gdb) p $edx
$35 = 20
(gdb) p $ecx
$36 = 1
(gdb) ni
0x000000000040115a in phase_5 ()
(gdb) ni
0x000000000040115d in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x0000000000401139 <+0>:	push   %rbx
   0x000000000040113a <+1>:	mov    %rdi,%rbx
   0x000000000040113d <+4>:	callq  0x401371 <string_length>
   0x0000000000401142 <+9>:	cmp    $0x6,%eax
   0x0000000000401145 <+12>:	je     0x40114c <phase_5+19>
   0x0000000000401147 <+14>:	callq  0x4015ef <explode_bomb>
   0x000000000040114c <+19>:	mov    $0x0,%eax
   0x0000000000401151 <+24>:	mov    $0x0,%edx
   0x0000000000401156 <+29>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040115a <+33>:	and    $0xf,%ecx
=> 0x000000000040115d <+36>:	add    0x4025e0(,%rcx,4),%edx
   0x0000000000401164 <+43>:	add    $0x1,%rax
   0x0000000000401168 <+47>:	cmp    $0x6,%rax
   0x000000000040116c <+51>:	jne    0x401156 <phase_5+29>
   0x000000000040116e <+53>:	cmp    $0x31,%edx
   0x0000000000401171 <+56>:	je     0x401178 <phase_5+63>
   0x0000000000401173 <+58>:	callq  0x4015ef <explode_bomb>
   0x0000000000401178 <+63>:	pop    %rbx
   0x0000000000401179 <+64>:	retq
End of assembler dump.
(gdb) p $edx
$37 = 20
(gdb) ni
0x0000000000401164 in phase_5 ()
(gdb) p $edx
$38 = 30
(gdb) p $rcx
$39 = 1
(gdb) ni
0x0000000000401168 in phase_5 ()
(gdb) ni
0x000000000040116c in phase_5 ()
(gdb) ni

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x0000000000401139 <+0>:	push   %rbx
   0x000000000040113a <+1>:	mov    %rdi,%rbx
   0x000000000040113d <+4>:	callq  0x401371 <string_length>
   0x0000000000401142 <+9>:	cmp    $0x6,%eax
   0x0000000000401145 <+12>:	je     0x40114c <phase_5+19>
   0x0000000000401147 <+14>:	callq  0x4015ef <explode_bomb>
   0x000000000040114c <+19>:	mov    $0x0,%eax
   0x0000000000401151 <+24>:	mov    $0x0,%edx
=> 0x0000000000401156 <+29>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040115a <+33>:	and    $0xf,%ecx
   0x000000000040115d <+36>:	add    0x4025e0(,%rcx,4),%edx
   0x0000000000401164 <+43>:	add    $0x1,%rax
   0x0000000000401168 <+47>:	cmp    $0x6,%rax
   0x000000000040116c <+51>:	jne    0x401156 <phase_5+29>
   0x000000000040116e <+53>:	cmp    $0x31,%edx
   0x0000000000401171 <+56>:	je     0x401178 <phase_5+63>
   0x0000000000401173 <+58>:	callq  0x4015ef <explode_bomb>
   0x0000000000401178 <+63>:	pop    %rbx
   0x0000000000401179 <+64>:	retq
End of assembler dump.
(gdb) ni
0x000000000040115a in phase_5 ()
(gdb) ni
0x000000000040115d in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x0000000000401139 <+0>:	push   %rbx
   0x000000000040113a <+1>:	mov    %rdi,%rbx
   0x000000000040113d <+4>:	callq  0x401371 <string_length>
   0x0000000000401142 <+9>:	cmp    $0x6,%eax
   0x0000000000401145 <+12>:	je     0x40114c <phase_5+19>
   0x0000000000401147 <+14>:	callq  0x4015ef <explode_bomb>
   0x000000000040114c <+19>:	mov    $0x0,%eax
   0x0000000000401151 <+24>:	mov    $0x0,%edx
   0x0000000000401156 <+29>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040115a <+33>:	and    $0xf,%ecx
=> 0x000000000040115d <+36>:	add    0x4025e0(,%rcx,4),%edx
   0x0000000000401164 <+43>:	add    $0x1,%rax
   0x0000000000401168 <+47>:	cmp    $0x6,%rax
   0x000000000040116c <+51>:	jne    0x401156 <phase_5+29>
   0x000000000040116e <+53>:	cmp    $0x31,%edx
   0x0000000000401171 <+56>:	je     0x401178 <phase_5+63>
   0x0000000000401173 <+58>:	callq  0x4015ef <explode_bomb>
   0x0000000000401178 <+63>:	pop    %rbx
   0x0000000000401179 <+64>:	retq
End of assembler dump.
(gdb) p $edx
$40 = 30
(gdb) p $ecx
$41 = 1
(gdb) ni
0x0000000000401164 in phase_5 ()
(gdb) p $edx
$42 = 40
(gdb) ni
0x0000000000401168 in phase_5 ()
(gdb) ni
0x000000000040116c in phase_5 ()
(gdb) ni

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x0000000000401139 <+0>:	push   %rbx
   0x000000000040113a <+1>:	mov    %rdi,%rbx
   0x000000000040113d <+4>:	callq  0x401371 <string_length>
   0x0000000000401142 <+9>:	cmp    $0x6,%eax
   0x0000000000401145 <+12>:	je     0x40114c <phase_5+19>
   0x0000000000401147 <+14>:	callq  0x4015ef <explode_bomb>
   0x000000000040114c <+19>:	mov    $0x0,%eax
   0x0000000000401151 <+24>:	mov    $0x0,%edx
=> 0x0000000000401156 <+29>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040115a <+33>:	and    $0xf,%ecx
   0x000000000040115d <+36>:	add    0x4025e0(,%rcx,4),%edx
   0x0000000000401164 <+43>:	add    $0x1,%rax
   0x0000000000401168 <+47>:	cmp    $0x6,%rax
   0x000000000040116c <+51>:	jne    0x401156 <phase_5+29>
   0x000000000040116e <+53>:	cmp    $0x31,%edx
   0x0000000000401171 <+56>:	je     0x401178 <phase_5+63>
   0x0000000000401173 <+58>:	callq  0x4015ef <explode_bomb>
   0x0000000000401178 <+63>:	pop    %rbx
   0x0000000000401179 <+64>:	retq
End of assembler dump.
(gdb) ni
0x000000000040115a in phase_5 ()
(gdb) ni
0x000000000040115d in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x0000000000401139 <+0>:	push   %rbx
   0x000000000040113a <+1>:	mov    %rdi,%rbx
   0x000000000040113d <+4>:	callq  0x401371 <string_length>
   0x0000000000401142 <+9>:	cmp    $0x6,%eax
   0x0000000000401145 <+12>:	je     0x40114c <phase_5+19>
   0x0000000000401147 <+14>:	callq  0x4015ef <explode_bomb>
   0x000000000040114c <+19>:	mov    $0x0,%eax
   0x0000000000401151 <+24>:	mov    $0x0,%edx
   0x0000000000401156 <+29>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040115a <+33>:	and    $0xf,%ecx
=> 0x000000000040115d <+36>:	add    0x4025e0(,%rcx,4),%edx
   0x0000000000401164 <+43>:	add    $0x1,%rax
   0x0000000000401168 <+47>:	cmp    $0x6,%rax
   0x000000000040116c <+51>:	jne    0x401156 <phase_5+29>
   0x000000000040116e <+53>:	cmp    $0x31,%edx
   0x0000000000401171 <+56>:	je     0x401178 <phase_5+63>
   0x0000000000401173 <+58>:	callq  0x4015ef <explode_bomb>
   0x0000000000401178 <+63>:	pop    %rbx
   0x0000000000401179 <+64>:	retq
End of assembler dump.
(gdb) ni
0x0000000000401164 in phase_5 ()
(gdb) p $edx
$43 = 42
(gdb) disas
Dump of assembler code for function phase_5:
   0x0000000000401139 <+0>:	push   %rbx
   0x000000000040113a <+1>:	mov    %rdi,%rbx
   0x000000000040113d <+4>:	callq  0x401371 <string_length>
   0x0000000000401142 <+9>:	cmp    $0x6,%eax
   0x0000000000401145 <+12>:	je     0x40114c <phase_5+19>
   0x0000000000401147 <+14>:	callq  0x4015ef <explode_bomb>
   0x000000000040114c <+19>:	mov    $0x0,%eax
   0x0000000000401151 <+24>:	mov    $0x0,%edx
   0x0000000000401156 <+29>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040115a <+33>:	and    $0xf,%ecx
   0x000000000040115d <+36>:	add    0x4025e0(,%rcx,4),%edx
=> 0x0000000000401164 <+43>:	add    $0x1,%rax
   0x0000000000401168 <+47>:	cmp    $0x6,%rax
   0x000000000040116c <+51>:	jne    0x401156 <phase_5+29>
   0x000000000040116e <+53>:	cmp    $0x31,%edx
   0x0000000000401171 <+56>:	je     0x401178 <phase_5+63>
   0x0000000000401173 <+58>:	callq  0x4015ef <explode_bomb>
   0x0000000000401178 <+63>:	pop    %rbx
   0x0000000000401179 <+64>:	retq
End of assembler dump.
(gdb) ni
0x0000000000401168 in phase_5 ()
(gdb) ni
0x000000000040116c in phase_5 ()
(gdb) ni

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x0000000000401139 <+0>:	push   %rbx
   0x000000000040113a <+1>:	mov    %rdi,%rbx
   0x000000000040113d <+4>:	callq  0x401371 <string_length>
   0x0000000000401142 <+9>:	cmp    $0x6,%eax
   0x0000000000401145 <+12>:	je     0x40114c <phase_5+19>
   0x0000000000401147 <+14>:	callq  0x4015ef <explode_bomb>
   0x000000000040114c <+19>:	mov    $0x0,%eax
   0x0000000000401151 <+24>:	mov    $0x0,%edx
=> 0x0000000000401156 <+29>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040115a <+33>:	and    $0xf,%ecx
   0x000000000040115d <+36>:	add    0x4025e0(,%rcx,4),%edx
   0x0000000000401164 <+43>:	add    $0x1,%rax
   0x0000000000401168 <+47>:	cmp    $0x6,%rax
   0x000000000040116c <+51>:	jne    0x401156 <phase_5+29>
   0x000000000040116e <+53>:	cmp    $0x31,%edx
   0x0000000000401171 <+56>:	je     0x401178 <phase_5+63>
   0x0000000000401173 <+58>:	callq  0x4015ef <explode_bomb>
   0x0000000000401178 <+63>:	pop    %rbx
   0x0000000000401179 <+64>:	retq
End of assembler dump.
(gdb) ni
0x000000000040115a in phase_5 ()
(gdb) ni
0x000000000040115d in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x0000000000401139 <+0>:	push   %rbx
   0x000000000040113a <+1>:	mov    %rdi,%rbx
   0x000000000040113d <+4>:	callq  0x401371 <string_length>
   0x0000000000401142 <+9>:	cmp    $0x6,%eax
   0x0000000000401145 <+12>:	je     0x40114c <phase_5+19>
   0x0000000000401147 <+14>:	callq  0x4015ef <explode_bomb>
   0x000000000040114c <+19>:	mov    $0x0,%eax
   0x0000000000401151 <+24>:	mov    $0x0,%edx
   0x0000000000401156 <+29>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040115a <+33>:	and    $0xf,%ecx
=> 0x000000000040115d <+36>:	add    0x4025e0(,%rcx,4),%edx
   0x0000000000401164 <+43>:	add    $0x1,%rax
   0x0000000000401168 <+47>:	cmp    $0x6,%rax
   0x000000000040116c <+51>:	jne    0x401156 <phase_5+29>
   0x000000000040116e <+53>:	cmp    $0x31,%edx
   0x0000000000401171 <+56>:	je     0x401178 <phase_5+63>
   0x0000000000401173 <+58>:	callq  0x4015ef <explode_bomb>
   0x0000000000401178 <+63>:	pop    %rbx
   0x0000000000401179 <+64>:	retq
End of assembler dump.
(gdb) p $rcx
$44 = 2
(gdb) p $edx
$45 = 42
(gdb) p $ecx
$46 = 2
(gdb) ni
0x0000000000401164 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x0000000000401139 <+0>:	push   %rbx
   0x000000000040113a <+1>:	mov    %rdi,%rbx
   0x000000000040113d <+4>:	callq  0x401371 <string_length>
   0x0000000000401142 <+9>:	cmp    $0x6,%eax
   0x0000000000401145 <+12>:	je     0x40114c <phase_5+19>
   0x0000000000401147 <+14>:	callq  0x4015ef <explode_bomb>
   0x000000000040114c <+19>:	mov    $0x0,%eax
   0x0000000000401151 <+24>:	mov    $0x0,%edx
   0x0000000000401156 <+29>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040115a <+33>:	and    $0xf,%ecx
   0x000000000040115d <+36>:	add    0x4025e0(,%rcx,4),%edx
=> 0x0000000000401164 <+43>:	add    $0x1,%rax
   0x0000000000401168 <+47>:	cmp    $0x6,%rax
   0x000000000040116c <+51>:	jne    0x401156 <phase_5+29>
   0x000000000040116e <+53>:	cmp    $0x31,%edx
   0x0000000000401171 <+56>:	je     0x401178 <phase_5+63>
   0x0000000000401173 <+58>:	callq  0x4015ef <explode_bomb>
   0x0000000000401178 <+63>:	pop    %rbx
   0x0000000000401179 <+64>:	retq
End of assembler dump.
(gdb) p $edx
$47 = 48
(gdb) p $rcx
$48 = 2
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
201111

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) p $edx
$49 = 0
(gdb) disas
Dump of assembler code for function phase_5:
   0x0000000000401139 <+0>:	push   %rbx
   0x000000000040113a <+1>:	mov    %rdi,%rbx
   0x000000000040113d <+4>:	callq  0x401371 <string_length>
   0x0000000000401142 <+9>:	cmp    $0x6,%eax
   0x0000000000401145 <+12>:	je     0x40114c <phase_5+19>
   0x0000000000401147 <+14>:	callq  0x4015ef <explode_bomb>
   0x000000000040114c <+19>:	mov    $0x0,%eax
   0x0000000000401151 <+24>:	mov    $0x0,%edx
=> 0x0000000000401156 <+29>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040115a <+33>:	and    $0xf,%ecx
   0x000000000040115d <+36>:	add    0x4025e0(,%rcx,4),%edx
   0x0000000000401164 <+43>:	add    $0x1,%rax
   0x0000000000401168 <+47>:	cmp    $0x6,%rax
   0x000000000040116c <+51>:	jne    0x401156 <phase_5+29>
   0x000000000040116e <+53>:	cmp    $0x31,%edx
   0x0000000000401171 <+56>:	je     0x401178 <phase_5+63>
   0x0000000000401173 <+58>:	callq  0x4015ef <explode_bomb>
   0x0000000000401178 <+63>:	pop    %rbx
   0x0000000000401179 <+64>:	retq
End of assembler dump.
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x0000000000401139 <+0>:	push   %rbx
   0x000000000040113a <+1>:	mov    %rdi,%rbx
   0x000000000040113d <+4>:	callq  0x401371 <string_length>
   0x0000000000401142 <+9>:	cmp    $0x6,%eax
   0x0000000000401145 <+12>:	je     0x40114c <phase_5+19>
   0x0000000000401147 <+14>:	callq  0x4015ef <explode_bomb>
   0x000000000040114c <+19>:	mov    $0x0,%eax
   0x0000000000401151 <+24>:	mov    $0x0,%edx
=> 0x0000000000401156 <+29>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040115a <+33>:	and    $0xf,%ecx
   0x000000000040115d <+36>:	add    0x4025e0(,%rcx,4),%edx
   0x0000000000401164 <+43>:	add    $0x1,%rax
   0x0000000000401168 <+47>:	cmp    $0x6,%rax
   0x000000000040116c <+51>:	jne    0x401156 <phase_5+29>
   0x000000000040116e <+53>:	cmp    $0x31,%edx
   0x0000000000401171 <+56>:	je     0x401178 <phase_5+63>
   0x0000000000401173 <+58>:	callq  0x4015ef <explode_bomb>
   0x0000000000401178 <+63>:	pop    %rbx
   0x0000000000401179 <+64>:	retq
End of assembler dump.
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) p $edx
$50 = 18
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
201111

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) p $edx
$51 = 0
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) p $edx
$52 = 6
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) p $edx
$53 = 8
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) p $edx
$54 = 18
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) p $edx
$55 = 28
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) p $edx
$56 = 38
(gdb) c
Continuing.

Breakpoint 7, 0x0000000000401173 in phase_5 ()
(gdb) p $edx
$57 = 48
(gdb) c
Continuing.

Breakpoint 1, 0x00000000004015ef in explode_bomb ()
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
110211

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb)
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb)
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb)
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb)
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb)
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb)
Continuing.

Breakpoint 7, 0x0000000000401173 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x0000000000401139 <+0>:	push   %rbx
   0x000000000040113a <+1>:	mov    %rdi,%rbx
   0x000000000040113d <+4>:	callq  0x401371 <string_length>
   0x0000000000401142 <+9>:	cmp    $0x6,%eax
   0x0000000000401145 <+12>:	je     0x40114c <phase_5+19>
   0x0000000000401147 <+14>:	callq  0x4015ef <explode_bomb>
   0x000000000040114c <+19>:	mov    $0x0,%eax
   0x0000000000401151 <+24>:	mov    $0x0,%edx
   0x0000000000401156 <+29>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040115a <+33>:	and    $0xf,%ecx
   0x000000000040115d <+36>:	add    0x4025e0(,%rcx,4),%edx
   0x0000000000401164 <+43>:	add    $0x1,%rax
   0x0000000000401168 <+47>:	cmp    $0x6,%rax
   0x000000000040116c <+51>:	jne    0x401156 <phase_5+29>
   0x000000000040116e <+53>:	cmp    $0x31,%edx
   0x0000000000401171 <+56>:	je     0x401178 <phase_5+63>
=> 0x0000000000401173 <+58>:	callq  0x4015ef <explode_bomb>
   0x0000000000401178 <+63>:	pop    %rbx
   0x0000000000401179 <+64>:	retq
End of assembler dump.
(gdb) p $edx
$58 = 48
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
123456

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb)
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb)
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb)
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb)
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb)
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb)
Continuing.

Breakpoint 7, 0x0000000000401173 in phase_5 ()
(gdb) p $edx
$59 = 54
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
456789

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) p $edx
$60 = 0
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) p $edx
$61 = 12
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) p $edx
$62 = 28
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) p $edx
$63 = 37
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) p $edx
$64 = 40
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) p $edx
$65 = 44
(gdb) c
Continuing.

Breakpoint 7, 0x0000000000401173 in phase_5 ()
(gdb) p $edx
$66 = 51
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
111109

Breakpoint 4, 0x0000000000401139 in phase_5 ()
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb)
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb)
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) p $edx
$67 = 20
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) p $edx
$68 = 30
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) p $edx
$69 = 40
(gdb) c
Continuing.

Breakpoint 8, 0x0000000000401156 in phase_5 ()
(gdb) p $edx
$70 = 42
(gdb) c
Continuing.
^[[A^[[AGood work!  On to the next...
123456

Breakpoint 5, 0x000000000040117a in phase_6 ()
(gdb) quit
A debugging session is active.

	Inferior 1 [process 5644] will be killed.

Quit anyway? (y or n) n
Not confirmed.
(gdb) q
A debugging session is active.

	Inferior 1 [process 5644] will be killed.

Quit anyway? (y or n) y
[tony.bumatay@linuxlab001 bomb33]$ vim solutions.txt
[tony.bumatay@linuxlab001 bomb33]$ vim breakpoints.txt
[tony.bumatay@linuxlab001 bomb33]$ gdb bomb
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-80.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb...done.
(gdb) source breakpoints.txt
Breakpoint 1 at 0x4015ef
Breakpoint 2 at 0x4015ef
Breakpoint 3 at 0x4015f3
Breakpoint 4 at 0x40117a
Breakpoint 5 at 0x4012a9
(gdb) r solutions.txt
Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
Good work!  On to the next...
Write failed: Broken pipe
tonys-mbp:~ Tony$ ssh tony.bumatay@shell.cec.wustl.edu
tony.bumatay@shell.cec.wustl.edu's password:
Last login: Wed Feb 24 01:44:15 2016 from tonys-mbp.dhcp.wustl.edu
##### ATTENTION #####

shell.cec is no longer suited for
computationally-heavy tasks.

Please use 'qlogin' to obtain a
terminal on one of the LinuxLab
hosts.

Thank you!

EIT

#####
[tony.bumatay@shell ~]$ qlogin
Your job 38567 ("QLOGIN") has been submitted
waiting for interactive job to be scheduled ...
Your interactive job 38567 has been successfully scheduled.
Establishing /project/linuxlab/sge/qlogin_ssh.sh session to host linuxlab007.seas.wustl.edu ...
ssh 53926 linuxlab007.seas.wustl.edu
Warning: Permanently added '[linuxlab007.seas.wustl.edu]:53926,[172.16.3.107]:53926' (ECDSA) to the list of known hosts.
tony.bumatay@linuxlab007.seas.wustl.edu's password:
Last login: Tue Feb 23 18:22:41 2016 from shell.cec.wustl.edu
[tony.bumatay@linuxlab007 ~]$ ls
artifacts.xml        Desktop    Downloads              Music         perl5     Templates  winprofile
CSE132-tony.bumatay  documents  eclipse.configuration  My Documents  Pictures  Users
cse361               Documents  equeue                 p2            Public    Videos
[tony.bumatay@linuxlab007 ~]$ cd cse361/tony.bumatay/lab2/bomb33/
[tony.bumatay@linuxlab007 bomb33]$ ls
bomb  bomb.c  breakpoints.txt  output.txt  README  solutions.txt  symtable.txt
[tony.bumatay@linuxlab007 bomb33]$ vim solutions.txt
[tony.bumatay@linuxlab007 bomb33]$ vim breakpoints.txt
[tony.bumatay@linuxlab007 bomb33]$ gdb bomb
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-80.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb...done.
(gdb) source breakpoints.txt
Breakpoint 1 at 0x4015ef
Breakpoint 2 at 0x4015ef
Breakpoint 3 at 0x4015f3
Breakpoint 4 at 0x40117a
Breakpoint 5 at 0x4012a9
(gdb) disas
No frame selected.
(gdb) r solutions.txt
Starting program: /home/warehouse/tony.bumatay/cse361/tony.bumatay/lab2/bomb33/bomb solutions.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
Good work!  On to the next...
1 2 3 4 5 6

Breakpoint 4, 0x000000000040117a in phase_6 ()
Missing separate debuginfos, use: debuginfo-install nss-mdns-0.10-12.el7.x86_64
(gdb) disas
Dump of assembler code for function phase_6:
=> 0x000000000040117a <+0>:	push   %r13
   0x000000000040117c <+2>:	push   %r12
   0x000000000040117e <+4>:	push   %rbp
   0x000000000040117f <+5>:	push   %rbx
   0x0000000000401180 <+6>:	sub    $0x58,%rsp
   0x0000000000401184 <+10>:	lea    0x30(%rsp),%rsi
   0x0000000000401189 <+15>:	callq  0x401625 <read_six_numbers>
   0x000000000040118e <+20>:	lea    0x30(%rsp),%r13
   0x0000000000401193 <+25>:	mov    $0x0,%r12d
   0x0000000000401199 <+31>:	mov    %r13,%rbp
   0x000000000040119c <+34>:	mov    0x0(%r13),%eax
   0x00000000004011a0 <+38>:	sub    $0x1,%eax
   0x00000000004011a3 <+41>:	cmp    $0x5,%eax
   0x00000000004011a6 <+44>:	jbe    0x4011ad <phase_6+51>
   0x00000000004011a8 <+46>:	callq  0x4015ef <explode_bomb>
   0x00000000004011ad <+51>:	add    $0x1,%r12d
   0x00000000004011b1 <+55>:	cmp    $0x6,%r12d
   0x00000000004011b5 <+59>:	jne    0x4011be <phase_6+68>
   0x00000000004011b7 <+61>:	mov    $0x0,%esi
   0x00000000004011bc <+66>:	jmp    0x401200 <phase_6+134>
   0x00000000004011be <+68>:	mov    %r12d,%ebx
   0x00000000004011c1 <+71>:	movslq %ebx,%rax
   0x00000000004011c4 <+74>:	mov    0x30(%rsp,%rax,4),%eax
   0x00000000004011c8 <+78>:	cmp    %eax,0x0(%rbp)
   0x00000000004011cb <+81>:	jne    0x4011d2 <phase_6+88>
   0x00000000004011cd <+83>:	callq  0x4015ef <explode_bomb>
   0x00000000004011d2 <+88>:	add    $0x1,%ebx
   0x00000000004011d5 <+91>:	cmp    $0x5,%ebx
   0x00000000004011d8 <+94>:	jle    0x4011c1 <phase_6+71>
   0x00000000004011da <+96>:	add    $0x4,%r13
   0x00000000004011de <+100>:	jmp    0x401199 <phase_6+31>
   0x00000000004011e0 <+102>:	mov    0x8(%rdx),%rdx
   0x00000000004011e4 <+106>:	add    $0x1,%eax
   0x00000000004011e7 <+109>:	cmp    %ecx,%eax
   0x00000000004011e9 <+111>:	jne    0x4011e0 <phase_6+102>
   0x00000000004011eb <+113>:	jmp    0x4011f2 <phase_6+120>
   0x00000000004011ed <+115>:	mov    $0x604300,%edx
   0x00000000004011f2 <+120>:	mov    %rdx,(%rsp,%rsi,2)
   0x00000000004011f6 <+124>:	add    $0x4,%rsi
   0x00000000004011fa <+128>:	cmp    $0x18,%rsi
   0x00000000004011fe <+132>:	je     0x401215 <phase_6+155>
   0x0000000000401200 <+134>:	mov    0x30(%rsp,%rsi,1),%ecx
   0x0000000000401204 <+138>:	cmp    $0x1,%ecx
   0x0000000000401207 <+141>:	jle    0x4011ed <phase_6+115>
   0x0000000000401209 <+143>:	mov    $0x1,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040120e <+148>:	mov    $0x604300,%edx
   0x0000000000401213 <+153>:	jmp    0x4011e0 <phase_6+102>
   0x0000000000401215 <+155>:	mov    (%rsp),%rbx
   0x0000000000401219 <+159>:	lea    0x8(%rsp),%rax
   0x000000000040121e <+164>:	lea    0x30(%rsp),%rsi
   0x0000000000401223 <+169>:	mov    %rbx,%rcx
   0x0000000000401226 <+172>:	mov    (%rax),%rdx
   0x0000000000401229 <+175>:	mov    %rdx,0x8(%rcx)
   0x000000000040122d <+179>:	add    $0x8,%rax
   0x0000000000401231 <+183>:	cmp    %rsi,%rax
   0x0000000000401234 <+186>:	je     0x40123b <phase_6+193>
   0x0000000000401236 <+188>:	mov    %rdx,%rcx
   0x0000000000401239 <+191>:	jmp    0x401226 <phase_6+172>
   0x000000000040123b <+193>:	movq   $0x0,0x8(%rdx)
   0x0000000000401243 <+201>:	mov    $0x5,%ebp
   0x0000000000401248 <+206>:	mov    0x8(%rbx),%rax
   0x000000000040124c <+210>:	mov    (%rax),%eax
   0x000000000040124e <+212>:	cmp    %eax,(%rbx)
   0x0000000000401250 <+214>:	jle    0x401257 <phase_6+221>
   0x0000000000401252 <+216>:	callq  0x4015ef <explode_bomb>
   0x0000000000401257 <+221>:	mov    0x8(%rbx),%rbx
   0x000000000040125b <+225>:	sub    $0x1,%ebp
   0x000000000040125e <+228>:	jne    0x401248 <phase_6+206>
   0x0000000000401260 <+230>:	add    $0x58,%rsp
   0x0000000000401264 <+234>:	pop    %rbx
   0x0000000000401265 <+235>:	pop    %rbp
   0x0000000000401266 <+236>:	pop    %r12
   0x0000000000401268 <+238>:	pop    %r13
   0x000000000040126a <+240>:	retq
End of assembler dump.
(gdb) ni
0x000000000040117c in phase_6 ()
(gdb)
0x000000000040117e in phase_6 ()
(gdb)
0x000000000040117f in phase_6 ()
(gdb)
0x0000000000401180 in phase_6 ()
(gdb)
0x0000000000401184 in phase_6 ()
(gdb) disas
Dump of assembler code for function phase_6:
   0x000000000040117a <+0>:	push   %r13
   0x000000000040117c <+2>:	push   %r12
   0x000000000040117e <+4>:	push   %rbp
   0x000000000040117f <+5>:	push   %rbx
   0x0000000000401180 <+6>:	sub    $0x58,%rsp
=> 0x0000000000401184 <+10>:	lea    0x30(%rsp),%rsi
   0x0000000000401189 <+15>:	callq  0x401625 <read_six_numbers>
   0x000000000040118e <+20>:	lea    0x30(%rsp),%r13
   0x0000000000401193 <+25>:	mov    $0x0,%r12d
   0x0000000000401199 <+31>:	mov    %r13,%rbp
   0x000000000040119c <+34>:	mov    0x0(%r13),%eax
   0x00000000004011a0 <+38>:	sub    $0x1,%eax
   0x00000000004011a3 <+41>:	cmp    $0x5,%eax
   0x00000000004011a6 <+44>:	jbe    0x4011ad <phase_6+51>
   0x00000000004011a8 <+46>:	callq  0x4015ef <explode_bomb>
   0x00000000004011ad <+51>:	add    $0x1,%r12d
   0x00000000004011b1 <+55>:	cmp    $0x6,%r12d
   0x00000000004011b5 <+59>:	jne    0x4011be <phase_6+68>
   0x00000000004011b7 <+61>:	mov    $0x0,%esi
   0x00000000004011bc <+66>:	jmp    0x401200 <phase_6+134>
   0x00000000004011be <+68>:	mov    %r12d,%ebx
   0x00000000004011c1 <+71>:	movslq %ebx,%rax
   0x00000000004011c4 <+74>:	mov    0x30(%rsp,%rax,4),%eax
   0x00000000004011c8 <+78>:	cmp    %eax,0x0(%rbp)
   0x00000000004011cb <+81>:	jne    0x4011d2 <phase_6+88>
   0x00000000004011cd <+83>:	callq  0x4015ef <explode_bomb>
   0x00000000004011d2 <+88>:	add    $0x1,%ebx
   0x00000000004011d5 <+91>:	cmp    $0x5,%ebx
   0x00000000004011d8 <+94>:	jle    0x4011c1 <phase_6+71>
   0x00000000004011da <+96>:	add    $0x4,%r13
   0x00000000004011de <+100>:	jmp    0x401199 <phase_6+31>
   0x00000000004011e0 <+102>:	mov    0x8(%rdx),%rdx
   0x00000000004011e4 <+106>:	add    $0x1,%eax
   0x00000000004011e7 <+109>:	cmp    %ecx,%eax
   0x00000000004011e9 <+111>:	jne    0x4011e0 <phase_6+102>
   0x00000000004011eb <+113>:	jmp    0x4011f2 <phase_6+120>
   0x00000000004011ed <+115>:	mov    $0x604300,%edx
   0x00000000004011f2 <+120>:	mov    %rdx,(%rsp,%rsi,2)
   0x00000000004011f6 <+124>:	add    $0x4,%rsi
   0x00000000004011fa <+128>:	cmp    $0x18,%rsi
   0x00000000004011fe <+132>:	je     0x401215 <phase_6+155>
   0x0000000000401200 <+134>:	mov    0x30(%rsp,%rsi,1),%ecx
   0x0000000000401204 <+138>:	cmp    $0x1,%ecx
   0x0000000000401207 <+141>:	jle    0x4011ed <phase_6+115>
   0x0000000000401209 <+143>:	mov    $0x1,%eax
---Type <return> to continue, or q <return> to quit---p $rsp
   0x000000000040120e <+148>:	mov    $0x604300,%edx
   0x0000000000401213 <+153>:	jmp    0x4011e0 <phase_6+102>
   0x0000000000401215 <+155>:	mov    (%rsp),%rbx
   0x0000000000401219 <+159>:	lea    0x8(%rsp),%rax
   0x000000000040121e <+164>:	lea    0x30(%rsp),%rsi
   0x0000000000401223 <+169>:	mov    %rbx,%rcx
   0x0000000000401226 <+172>:	mov    (%rax),%rdx
   0x0000000000401229 <+175>:	mov    %rdx,0x8(%rcx)
   0x000000000040122d <+179>:	add    $0x8,%rax
   0x0000000000401231 <+183>:	cmp    %rsi,%rax
   0x0000000000401234 <+186>:	je     0x40123b <phase_6+193>
   0x0000000000401236 <+188>:	mov    %rdx,%rcx
   0x0000000000401239 <+191>:	jmp    0x401226 <phase_6+172>
   0x000000000040123b <+193>:	movq   $0x0,0x8(%rdx)
   0x0000000000401243 <+201>:	mov    $0x5,%ebp
   0x0000000000401248 <+206>:	mov    0x8(%rbx),%rax
   0x000000000040124c <+210>:	mov    (%rax),%eax
   0x000000000040124e <+212>:	cmp    %eax,(%rbx)
   0x0000000000401250 <+214>:	jle    0x401257 <phase_6+221>
   0x0000000000401252 <+216>:	callq  0x4015ef <explode_bomb>
   0x0000000000401257 <+221>:	mov    0x8(%rbx),%rbx
   0x000000000040125b <+225>:	sub    $0x1,%ebp
   0x000000000040125e <+228>:	jne    0x401248 <phase_6+206>
   0x0000000000401260 <+230>:	add    $0x58,%rsp
   0x0000000000401264 <+234>:	pop    %rbx
   0x0000000000401265 <+235>:	pop    %rbp
   0x0000000000401266 <+236>:	pop    %r12
   0x0000000000401268 <+238>:	pop    %r13
   0x000000000040126a <+240>:	retq
End of assembler dump.
(gdb) p $rsp
$1 = (void *) 0x7fffffffdd90
(gdb) p p *(int *) $rsp
No symbol "p" in current context.
(gdb) p *(int *) $rsp
$2 = -8464
(gdb) p *(int *) ($rsp+ 30)
$3 = -554696704
(gdb) ni
0x0000000000401189 in phase_6 ()
(gdb) ni
0x000000000040118e in phase_6 ()
(gdb) disas
Dump of assembler code for function phase_6:
   0x000000000040117a <+0>:	push   %r13
   0x000000000040117c <+2>:	push   %r12
   0x000000000040117e <+4>:	push   %rbp
   0x000000000040117f <+5>:	push   %rbx
   0x0000000000401180 <+6>:	sub    $0x58,%rsp
   0x0000000000401184 <+10>:	lea    0x30(%rsp),%rsi
   0x0000000000401189 <+15>:	callq  0x401625 <read_six_numbers>
=> 0x000000000040118e <+20>:	lea    0x30(%rsp),%r13
   0x0000000000401193 <+25>:	mov    $0x0,%r12d
   0x0000000000401199 <+31>:	mov    %r13,%rbp
   0x000000000040119c <+34>:	mov    0x0(%r13),%eax
   0x00000000004011a0 <+38>:	sub    $0x1,%eax
   0x00000000004011a3 <+41>:	cmp    $0x5,%eax
   0x00000000004011a6 <+44>:	jbe    0x4011ad <phase_6+51>
   0x00000000004011a8 <+46>:	callq  0x4015ef <explode_bomb>
   0x00000000004011ad <+51>:	add    $0x1,%r12d
   0x00000000004011b1 <+55>:	cmp    $0x6,%r12d
   0x00000000004011b5 <+59>:	jne    0x4011be <phase_6+68>
   0x00000000004011b7 <+61>:	mov    $0x0,%esi
   0x00000000004011bc <+66>:	jmp    0x401200 <phase_6+134>
   0x00000000004011be <+68>:	mov    %r12d,%ebx
   0x00000000004011c1 <+71>:	movslq %ebx,%rax
   0x00000000004011c4 <+74>:	mov    0x30(%rsp,%rax,4),%eax
   0x00000000004011c8 <+78>:	cmp    %eax,0x0(%rbp)
   0x00000000004011cb <+81>:	jne    0x4011d2 <phase_6+88>
   0x00000000004011cd <+83>:	callq  0x4015ef <explode_bomb>
   0x00000000004011d2 <+88>:	add    $0x1,%ebx
   0x00000000004011d5 <+91>:	cmp    $0x5,%ebx
   0x00000000004011d8 <+94>:	jle    0x4011c1 <phase_6+71>
   0x00000000004011da <+96>:	add    $0x4,%r13
   0x00000000004011de <+100>:	jmp    0x401199 <phase_6+31>
   0x00000000004011e0 <+102>:	mov    0x8(%rdx),%rdx
   0x00000000004011e4 <+106>:	add    $0x1,%eax
   0x00000000004011e7 <+109>:	cmp    %ecx,%eax
   0x00000000004011e9 <+111>:	jne    0x4011e0 <phase_6+102>
   0x00000000004011eb <+113>:	jmp    0x4011f2 <phase_6+120>
   0x00000000004011ed <+115>:	mov    $0x604300,%edx
   0x00000000004011f2 <+120>:	mov    %rdx,(%rsp,%rsi,2)
   0x00000000004011f6 <+124>:	add    $0x4,%rsi
   0x00000000004011fa <+128>:	cmp    $0x18,%rsi
   0x00000000004011fe <+132>:	je     0x401215 <phase_6+155>
   0x0000000000401200 <+134>:	mov    0x30(%rsp,%rsi,1),%ecx
   0x0000000000401204 <+138>:	cmp    $0x1,%ecx
   0x0000000000401207 <+141>:	jle    0x4011ed <phase_6+115>
   0x0000000000401209 <+143>:	mov    $0x1,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040120e <+148>:	mov    $0x604300,%edx
   0x0000000000401213 <+153>:	jmp    0x4011e0 <phase_6+102>
   0x0000000000401215 <+155>:	mov    (%rsp),%rbx
   0x0000000000401219 <+159>:	lea    0x8(%rsp),%rax
   0x000000000040121e <+164>:	lea    0x30(%rsp),%rsi
   0x0000000000401223 <+169>:	mov    %rbx,%rcx
   0x0000000000401226 <+172>:	mov    (%rax),%rdx
   0x0000000000401229 <+175>:	mov    %rdx,0x8(%rcx)
   0x000000000040122d <+179>:	add    $0x8,%rax
   0x0000000000401231 <+183>:	cmp    %rsi,%rax
   0x0000000000401234 <+186>:	je     0x40123b <phase_6+193>
   0x0000000000401236 <+188>:	mov    %rdx,%rcx
   0x0000000000401239 <+191>:	jmp    0x401226 <phase_6+172>
   0x000000000040123b <+193>:	movq   $0x0,0x8(%rdx)
   0x0000000000401243 <+201>:	mov    $0x5,%ebp
   0x0000000000401248 <+206>:	mov    0x8(%rbx),%rax
   0x000000000040124c <+210>:	mov    (%rax),%eax
   0x000000000040124e <+212>:	cmp    %eax,(%rbx)
   0x0000000000401250 <+214>:	jle    0x401257 <phase_6+221>
   0x0000000000401252 <+216>:	callq  0x4015ef <explode_bomb>
   0x0000000000401257 <+221>:	mov    0x8(%rbx),%rbx
   0x000000000040125b <+225>:	sub    $0x1,%ebp
   0x000000000040125e <+228>:	jne    0x401248 <phase_6+206>
   0x0000000000401260 <+230>:	add    $0x58,%rsp
   0x0000000000401264 <+234>:	pop    %rbx
   0x0000000000401265 <+235>:	pop    %rbp
   0x0000000000401266 <+236>:	pop    %r12
   0x0000000000401268 <+238>:	pop    %r13
   0x000000000040126a <+240>:	retq
End of assembler dump.
(gdb) i r
rax            0x6	6
rbx            0x7fffffffdef8	140737488346872
rcx            0x7fffffffdd80	140737488346496
rdx            0x7fffffffddd4	140737488346580
rsi            0x7fffffffd770	140737488344944
rdi            0x1999999999999999	1844674407370955161
rbp            0x0	0x0
rsp            0x7fffffffdd90	0x7fffffffdd90
r8             0x2aaaab08a060	46912502276192
r9             0x0	0
r10            0x6	6
r11            0x0	0
r12            0x400cd0	4197584
r13            0x7fffffffdef0	140737488346864
r14            0x0	0
r15            0x0	0
rip            0x40118e	0x40118e <phase_6+20>
eflags         0x206	[ PF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) disas
Dump of assembler code for function phase_6:
   0x000000000040117a <+0>:	push   %r13
   0x000000000040117c <+2>:	push   %r12
   0x000000000040117e <+4>:	push   %rbp
   0x000000000040117f <+5>:	push   %rbx
   0x0000000000401180 <+6>:	sub    $0x58,%rsp
   0x0000000000401184 <+10>:	lea    0x30(%rsp),%rsi
   0x0000000000401189 <+15>:	callq  0x401625 <read_six_numbers>
=> 0x000000000040118e <+20>:	lea    0x30(%rsp),%r13
   0x0000000000401193 <+25>:	mov    $0x0,%r12d
   0x0000000000401199 <+31>:	mov    %r13,%rbp
   0x000000000040119c <+34>:	mov    0x0(%r13),%eax
   0x00000000004011a0 <+38>:	sub    $0x1,%eax
   0x00000000004011a3 <+41>:	cmp    $0x5,%eax
   0x00000000004011a6 <+44>:	jbe    0x4011ad <phase_6+51>
   0x00000000004011a8 <+46>:	callq  0x4015ef <explode_bomb>
   0x00000000004011ad <+51>:	add    $0x1,%r12d
   0x00000000004011b1 <+55>:	cmp    $0x6,%r12d
   0x00000000004011b5 <+59>:	jne    0x4011be <phase_6+68>
   0x00000000004011b7 <+61>:	mov    $0x0,%esi
   0x00000000004011bc <+66>:	jmp    0x401200 <phase_6+134>
   0x00000000004011be <+68>:	mov    %r12d,%ebx
   0x00000000004011c1 <+71>:	movslq %ebx,%rax
   0x00000000004011c4 <+74>:	mov    0x30(%rsp,%rax,4),%eax
   0x00000000004011c8 <+78>:	cmp    %eax,0x0(%rbp)
   0x00000000004011cb <+81>:	jne    0x4011d2 <phase_6+88>
   0x00000000004011cd <+83>:	callq  0x4015ef <explode_bomb>
   0x00000000004011d2 <+88>:	add    $0x1,%ebx
   0x00000000004011d5 <+91>:	cmp    $0x5,%ebx
   0x00000000004011d8 <+94>:	jle    0x4011c1 <phase_6+71>
   0x00000000004011da <+96>:	add    $0x4,%r13
   0x00000000004011de <+100>:	jmp    0x401199 <phase_6+31>
   0x00000000004011e0 <+102>:	mov    0x8(%rdx),%rdx
   0x00000000004011e4 <+106>:	add    $0x1,%eax
   0x00000000004011e7 <+109>:	cmp    %ecx,%eax
   0x00000000004011e9 <+111>:	jne    0x4011e0 <phase_6+102>
   0x00000000004011eb <+113>:	jmp    0x4011f2 <phase_6+120>
   0x00000000004011ed <+115>:	mov    $0x604300,%edx
   0x00000000004011f2 <+120>:	mov    %rdx,(%rsp,%rsi,2)
   0x00000000004011f6 <+124>:	add    $0x4,%rsi
   0x00000000004011fa <+128>:	cmp    $0x18,%rsi
   0x00000000004011fe <+132>:	je     0x401215 <phase_6+155>
   0x0000000000401200 <+134>:	mov    0x30(%rsp,%rsi,1),%ecx
   0x0000000000401204 <+138>:	cmp    $0x1,%ecx
   0x0000000000401207 <+141>:	jle    0x4011ed <phase_6+115>
   0x0000000000401209 <+143>:	mov    $0x1,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040120e <+148>:	mov    $0x604300,%edx
   0x0000000000401213 <+153>:	jmp    0x4011e0 <phase_6+102>
   0x0000000000401215 <+155>:	mov    (%rsp),%rbx
   0x0000000000401219 <+159>:	lea    0x8(%rsp),%rax
   0x000000000040121e <+164>:	lea    0x30(%rsp),%rsi
   0x0000000000401223 <+169>:	mov    %rbx,%rcx
   0x0000000000401226 <+172>:	mov    (%rax),%rdx
   0x0000000000401229 <+175>:	mov    %rdx,0x8(%rcx)
   0x000000000040122d <+179>:	add    $0x8,%rax
   0x0000000000401231 <+183>:	cmp    %rsi,%rax
   0x0000000000401234 <+186>:	je     0x40123b <phase_6+193>
   0x0000000000401236 <+188>:	mov    %rdx,%rcx
   0x0000000000401239 <+191>:	jmp    0x401226 <phase_6+172>
   0x000000000040123b <+193>:	movq   $0x0,0x8(%rdx)
   0x0000000000401243 <+201>:	mov    $0x5,%ebp
   0x0000000000401248 <+206>:	mov    0x8(%rbx),%rax
   0x000000000040124c <+210>:	mov    (%rax),%eax
   0x000000000040124e <+212>:	cmp    %eax,(%rbx)
   0x0000000000401250 <+214>:	jle    0x401257 <phase_6+221>
   0x0000000000401252 <+216>:	callq  0x4015ef <explode_bomb>
   0x0000000000401257 <+221>:	mov    0x8(%rbx),%rbx
   0x000000000040125b <+225>:	sub    $0x1,%ebp
   0x000000000040125e <+228>:	jne    0x401248 <phase_6+206>
   0x0000000000401260 <+230>:	add    $0x58,%rsp
   0x0000000000401264 <+234>:	pop    %rbx
   0x0000000000401265 <+235>:	pop    %rbp
   0x0000000000401266 <+236>:	pop    %r12
   0x0000000000401268 <+238>:	pop    %r13
   0x000000000040126a <+240>:	retq
End of assembler dump.
(gdb) ni
0x0000000000401193 in phase_6 ()
(gdb) b *0x04011a3
Breakpoint 6 at 0x4011a3
(gdb) ni
0x0000000000401199 in phase_6 ()
(gdb) c
Continuing.

Breakpoint 6, 0x00000000004011a3 in phase_6 ()
(gdb) disas
Dump of assembler code for function phase_6:
   0x000000000040117a <+0>:	push   %r13
   0x000000000040117c <+2>:	push   %r12
   0x000000000040117e <+4>:	push   %rbp
   0x000000000040117f <+5>:	push   %rbx
   0x0000000000401180 <+6>:	sub    $0x58,%rsp
   0x0000000000401184 <+10>:	lea    0x30(%rsp),%rsi
   0x0000000000401189 <+15>:	callq  0x401625 <read_six_numbers>
   0x000000000040118e <+20>:	lea    0x30(%rsp),%r13
   0x0000000000401193 <+25>:	mov    $0x0,%r12d
   0x0000000000401199 <+31>:	mov    %r13,%rbp
   0x000000000040119c <+34>:	mov    0x0(%r13),%eax
   0x00000000004011a0 <+38>:	sub    $0x1,%eax
=> 0x00000000004011a3 <+41>:	cmp    $0x5,%eax
   0x00000000004011a6 <+44>:	jbe    0x4011ad <phase_6+51>
   0x00000000004011a8 <+46>:	callq  0x4015ef <explode_bomb>
   0x00000000004011ad <+51>:	add    $0x1,%r12d
   0x00000000004011b1 <+55>:	cmp    $0x6,%r12d
   0x00000000004011b5 <+59>:	jne    0x4011be <phase_6+68>
   0x00000000004011b7 <+61>:	mov    $0x0,%esi
   0x00000000004011bc <+66>:	jmp    0x401200 <phase_6+134>
   0x00000000004011be <+68>:	mov    %r12d,%ebx
   0x00000000004011c1 <+71>:	movslq %ebx,%rax
   0x00000000004011c4 <+74>:	mov    0x30(%rsp,%rax,4),%eax
   0x00000000004011c8 <+78>:	cmp    %eax,0x0(%rbp)
   0x00000000004011cb <+81>:	jne    0x4011d2 <phase_6+88>
   0x00000000004011cd <+83>:	callq  0x4015ef <explode_bomb>
   0x00000000004011d2 <+88>:	add    $0x1,%ebx
   0x00000000004011d5 <+91>:	cmp    $0x5,%ebx
   0x00000000004011d8 <+94>:	jle    0x4011c1 <phase_6+71>
   0x00000000004011da <+96>:	add    $0x4,%r13
   0x00000000004011de <+100>:	jmp    0x401199 <phase_6+31>
   0x00000000004011e0 <+102>:	mov    0x8(%rdx),%rdx
   0x00000000004011e4 <+106>:	add    $0x1,%eax
   0x00000000004011e7 <+109>:	cmp    %ecx,%eax
   0x00000000004011e9 <+111>:	jne    0x4011e0 <phase_6+102>
   0x00000000004011eb <+113>:	jmp    0x4011f2 <phase_6+120>
   0x00000000004011ed <+115>:	mov    $0x604300,%edx
   0x00000000004011f2 <+120>:	mov    %rdx,(%rsp,%rsi,2)
   0x00000000004011f6 <+124>:	add    $0x4,%rsi
   0x00000000004011fa <+128>:	cmp    $0x18,%rsi
   0x00000000004011fe <+132>:	je     0x401215 <phase_6+155>
   0x0000000000401200 <+134>:	mov    0x30(%rsp,%rsi,1),%ecx
   0x0000000000401204 <+138>:	cmp    $0x1,%ecx
   0x0000000000401207 <+141>:	jle    0x4011ed <phase_6+115>
   0x0000000000401209 <+143>:	mov    $0x1,%eax
---Type <return> to continue, or q <return> to quit---p $eax
   0x000000000040120e <+148>:	mov    $0x604300,%edx
   0x0000000000401213 <+153>:	jmp    0x4011e0 <phase_6+102>
   0x0000000000401215 <+155>:	mov    (%rsp),%rbx
   0x0000000000401219 <+159>:	lea    0x8(%rsp),%rax
   0x000000000040121e <+164>:	lea    0x30(%rsp),%rsi
   0x0000000000401223 <+169>:	mov    %rbx,%rcx
   0x0000000000401226 <+172>:	mov    (%rax),%rdx
   0x0000000000401229 <+175>:	mov    %rdx,0x8(%rcx)
   0x000000000040122d <+179>:	add    $0x8,%rax
   0x0000000000401231 <+183>:	cmp    %rsi,%rax
   0x0000000000401234 <+186>:	je     0x40123b <phase_6+193>
   0x0000000000401236 <+188>:	mov    %rdx,%rcx
   0x0000000000401239 <+191>:	jmp    0x401226 <phase_6+172>
   0x000000000040123b <+193>:	movq   $0x0,0x8(%rdx)
   0x0000000000401243 <+201>:	mov    $0x5,%ebp
   0x0000000000401248 <+206>:	mov    0x8(%rbx),%rax
   0x000000000040124c <+210>:	mov    (%rax),%eax
   0x000000000040124e <+212>:	cmp    %eax,(%rbx)
   0x0000000000401250 <+214>:	jle    0x401257 <phase_6+221>
   0x0000000000401252 <+216>:	callq  0x4015ef <explode_bomb>
   0x0000000000401257 <+221>:	mov    0x8(%rbx),%rbx
   0x000000000040125b <+225>:	sub    $0x1,%ebp
   0x000000000040125e <+228>:	jne    0x401248 <phase_6+206>
   0x0000000000401260 <+230>:	add    $0x58,%rsp
   0x0000000000401264 <+234>:	pop    %rbx
   0x0000000000401265 <+235>:	pop    %rbp
   0x0000000000401266 <+236>:	pop    %r12
   0x0000000000401268 <+238>:	pop    %r13
   0x000000000040126a <+240>:	retq
End of assembler dump.
(gdb)
(gdb) p $eax
$4 = 0
(gdb) p $0x7fffffffdef0
$5 = void
(gdb) ni
0x00000000004011a6 in phase_6 ()
(gdb) disas
Dump of assembler code for function phase_6:
   0x000000000040117a <+0>:	push   %r13
   0x000000000040117c <+2>:	push   %r12
   0x000000000040117e <+4>:	push   %rbp
   0x000000000040117f <+5>:	push   %rbx
   0x0000000000401180 <+6>:	sub    $0x58,%rsp
   0x0000000000401184 <+10>:	lea    0x30(%rsp),%rsi
   0x0000000000401189 <+15>:	callq  0x401625 <read_six_numbers>
   0x000000000040118e <+20>:	lea    0x30(%rsp),%r13
   0x0000000000401193 <+25>:	mov    $0x0,%r12d
   0x0000000000401199 <+31>:	mov    %r13,%rbp
   0x000000000040119c <+34>:	mov    0x0(%r13),%eax
   0x00000000004011a0 <+38>:	sub    $0x1,%eax
   0x00000000004011a3 <+41>:	cmp    $0x5,%eax
=> 0x00000000004011a6 <+44>:	jbe    0x4011ad <phase_6+51>
   0x00000000004011a8 <+46>:	callq  0x4015ef <explode_bomb>
   0x00000000004011ad <+51>:	add    $0x1,%r12d
   0x00000000004011b1 <+55>:	cmp    $0x6,%r12d
   0x00000000004011b5 <+59>:	jne    0x4011be <phase_6+68>
   0x00000000004011b7 <+61>:	mov    $0x0,%esi
   0x00000000004011bc <+66>:	jmp    0x401200 <phase_6+134>
   0x00000000004011be <+68>:	mov    %r12d,%ebx
   0x00000000004011c1 <+71>:	movslq %ebx,%rax
   0x00000000004011c4 <+74>:	mov    0x30(%rsp,%rax,4),%eax
   0x00000000004011c8 <+78>:	cmp    %eax,0x0(%rbp)
   0x00000000004011cb <+81>:	jne    0x4011d2 <phase_6+88>
   0x00000000004011cd <+83>:	callq  0x4015ef <explode_bomb>
   0x00000000004011d2 <+88>:	add    $0x1,%ebx
   0x00000000004011d5 <+91>:	cmp    $0x5,%ebx
   0x00000000004011d8 <+94>:	jle    0x4011c1 <phase_6+71>
   0x00000000004011da <+96>:	add    $0x4,%r13
   0x00000000004011de <+100>:	jmp    0x401199 <phase_6+31>
   0x00000000004011e0 <+102>:	mov    0x8(%rdx),%rdx
   0x00000000004011e4 <+106>:	add    $0x1,%eax
   0x00000000004011e7 <+109>:	cmp    %ecx,%eax
   0x00000000004011e9 <+111>:	jne    0x4011e0 <phase_6+102>
   0x00000000004011eb <+113>:	jmp    0x4011f2 <phase_6+120>
   0x00000000004011ed <+115>:	mov    $0x604300,%edx
   0x00000000004011f2 <+120>:	mov    %rdx,(%rsp,%rsi,2)
   0x00000000004011f6 <+124>:	add    $0x4,%rsi
   0x00000000004011fa <+128>:	cmp    $0x18,%rsi
   0x00000000004011fe <+132>:	je     0x401215 <phase_6+155>
   0x0000000000401200 <+134>:	mov    0x30(%rsp,%rsi,1),%ecx
   0x0000000000401204 <+138>:	cmp    $0x1,%ecx
   0x0000000000401207 <+141>:	jle    0x4011ed <phase_6+115>
   0x0000000000401209 <+143>:	mov    $0x1,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040120e <+148>:	mov    $0x604300,%edx
   0x0000000000401213 <+153>:	jmp    0x4011e0 <phase_6+102>
   0x0000000000401215 <+155>:	mov    (%rsp),%rbx
   0x0000000000401219 <+159>:	lea    0x8(%rsp),%rax
   0x000000000040121e <+164>:	lea    0x30(%rsp),%rsi
   0x0000000000401223 <+169>:	mov    %rbx,%rcx
   0x0000000000401226 <+172>:	mov    (%rax),%rdx
   0x0000000000401229 <+175>:	mov    %rdx,0x8(%rcx)
   0x000000000040122d <+179>:	add    $0x8,%rax
   0x0000000000401231 <+183>:	cmp    %rsi,%rax
   0x0000000000401234 <+186>:	je     0x40123b <phase_6+193>
   0x0000000000401236 <+188>:	mov    %rdx,%rcx
   0x0000000000401239 <+191>:	jmp    0x401226 <phase_6+172>
   0x000000000040123b <+193>:	movq   $0x0,0x8(%rdx)
   0x0000000000401243 <+201>:	mov    $0x5,%ebp
   0x0000000000401248 <+206>:	mov    0x8(%rbx),%rax
   0x000000000040124c <+210>:	mov    (%rax),%eax
   0x000000000040124e <+212>:	cmp    %eax,(%rbx)
   0x0000000000401250 <+214>:	jle    0x401257 <phase_6+221>
   0x0000000000401252 <+216>:	callq  0x4015ef <explode_bomb>
   0x0000000000401257 <+221>:	mov    0x8(%rbx),%rbx
   0x000000000040125b <+225>:	sub    $0x1,%ebp
   0x000000000040125e <+228>:	jne    0x401248 <phase_6+206>
   0x0000000000401260 <+230>:	add    $0x58,%rsp
   0x0000000000401264 <+234>:	pop    %rbx
   0x0000000000401265 <+235>:	pop    %rbp
   0x0000000000401266 <+236>:	pop    %r12
   0x0000000000401268 <+238>:	pop    %r13
   0x000000000040126a <+240>:	retq
End of assembler dump.
(gdb) p $eax
$6 = 0
(gdb) ni
0x00000000004011ad in phase_6 ()
(gdb) disas
Dump of assembler code for function phase_6:
   0x000000000040117a <+0>:	push   %r13
   0x000000000040117c <+2>:	push   %r12
   0x000000000040117e <+4>:	push   %rbp
   0x000000000040117f <+5>:	push   %rbx
   0x0000000000401180 <+6>:	sub    $0x58,%rsp
   0x0000000000401184 <+10>:	lea    0x30(%rsp),%rsi
   0x0000000000401189 <+15>:	callq  0x401625 <read_six_numbers>
   0x000000000040118e <+20>:	lea    0x30(%rsp),%r13
   0x0000000000401193 <+25>:	mov    $0x0,%r12d
   0x0000000000401199 <+31>:	mov    %r13,%rbp
   0x000000000040119c <+34>:	mov    0x0(%r13),%eax
   0x00000000004011a0 <+38>:	sub    $0x1,%eax
   0x00000000004011a3 <+41>:	cmp    $0x5,%eax
   0x00000000004011a6 <+44>:	jbe    0x4011ad <phase_6+51>
   0x00000000004011a8 <+46>:	callq  0x4015ef <explode_bomb>
=> 0x00000000004011ad <+51>:	add    $0x1,%r12d
   0x00000000004011b1 <+55>:	cmp    $0x6,%r12d
   0x00000000004011b5 <+59>:	jne    0x4011be <phase_6+68>
   0x00000000004011b7 <+61>:	mov    $0x0,%esi
   0x00000000004011bc <+66>:	jmp    0x401200 <phase_6+134>
   0x00000000004011be <+68>:	mov    %r12d,%ebx
   0x00000000004011c1 <+71>:	movslq %ebx,%rax
   0x00000000004011c4 <+74>:	mov    0x30(%rsp,%rax,4),%eax
   0x00000000004011c8 <+78>:	cmp    %eax,0x0(%rbp)
   0x00000000004011cb <+81>:	jne    0x4011d2 <phase_6+88>
   0x00000000004011cd <+83>:	callq  0x4015ef <explode_bomb>
   0x00000000004011d2 <+88>:	add    $0x1,%ebx
   0x00000000004011d5 <+91>:	cmp    $0x5,%ebx
   0x00000000004011d8 <+94>:	jle    0x4011c1 <phase_6+71>
   0x00000000004011da <+96>:	add    $0x4,%r13
   0x00000000004011de <+100>:	jmp    0x401199 <phase_6+31>
   0x00000000004011e0 <+102>:	mov    0x8(%rdx),%rdx
   0x00000000004011e4 <+106>:	add    $0x1,%eax
   0x00000000004011e7 <+109>:	cmp    %ecx,%eax
   0x00000000004011e9 <+111>:	jne    0x4011e0 <phase_6+102>
   0x00000000004011eb <+113>:	jmp    0x4011f2 <phase_6+120>
   0x00000000004011ed <+115>:	mov    $0x604300,%edx
   0x00000000004011f2 <+120>:	mov    %rdx,(%rsp,%rsi,2)
   0x00000000004011f6 <+124>:	add    $0x4,%rsi
   0x00000000004011fa <+128>:	cmp    $0x18,%rsi
   0x00000000004011fe <+132>:	je     0x401215 <phase_6+155>
   0x0000000000401200 <+134>:	mov    0x30(%rsp,%rsi,1),%ecx
   0x0000000000401204 <+138>:	cmp    $0x1,%ecx
   0x0000000000401207 <+141>:	jle    0x4011ed <phase_6+115>
   0x0000000000401209 <+143>:	mov    $0x1,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040120e <+148>:	mov    $0x604300,%edx
   0x0000000000401213 <+153>:	jmp    0x4011e0 <phase_6+102>
   0x0000000000401215 <+155>:	mov    (%rsp),%rbx
   0x0000000000401219 <+159>:	lea    0x8(%rsp),%rax
   0x000000000040121e <+164>:	lea    0x30(%rsp),%rsi
   0x0000000000401223 <+169>:	mov    %rbx,%rcx
   0x0000000000401226 <+172>:	mov    (%rax),%rdx
   0x0000000000401229 <+175>:	mov    %rdx,0x8(%rcx)
   0x000000000040122d <+179>:	add    $0x8,%rax
   0x0000000000401231 <+183>:	cmp    %rsi,%rax
   0x0000000000401234 <+186>:	je     0x40123b <phase_6+193>
   0x0000000000401236 <+188>:	mov    %rdx,%rcx
   0x0000000000401239 <+191>:	jmp    0x401226 <phase_6+172>
   0x000000000040123b <+193>:	movq   $0x0,0x8(%rdx)
   0x0000000000401243 <+201>:	mov    $0x5,%ebp
   0x0000000000401248 <+206>:	mov    0x8(%rbx),%rax
   0x000000000040124c <+210>:	mov    (%rax),%eax
   0x000000000040124e <+212>:	cmp    %eax,(%rbx)
   0x0000000000401250 <+214>:	jle    0x401257 <phase_6+221>
   0x0000000000401252 <+216>:	callq  0x4015ef <explode_bomb>
   0x0000000000401257 <+221>:	mov    0x8(%rbx),%rbx
   0x000000000040125b <+225>:	sub    $0x1,%ebp
   0x000000000040125e <+228>:	jne    0x401248 <phase_6+206>
   0x0000000000401260 <+230>:	add    $0x58,%rsp
   0x0000000000401264 <+234>:	pop    %rbx
   0x0000000000401265 <+235>:	pop    %rbp
   0x0000000000401266 <+236>:	pop    %r12
   0x0000000000401268 <+238>:	pop    %r13
   0x000000000040126a <+240>:	retq
End of assembler dump.
(gdb) p $r12d
$7 = 0
(gdb) ni
0x00000000004011b1 in phase_6 ()
(gdb) p $r12d
$8 = 1
(gdb) disas
Dump of assembler code for function phase_6:
   0x000000000040117a <+0>:	push   %r13
   0x000000000040117c <+2>:	push   %r12
   0x000000000040117e <+4>:	push   %rbp
   0x000000000040117f <+5>:	push   %rbx
   0x0000000000401180 <+6>:	sub    $0x58,%rsp
   0x0000000000401184 <+10>:	lea    0x30(%rsp),%rsi
   0x0000000000401189 <+15>:	callq  0x401625 <read_six_numbers>
   0x000000000040118e <+20>:	lea    0x30(%rsp),%r13
   0x0000000000401193 <+25>:	mov    $0x0,%r12d
   0x0000000000401199 <+31>:	mov    %r13,%rbp
   0x000000000040119c <+34>:	mov    0x0(%r13),%eax
   0x00000000004011a0 <+38>:	sub    $0x1,%eax
   0x00000000004011a3 <+41>:	cmp    $0x5,%eax
   0x00000000004011a6 <+44>:	jbe    0x4011ad <phase_6+51>
   0x00000000004011a8 <+46>:	callq  0x4015ef <explode_bomb>
   0x00000000004011ad <+51>:	add    $0x1,%r12d
=> 0x00000000004011b1 <+55>:	cmp    $0x6,%r12d
   0x00000000004011b5 <+59>:	jne    0x4011be <phase_6+68>
   0x00000000004011b7 <+61>:	mov    $0x0,%esi
   0x00000000004011bc <+66>:	jmp    0x401200 <phase_6+134>
   0x00000000004011be <+68>:	mov    %r12d,%ebx
   0x00000000004011c1 <+71>:	movslq %ebx,%rax
   0x00000000004011c4 <+74>:	mov    0x30(%rsp,%rax,4),%eax
   0x00000000004011c8 <+78>:	cmp    %eax,0x0(%rbp)
   0x00000000004011cb <+81>:	jne    0x4011d2 <phase_6+88>
   0x00000000004011cd <+83>:	callq  0x4015ef <explode_bomb>
   0x00000000004011d2 <+88>:	add    $0x1,%ebx
   0x00000000004011d5 <+91>:	cmp    $0x5,%ebx
   0x00000000004011d8 <+94>:	jle    0x4011c1 <phase_6+71>
   0x00000000004011da <+96>:	add    $0x4,%r13
   0x00000000004011de <+100>:	jmp    0x401199 <phase_6+31>
   0x00000000004011e0 <+102>:	mov    0x8(%rdx),%rdx
   0x00000000004011e4 <+106>:	add    $0x1,%eax
   0x00000000004011e7 <+109>:	cmp    %ecx,%eax
   0x00000000004011e9 <+111>:	jne    0x4011e0 <phase_6+102>
   0x00000000004011eb <+113>:	jmp    0x4011f2 <phase_6+120>
   0x00000000004011ed <+115>:	mov    $0x604300,%edx
   0x00000000004011f2 <+120>:	mov    %rdx,(%rsp,%rsi,2)
   0x00000000004011f6 <+124>:	add    $0x4,%rsi
   0x00000000004011fa <+128>:	cmp    $0x18,%rsi
   0x00000000004011fe <+132>:	je     0x401215 <phase_6+155>
   0x0000000000401200 <+134>:	mov    0x30(%rsp,%rsi,1),%ecx
   0x0000000000401204 <+138>:	cmp    $0x1,%ecx
   0x0000000000401207 <+141>:	jle    0x4011ed <phase_6+115>
   0x0000000000401209 <+143>:	mov    $0x1,%eax
---Type <return> to continue, or q <return> to quit---ni
   0x000000000040120e <+148>:	mov    $0x604300,%edx
   0x0000000000401213 <+153>:	jmp    0x4011e0 <phase_6+102>
   0x0000000000401215 <+155>:	mov    (%rsp),%rbx
   0x0000000000401219 <+159>:	lea    0x8(%rsp),%rax
   0x000000000040121e <+164>:	lea    0x30(%rsp),%rsi
   0x0000000000401223 <+169>:	mov    %rbx,%rcx
   0x0000000000401226 <+172>:	mov    (%rax),%rdx
   0x0000000000401229 <+175>:	mov    %rdx,0x8(%rcx)
   0x000000000040122d <+179>:	add    $0x8,%rax
   0x0000000000401231 <+183>:	cmp    %rsi,%rax
   0x0000000000401234 <+186>:	je     0x40123b <phase_6+193>
   0x0000000000401236 <+188>:	mov    %rdx,%rcx
   0x0000000000401239 <+191>:	jmp    0x401226 <phase_6+172>
   0x000000000040123b <+193>:	movq   $0x0,0x8(%rdx)
   0x0000000000401243 <+201>:	mov    $0x5,%ebp
   0x0000000000401248 <+206>:	mov    0x8(%rbx),%rax
   0x000000000040124c <+210>:	mov    (%rax),%eax
   0x000000000040124e <+212>:	cmp    %eax,(%rbx)
   0x0000000000401250 <+214>:	jle    0x401257 <phase_6+221>
   0x0000000000401252 <+216>:	callq  0x4015ef <explode_bomb>
   0x0000000000401257 <+221>:	mov    0x8(%rbx),%rbx
   0x000000000040125b <+225>:	sub    $0x1,%ebp
   0x000000000040125e <+228>:	jne    0x401248 <phase_6+206>
   0x0000000000401260 <+230>:	add    $0x58,%rsp
   0x0000000000401264 <+234>:	pop    %rbx
   0x0000000000401265 <+235>:	pop    %rbp
   0x0000000000401266 <+236>:	pop    %r12
   0x0000000000401268 <+238>:	pop    %r13
   0x000000000040126a <+240>:	retq
End of assembler dump.
(gdb) ni
0x00000000004011b5 in phase_6 ()
(gdb) disas
Dump of assembler code for function phase_6:
   0x000000000040117a <+0>:	push   %r13
   0x000000000040117c <+2>:	push   %r12
   0x000000000040117e <+4>:	push   %rbp
   0x000000000040117f <+5>:	push   %rbx
   0x0000000000401180 <+6>:	sub    $0x58,%rsp
   0x0000000000401184 <+10>:	lea    0x30(%rsp),%rsi
   0x0000000000401189 <+15>:	callq  0x401625 <read_six_numbers>
   0x000000000040118e <+20>:	lea    0x30(%rsp),%r13
   0x0000000000401193 <+25>:	mov    $0x0,%r12d
   0x0000000000401199 <+31>:	mov    %r13,%rbp
   0x000000000040119c <+34>:	mov    0x0(%r13),%eax
   0x00000000004011a0 <+38>:	sub    $0x1,%eax
   0x00000000004011a3 <+41>:	cmp    $0x5,%eax
   0x00000000004011a6 <+44>:	jbe    0x4011ad <phase_6+51>
   0x00000000004011a8 <+46>:	callq  0x4015ef <explode_bomb>
   0x00000000004011ad <+51>:	add    $0x1,%r12d
   0x00000000004011b1 <+55>:	cmp    $0x6,%r12d
=> 0x00000000004011b5 <+59>:	jne    0x4011be <phase_6+68>
   0x00000000004011b7 <+61>:	mov    $0x0,%esi
   0x00000000004011bc <+66>:	jmp    0x401200 <phase_6+134>
   0x00000000004011be <+68>:	mov    %r12d,%ebx
   0x00000000004011c1 <+71>:	movslq %ebx,%rax
   0x00000000004011c4 <+74>:	mov    0x30(%rsp,%rax,4),%eax
   0x00000000004011c8 <+78>:	cmp    %eax,0x0(%rbp)
   0x00000000004011cb <+81>:	jne    0x4011d2 <phase_6+88>
   0x00000000004011cd <+83>:	callq  0x4015ef <explode_bomb>
   0x00000000004011d2 <+88>:	add    $0x1,%ebx
   0x00000000004011d5 <+91>:	cmp    $0x5,%ebx
   0x00000000004011d8 <+94>:	jle    0x4011c1 <phase_6+71>
   0x00000000004011da <+96>:	add    $0x4,%r13
   0x00000000004011de <+100>:	jmp    0x401199 <phase_6+31>
   0x00000000004011e0 <+102>:	mov    0x8(%rdx),%rdx
   0x00000000004011e4 <+106>:	add    $0x1,%eax
   0x00000000004011e7 <+109>:	cmp    %ecx,%eax
   0x00000000004011e9 <+111>:	jne    0x4011e0 <phase_6+102>
   0x00000000004011eb <+113>:	jmp    0x4011f2 <phase_6+120>
   0x00000000004011ed <+115>:	mov    $0x604300,%edx
   0x00000000004011f2 <+120>:	mov    %rdx,(%rsp,%rsi,2)
   0x00000000004011f6 <+124>:	add    $0x4,%rsi
   0x00000000004011fa <+128>:	cmp    $0x18,%rsi
   0x00000000004011fe <+132>:	je     0x401215 <phase_6+155>
   0x0000000000401200 <+134>:	mov    0x30(%rsp,%rsi,1),%ecx
   0x0000000000401204 <+138>:	cmp    $0x1,%ecx
   0x0000000000401207 <+141>:	jle    0x4011ed <phase_6+115>
   0x0000000000401209 <+143>:	mov    $0x1,%eax
---Type <return> to continue, or q <return> to quit---ni
   0x000000000040120e <+148>:	mov    $0x604300,%edx
   0x0000000000401213 <+153>:	jmp    0x4011e0 <phase_6+102>
   0x0000000000401215 <+155>:	mov    (%rsp),%rbx
   0x0000000000401219 <+159>:	lea    0x8(%rsp),%rax
   0x000000000040121e <+164>:	lea    0x30(%rsp),%rsi
   0x0000000000401223 <+169>:	mov    %rbx,%rcx
   0x0000000000401226 <+172>:	mov    (%rax),%rdx
   0x0000000000401229 <+175>:	mov    %rdx,0x8(%rcx)
   0x000000000040122d <+179>:	add    $0x8,%rax
   0x0000000000401231 <+183>:	cmp    %rsi,%rax
   0x0000000000401234 <+186>:	je     0x40123b <phase_6+193>
   0x0000000000401236 <+188>:	mov    %rdx,%rcx
   0x0000000000401239 <+191>:	jmp    0x401226 <phase_6+172>
   0x000000000040123b <+193>:	movq   $0x0,0x8(%rdx)
   0x0000000000401243 <+201>:	mov    $0x5,%ebp
   0x0000000000401248 <+206>:	mov    0x8(%rbx),%rax
   0x000000000040124c <+210>:	mov    (%rax),%eax
   0x000000000040124e <+212>:	cmp    %eax,(%rbx)
   0x0000000000401250 <+214>:	jle    0x401257 <phase_6+221>
   0x0000000000401252 <+216>:	callq  0x4015ef <explode_bomb>
   0x0000000000401257 <+221>:	mov    0x8(%rbx),%rbx
   0x000000000040125b <+225>:	sub    $0x1,%ebp
   0x000000000040125e <+228>:	jne    0x401248 <phase_6+206>
   0x0000000000401260 <+230>:	add    $0x58,%rsp
   0x0000000000401264 <+234>:	pop    %rbx
   0x0000000000401265 <+235>:	pop    %rbp
   0x0000000000401266 <+236>:	pop    %r12
   0x0000000000401268 <+238>:	pop    %r13
   0x000000000040126a <+240>:	retq
End of assembler dump.
(gdb) ni
0x00000000004011be in phase_6 ()
(gdb) disas
Dump of assembler code for function phase_6:
   0x000000000040117a <+0>:	push   %r13
   0x000000000040117c <+2>:	push   %r12
   0x000000000040117e <+4>:	push   %rbp
   0x000000000040117f <+5>:	push   %rbx
   0x0000000000401180 <+6>:	sub    $0x58,%rsp
   0x0000000000401184 <+10>:	lea    0x30(%rsp),%rsi
   0x0000000000401189 <+15>:	callq  0x401625 <read_six_numbers>
   0x000000000040118e <+20>:	lea    0x30(%rsp),%r13
   0x0000000000401193 <+25>:	mov    $0x0,%r12d
   0x0000000000401199 <+31>:	mov    %r13,%rbp
   0x000000000040119c <+34>:	mov    0x0(%r13),%eax
   0x00000000004011a0 <+38>:	sub    $0x1,%eax
   0x00000000004011a3 <+41>:	cmp    $0x5,%eax
   0x00000000004011a6 <+44>:	jbe    0x4011ad <phase_6+51>
   0x00000000004011a8 <+46>:	callq  0x4015ef <explode_bomb>
   0x00000000004011ad <+51>:	add    $0x1,%r12d
   0x00000000004011b1 <+55>:	cmp    $0x6,%r12d
   0x00000000004011b5 <+59>:	jne    0x4011be <phase_6+68>
   0x00000000004011b7 <+61>:	mov    $0x0,%esi
   0x00000000004011bc <+66>:	jmp    0x401200 <phase_6+134>
=> 0x00000000004011be <+68>:	mov    %r12d,%ebx
   0x00000000004011c1 <+71>:	movslq %ebx,%rax
   0x00000000004011c4 <+74>:	mov    0x30(%rsp,%rax,4),%eax
   0x00000000004011c8 <+78>:	cmp    %eax,0x0(%rbp)
   0x00000000004011cb <+81>:	jne    0x4011d2 <phase_6+88>
   0x00000000004011cd <+83>:	callq  0x4015ef <explode_bomb>
   0x00000000004011d2 <+88>:	add    $0x1,%ebx
   0x00000000004011d5 <+91>:	cmp    $0x5,%ebx
   0x00000000004011d8 <+94>:	jle    0x4011c1 <phase_6+71>
   0x00000000004011da <+96>:	add    $0x4,%r13
   0x00000000004011de <+100>:	jmp    0x401199 <phase_6+31>
   0x00000000004011e0 <+102>:	mov    0x8(%rdx),%rdx
   0x00000000004011e4 <+106>:	add    $0x1,%eax
   0x00000000004011e7 <+109>:	cmp    %ecx,%eax
   0x00000000004011e9 <+111>:	jne    0x4011e0 <phase_6+102>
   0x00000000004011eb <+113>:	jmp    0x4011f2 <phase_6+120>
   0x00000000004011ed <+115>:	mov    $0x604300,%edx
   0x00000000004011f2 <+120>:	mov    %rdx,(%rsp,%rsi,2)
   0x00000000004011f6 <+124>:	add    $0x4,%rsi
   0x00000000004011fa <+128>:	cmp    $0x18,%rsi
   0x00000000004011fe <+132>:	je     0x401215 <phase_6+155>
   0x0000000000401200 <+134>:	mov    0x30(%rsp,%rsi,1),%ecx
   0x0000000000401204 <+138>:	cmp    $0x1,%ecx
   0x0000000000401207 <+141>:	jle    0x4011ed <phase_6+115>
   0x0000000000401209 <+143>:	mov    $0x1,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040120e <+148>:	mov    $0x604300,%edx
   0x0000000000401213 <+153>:	jmp    0x4011e0 <phase_6+102>
   0x0000000000401215 <+155>:	mov    (%rsp),%rbx
   0x0000000000401219 <+159>:	lea    0x8(%rsp),%rax
   0x000000000040121e <+164>:	lea    0x30(%rsp),%rsi
   0x0000000000401223 <+169>:	mov    %rbx,%rcx
   0x0000000000401226 <+172>:	mov    (%rax),%rdx
   0x0000000000401229 <+175>:	mov    %rdx,0x8(%rcx)
   0x000000000040122d <+179>:	add    $0x8,%rax
   0x0000000000401231 <+183>:	cmp    %rsi,%rax
   0x0000000000401234 <+186>:	je     0x40123b <phase_6+193>
   0x0000000000401236 <+188>:	mov    %rdx,%rcx
   0x0000000000401239 <+191>:	jmp    0x401226 <phase_6+172>
   0x000000000040123b <+193>:	movq   $0x0,0x8(%rdx)
   0x0000000000401243 <+201>:	mov    $0x5,%ebp
   0x0000000000401248 <+206>:	mov    0x8(%rbx),%rax
   0x000000000040124c <+210>:	mov    (%rax),%eax
   0x000000000040124e <+212>:	cmp    %eax,(%rbx)
   0x0000000000401250 <+214>:	jle    0x401257 <phase_6+221>
   0x0000000000401252 <+216>:	callq  0x4015ef <explode_bomb>
   0x0000000000401257 <+221>:	mov    0x8(%rbx),%rbx
   0x000000000040125b <+225>:	sub    $0x1,%ebp
   0x000000000040125e <+228>:	jne    0x401248 <phase_6+206>
   0x0000000000401260 <+230>:	add    $0x58,%rsp
   0x0000000000401264 <+234>:	pop    %rbx
   0x0000000000401265 <+235>:	pop    %rbp
   0x0000000000401266 <+236>:	pop    %r12
   0x0000000000401268 <+238>:	pop    %r13
   0x000000000040126a <+240>:	retq
End of assembler dump.
(gdb) p $ebx
$9 = -8456
(gdb) p $r12d
$10 = 1
(gdb) ni
0x00000000004011c1 in phase_6 ()
(gdb) disas
Dump of assembler code for function phase_6:
   0x000000000040117a <+0>:	push   %r13
   0x000000000040117c <+2>:	push   %r12
   0x000000000040117e <+4>:	push   %rbp
   0x000000000040117f <+5>:	push   %rbx
   0x0000000000401180 <+6>:	sub    $0x58,%rsp
   0x0000000000401184 <+10>:	lea    0x30(%rsp),%rsi
   0x0000000000401189 <+15>:	callq  0x401625 <read_six_numbers>
   0x000000000040118e <+20>:	lea    0x30(%rsp),%r13
   0x0000000000401193 <+25>:	mov    $0x0,%r12d
   0x0000000000401199 <+31>:	mov    %r13,%rbp
   0x000000000040119c <+34>:	mov    0x0(%r13),%eax
   0x00000000004011a0 <+38>:	sub    $0x1,%eax
   0x00000000004011a3 <+41>:	cmp    $0x5,%eax
   0x00000000004011a6 <+44>:	jbe    0x4011ad <phase_6+51>
   0x00000000004011a8 <+46>:	callq  0x4015ef <explode_bomb>
   0x00000000004011ad <+51>:	add    $0x1,%r12d
   0x00000000004011b1 <+55>:	cmp    $0x6,%r12d
   0x00000000004011b5 <+59>:	jne    0x4011be <phase_6+68>
   0x00000000004011b7 <+61>:	mov    $0x0,%esi
   0x00000000004011bc <+66>:	jmp    0x401200 <phase_6+134>
   0x00000000004011be <+68>:	mov    %r12d,%ebx
=> 0x00000000004011c1 <+71>:	movslq %ebx,%rax
   0x00000000004011c4 <+74>:	mov    0x30(%rsp,%rax,4),%eax
   0x00000000004011c8 <+78>:	cmp    %eax,0x0(%rbp)
   0x00000000004011cb <+81>:	jne    0x4011d2 <phase_6+88>
   0x00000000004011cd <+83>:	callq  0x4015ef <explode_bomb>
   0x00000000004011d2 <+88>:	add    $0x1,%ebx
   0x00000000004011d5 <+91>:	cmp    $0x5,%ebx
   0x00000000004011d8 <+94>:	jle    0x4011c1 <phase_6+71>
   0x00000000004011da <+96>:	add    $0x4,%r13
   0x00000000004011de <+100>:	jmp    0x401199 <phase_6+31>
   0x00000000004011e0 <+102>:	mov    0x8(%rdx),%rdx
   0x00000000004011e4 <+106>:	add    $0x1,%eax
   0x00000000004011e7 <+109>:	cmp    %ecx,%eax
   0x00000000004011e9 <+111>:	jne    0x4011e0 <phase_6+102>
   0x00000000004011eb <+113>:	jmp    0x4011f2 <phase_6+120>
   0x00000000004011ed <+115>:	mov    $0x604300,%edx
   0x00000000004011f2 <+120>:	mov    %rdx,(%rsp,%rsi,2)
   0x00000000004011f6 <+124>:	add    $0x4,%rsi
   0x00000000004011fa <+128>:	cmp    $0x18,%rsi
   0x00000000004011fe <+132>:	je     0x401215 <phase_6+155>
   0x0000000000401200 <+134>:	mov    0x30(%rsp,%rsi,1),%ecx
   0x0000000000401204 <+138>:	cmp    $0x1,%ecx
   0x0000000000401207 <+141>:	jle    0x4011ed <phase_6+115>
   0x0000000000401209 <+143>:	mov    $0x1,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040120e <+148>:	mov    $0x604300,%edx
   0x0000000000401213 <+153>:	jmp    0x4011e0 <phase_6+102>
   0x0000000000401215 <+155>:	mov    (%rsp),%rbx
   0x0000000000401219 <+159>:	lea    0x8(%rsp),%rax
   0x000000000040121e <+164>:	lea    0x30(%rsp),%rsi
   0x0000000000401223 <+169>:	mov    %rbx,%rcx
   0x0000000000401226 <+172>:	mov    (%rax),%rdx
   0x0000000000401229 <+175>:	mov    %rdx,0x8(%rcx)
   0x000000000040122d <+179>:	add    $0x8,%rax
   0x0000000000401231 <+183>:	cmp    %rsi,%rax
   0x0000000000401234 <+186>:	je     0x40123b <phase_6+193>
   0x0000000000401236 <+188>:	mov    %rdx,%rcx
   0x0000000000401239 <+191>:	jmp    0x401226 <phase_6+172>
   0x000000000040123b <+193>:	movq   $0x0,0x8(%rdx)
   0x0000000000401243 <+201>:	mov    $0x5,%ebp
   0x0000000000401248 <+206>:	mov    0x8(%rbx),%rax
   0x000000000040124c <+210>:	mov    (%rax),%eax
   0x000000000040124e <+212>:	cmp    %eax,(%rbx)
   0x0000000000401250 <+214>:	jle    0x401257 <phase_6+221>
   0x0000000000401252 <+216>:	callq  0x4015ef <explode_bomb>
   0x0000000000401257 <+221>:	mov    0x8(%rbx),%rbx
   0x000000000040125b <+225>:	sub    $0x1,%ebp
   0x000000000040125e <+228>:	jne    0x401248 <phase_6+206>
   0x0000000000401260 <+230>:	add    $0x58,%rsp
   0x0000000000401264 <+234>:	pop    %rbx
   0x0000000000401265 <+235>:	pop    %rbp
   0x0000000000401266 <+236>:	pop    %r12
   0x0000000000401268 <+238>:	pop    %r13
   0x000000000040126a <+240>:	retq
End of assembler dump.
(gdb) p $ebx
$11 = 1
(gdb) ni
0x00000000004011c4 in phase_6 ()
(gdb) p $eax
$12 = 1
(gdb) ni
0x00000000004011c8 in phase_6 ()
(gdb) p $eax
$13 = 2
(gdb) p *(int *) ($rsp)
$14 = -8464
(gdb) p *(int *) ($rsp + 0)
$15 = -8464
(gdb) p *(int *) ($rbp + 0)
$16 = 1
(gdb) p *(int *) ($rbp + 4)
$17 = 2
(gdb) p *(int *) ($rbp + 8)
$18 = 3
(gdb) p *(int *) ($rbp + 12)
$19 = 4
(gdb) p *(int *) ($rbp + 16)
$20 = 5
(gdb) p *(int *) ($rbp + 20)
$21 = 6
(gdb) p *(int *) ($rbp)
$22 = 1
(gdb) p $eax
$23 = 2
(gdb) disas
Dump of assembler code for function phase_6:
   0x000000000040117a <+0>:	push   %r13
   0x000000000040117c <+2>:	push   %r12
   0x000000000040117e <+4>:	push   %rbp
   0x000000000040117f <+5>:	push   %rbx
   0x0000000000401180 <+6>:	sub    $0x58,%rsp
   0x0000000000401184 <+10>:	lea    0x30(%rsp),%rsi
   0x0000000000401189 <+15>:	callq  0x401625 <read_six_numbers>
   0x000000000040118e <+20>:	lea    0x30(%rsp),%r13
   0x0000000000401193 <+25>:	mov    $0x0,%r12d
   0x0000000000401199 <+31>:	mov    %r13,%rbp
   0x000000000040119c <+34>:	mov    0x0(%r13),%eax
   0x00000000004011a0 <+38>:	sub    $0x1,%eax
   0x00000000004011a3 <+41>:	cmp    $0x5,%eax
   0x00000000004011a6 <+44>:	jbe    0x4011ad <phase_6+51>
   0x00000000004011a8 <+46>:	callq  0x4015ef <explode_bomb>
   0x00000000004011ad <+51>:	add    $0x1,%r12d
   0x00000000004011b1 <+55>:	cmp    $0x6,%r12d
   0x00000000004011b5 <+59>:	jne    0x4011be <phase_6+68>
   0x00000000004011b7 <+61>:	mov    $0x0,%esi
   0x00000000004011bc <+66>:	jmp    0x401200 <phase_6+134>
   0x00000000004011be <+68>:	mov    %r12d,%ebx
   0x00000000004011c1 <+71>:	movslq %ebx,%rax
   0x00000000004011c4 <+74>:	mov    0x30(%rsp,%rax,4),%eax
=> 0x00000000004011c8 <+78>:	cmp    %eax,0x0(%rbp)
   0x00000000004011cb <+81>:	jne    0x4011d2 <phase_6+88>
   0x00000000004011cd <+83>:	callq  0x4015ef <explode_bomb>
   0x00000000004011d2 <+88>:	add    $0x1,%ebx
   0x00000000004011d5 <+91>:	cmp    $0x5,%ebx
   0x00000000004011d8 <+94>:	jle    0x4011c1 <phase_6+71>
   0x00000000004011da <+96>:	add    $0x4,%r13
   0x00000000004011de <+100>:	jmp    0x401199 <phase_6+31>
   0x00000000004011e0 <+102>:	mov    0x8(%rdx),%rdx
   0x00000000004011e4 <+106>:	add    $0x1,%eax
   0x00000000004011e7 <+109>:	cmp    %ecx,%eax
   0x00000000004011e9 <+111>:	jne    0x4011e0 <phase_6+102>
   0x00000000004011eb <+113>:	jmp    0x4011f2 <phase_6+120>
   0x00000000004011ed <+115>:	mov    $0x604300,%edx
   0x00000000004011f2 <+120>:	mov    %rdx,(%rsp,%rsi,2)
   0x00000000004011f6 <+124>:	add    $0x4,%rsi
   0x00000000004011fa <+128>:	cmp    $0x18,%rsi
   0x00000000004011fe <+132>:	je     0x401215 <phase_6+155>
   0x0000000000401200 <+134>:	mov    0x30(%rsp,%rsi,1),%ecx
   0x0000000000401204 <+138>:	cmp    $0x1,%ecx
   0x0000000000401207 <+141>:	jle    0x4011ed <phase_6+115>
   0x0000000000401209 <+143>:	mov    $0x1,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040120e <+148>:	mov    $0x604300,%edx
   0x0000000000401213 <+153>:	jmp    0x4011e0 <phase_6+102>
   0x0000000000401215 <+155>:	mov    (%rsp),%rbx
   0x0000000000401219 <+159>:	lea    0x8(%rsp),%rax
   0x000000000040121e <+164>:	lea    0x30(%rsp),%rsi
   0x0000000000401223 <+169>:	mov    %rbx,%rcx
   0x0000000000401226 <+172>:	mov    (%rax),%rdx
   0x0000000000401229 <+175>:	mov    %rdx,0x8(%rcx)
   0x000000000040122d <+179>:	add    $0x8,%rax
   0x0000000000401231 <+183>:	cmp    %rsi,%rax
   0x0000000000401234 <+186>:	je     0x40123b <phase_6+193>
   0x0000000000401236 <+188>:	mov    %rdx,%rcx
   0x0000000000401239 <+191>:	jmp    0x401226 <phase_6+172>
   0x000000000040123b <+193>:	movq   $0x0,0x8(%rdx)
   0x0000000000401243 <+201>:	mov    $0x5,%ebp
   0x0000000000401248 <+206>:	mov    0x8(%rbx),%rax
   0x000000000040124c <+210>:	mov    (%rax),%eax
   0x000000000040124e <+212>:	cmp    %eax,(%rbx)
   0x0000000000401250 <+214>:	jle    0x401257 <phase_6+221>
   0x0000000000401252 <+216>:	callq  0x4015ef <explode_bomb>
   0x0000000000401257 <+221>:	mov    0x8(%rbx),%rbx
   0x000000000040125b <+225>:	sub    $0x1,%ebp
   0x000000000040125e <+228>:	jne    0x401248 <phase_6+206>
   0x0000000000401260 <+230>:	add    $0x58,%rsp
   0x0000000000401264 <+234>:	pop    %rbx
   0x0000000000401265 <+235>:	pop    %rbp
   0x0000000000401266 <+236>:	pop    %r12
   0x0000000000401268 <+238>:	pop    %r13
   0x000000000040126a <+240>:	retq
End of assembler dump.
(gdb) ni
0x00000000004011cb in phase_6 ()
(gdb) ni
0x00000000004011d2 in phase_6 ()
(gdb) disas
Dump of assembler code for function phase_6:
   0x000000000040117a <+0>:	push   %r13
   0x000000000040117c <+2>:	push   %r12
   0x000000000040117e <+4>:	push   %rbp
   0x000000000040117f <+5>:	push   %rbx
   0x0000000000401180 <+6>:	sub    $0x58,%rsp
   0x0000000000401184 <+10>:	lea    0x30(%rsp),%rsi
   0x0000000000401189 <+15>:	callq  0x401625 <read_six_numbers>
   0x000000000040118e <+20>:	lea    0x30(%rsp),%r13
   0x0000000000401193 <+25>:	mov    $0x0,%r12d
   0x0000000000401199 <+31>:	mov    %r13,%rbp
   0x000000000040119c <+34>:	mov    0x0(%r13),%eax
   0x00000000004011a0 <+38>:	sub    $0x1,%eax
   0x00000000004011a3 <+41>:	cmp    $0x5,%eax
   0x00000000004011a6 <+44>:	jbe    0x4011ad <phase_6+51>
   0x00000000004011a8 <+46>:	callq  0x4015ef <explode_bomb>
   0x00000000004011ad <+51>:	add    $0x1,%r12d
   0x00000000004011b1 <+55>:	cmp    $0x6,%r12d
   0x00000000004011b5 <+59>:	jne    0x4011be <phase_6+68>
   0x00000000004011b7 <+61>:	mov    $0x0,%esi
   0x00000000004011bc <+66>:	jmp    0x401200 <phase_6+134>
   0x00000000004011be <+68>:	mov    %r12d,%ebx
   0x00000000004011c1 <+71>:	movslq %ebx,%rax
   0x00000000004011c4 <+74>:	mov    0x30(%rsp,%rax,4),%eax
   0x00000000004011c8 <+78>:	cmp    %eax,0x0(%rbp)
   0x00000000004011cb <+81>:	jne    0x4011d2 <phase_6+88>
   0x00000000004011cd <+83>:	callq  0x4015ef <explode_bomb>
=> 0x00000000004011d2 <+88>:	add    $0x1,%ebx
   0x00000000004011d5 <+91>:	cmp    $0x5,%ebx
   0x00000000004011d8 <+94>:	jle    0x4011c1 <phase_6+71>
   0x00000000004011da <+96>:	add    $0x4,%r13
   0x00000000004011de <+100>:	jmp    0x401199 <phase_6+31>
   0x00000000004011e0 <+102>:	mov    0x8(%rdx),%rdx
   0x00000000004011e4 <+106>:	add    $0x1,%eax
   0x00000000004011e7 <+109>:	cmp    %ecx,%eax
   0x00000000004011e9 <+111>:	jne    0x4011e0 <phase_6+102>
   0x00000000004011eb <+113>:	jmp    0x4011f2 <phase_6+120>
   0x00000000004011ed <+115>:	mov    $0x604300,%edx
   0x00000000004011f2 <+120>:	mov    %rdx,(%rsp,%rsi,2)
   0x00000000004011f6 <+124>:	add    $0x4,%rsi
   0x00000000004011fa <+128>:	cmp    $0x18,%rsi
   0x00000000004011fe <+132>:	je     0x401215 <phase_6+155>
   0x0000000000401200 <+134>:	mov    0x30(%rsp,%rsi,1),%ecx
   0x0000000000401204 <+138>:	cmp    $0x1,%ecx
   0x0000000000401207 <+141>:	jle    0x4011ed <phase_6+115>
   0x0000000000401209 <+143>:	mov    $0x1,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040120e <+148>:	mov    $0x604300,%edx
   0x0000000000401213 <+153>:	jmp    0x4011e0 <phase_6+102>
   0x0000000000401215 <+155>:	mov    (%rsp),%rbx
   0x0000000000401219 <+159>:	lea    0x8(%rsp),%rax
   0x000000000040121e <+164>:	lea    0x30(%rsp),%rsi
   0x0000000000401223 <+169>:	mov    %rbx,%rcx
   0x0000000000401226 <+172>:	mov    (%rax),%rdx
   0x0000000000401229 <+175>:	mov    %rdx,0x8(%rcx)
   0x000000000040122d <+179>:	add    $0x8,%rax
   0x0000000000401231 <+183>:	cmp    %rsi,%rax
   0x0000000000401234 <+186>:	je     0x40123b <phase_6+193>
   0x0000000000401236 <+188>:	mov    %rdx,%rcx
   0x0000000000401239 <+191>:	jmp    0x401226 <phase_6+172>
   0x000000000040123b <+193>:	movq   $0x0,0x8(%rdx)
   0x0000000000401243 <+201>:	mov    $0x5,%ebp
   0x0000000000401248 <+206>:	mov    0x8(%rbx),%rax
   0x000000000040124c <+210>:	mov    (%rax),%eax
   0x000000000040124e <+212>:	cmp    %eax,(%rbx)
   0x0000000000401250 <+214>:	jle    0x401257 <phase_6+221>
   0x0000000000401252 <+216>:	callq  0x4015ef <explode_bomb>
   0x0000000000401257 <+221>:	mov    0x8(%rbx),%rbx
   0x000000000040125b <+225>:	sub    $0x1,%ebp
   0x000000000040125e <+228>:	jne    0x401248 <phase_6+206>
   0x0000000000401260 <+230>:	add    $0x58,%rsp
   0x0000000000401264 <+234>:	pop    %rbx
   0x0000000000401265 <+235>:	pop    %rbp
   0x0000000000401266 <+236>:	pop    %r12
   0x0000000000401268 <+238>:	pop    %r13
   0x000000000040126a <+240>:	retq
End of assembler dump.
(gdb) p $ebx
$24 = 1
(gdb) ni
0x00000000004011d5 in phase_6 ()
(gdb) p $ebx
$25 = 2
(gdb) p $eax
$26 = 2
(gdb) ni
0x00000000004011d8 in phase_6 ()
(gdb) disas
Dump of assembler code for function phase_6:
   0x000000000040117a <+0>:	push   %r13
   0x000000000040117c <+2>:	push   %r12
   0x000000000040117e <+4>:	push   %rbp
   0x000000000040117f <+5>:	push   %rbx
   0x0000000000401180 <+6>:	sub    $0x58,%rsp
   0x0000000000401184 <+10>:	lea    0x30(%rsp),%rsi
   0x0000000000401189 <+15>:	callq  0x401625 <read_six_numbers>
   0x000000000040118e <+20>:	lea    0x30(%rsp),%r13
   0x0000000000401193 <+25>:	mov    $0x0,%r12d
   0x0000000000401199 <+31>:	mov    %r13,%rbp
   0x000000000040119c <+34>:	mov    0x0(%r13),%eax
   0x00000000004011a0 <+38>:	sub    $0x1,%eax
   0x00000000004011a3 <+41>:	cmp    $0x5,%eax
   0x00000000004011a6 <+44>:	jbe    0x4011ad <phase_6+51>
   0x00000000004011a8 <+46>:	callq  0x4015ef <explode_bomb>
   0x00000000004011ad <+51>:	add    $0x1,%r12d
   0x00000000004011b1 <+55>:	cmp    $0x6,%r12d
   0x00000000004011b5 <+59>:	jne    0x4011be <phase_6+68>
   0x00000000004011b7 <+61>:	mov    $0x0,%esi
   0x00000000004011bc <+66>:	jmp    0x401200 <phase_6+134>
   0x00000000004011be <+68>:	mov    %r12d,%ebx
   0x00000000004011c1 <+71>:	movslq %ebx,%rax
   0x00000000004011c4 <+74>:	mov    0x30(%rsp,%rax,4),%eax
   0x00000000004011c8 <+78>:	cmp    %eax,0x0(%rbp)
   0x00000000004011cb <+81>:	jne    0x4011d2 <phase_6+88>
   0x00000000004011cd <+83>:	callq  0x4015ef <explode_bomb>
   0x00000000004011d2 <+88>:	add    $0x1,%ebx
   0x00000000004011d5 <+91>:	cmp    $0x5,%ebx
=> 0x00000000004011d8 <+94>:	jle    0x4011c1 <phase_6+71>
   0x00000000004011da <+96>:	add    $0x4,%r13
   0x00000000004011de <+100>:	jmp    0x401199 <phase_6+31>
   0x00000000004011e0 <+102>:	mov    0x8(%rdx),%rdx
   0x00000000004011e4 <+106>:	add    $0x1,%eax
   0x00000000004011e7 <+109>:	cmp    %ecx,%eax
   0x00000000004011e9 <+111>:	jne    0x4011e0 <phase_6+102>
   0x00000000004011eb <+113>:	jmp    0x4011f2 <phase_6+120>
   0x00000000004011ed <+115>:	mov    $0x604300,%edx
   0x00000000004011f2 <+120>:	mov    %rdx,(%rsp,%rsi,2)
   0x00000000004011f6 <+124>:	add    $0x4,%rsi
   0x00000000004011fa <+128>:	cmp    $0x18,%rsi
   0x00000000004011fe <+132>:	je     0x401215 <phase_6+155>
   0x0000000000401200 <+134>:	mov    0x30(%rsp,%rsi,1),%ecx
   0x0000000000401204 <+138>:	cmp    $0x1,%ecx
   0x0000000000401207 <+141>:	jle    0x4011ed <phase_6+115>
   0x0000000000401209 <+143>:	mov    $0x1,%eax
---Type <return> to continue, or q <return> to quit---ni
   0x000000000040120e <+148>:	mov    $0x604300,%edx
   0x0000000000401213 <+153>:	jmp    0x4011e0 <phase_6+102>
   0x0000000000401215 <+155>:	mov    (%rsp),%rbx
   0x0000000000401219 <+159>:	lea    0x8(%rsp),%rax
   0x000000000040121e <+164>:	lea    0x30(%rsp),%rsi
   0x0000000000401223 <+169>:	mov    %rbx,%rcx
   0x0000000000401226 <+172>:	mov    (%rax),%rdx
   0x0000000000401229 <+175>:	mov    %rdx,0x8(%rcx)
   0x000000000040122d <+179>:	add    $0x8,%rax
   0x0000000000401231 <+183>:	cmp    %rsi,%rax
   0x0000000000401234 <+186>:	je     0x40123b <phase_6+193>
   0x0000000000401236 <+188>:	mov    %rdx,%rcx
   0x0000000000401239 <+191>:	jmp    0x401226 <phase_6+172>
   0x000000000040123b <+193>:	movq   $0x0,0x8(%rdx)
   0x0000000000401243 <+201>:	mov    $0x5,%ebp
   0x0000000000401248 <+206>:	mov    0x8(%rbx),%rax
   0x000000000040124c <+210>:	mov    (%rax),%eax
   0x000000000040124e <+212>:	cmp    %eax,(%rbx)
   0x0000000000401250 <+214>:	jle    0x401257 <phase_6+221>
   0x0000000000401252 <+216>:	callq  0x4015ef <explode_bomb>
   0x0000000000401257 <+221>:	mov    0x8(%rbx),%rbx
   0x000000000040125b <+225>:	sub    $0x1,%ebp
   0x000000000040125e <+228>:	jne    0x401248 <phase_6+206>
   0x0000000000401260 <+230>:	add    $0x58,%rsp
   0x0000000000401264 <+234>:	pop    %rbx
   0x0000000000401265 <+235>:	pop    %rbp
   0x0000000000401266 <+236>:	pop    %r12
   0x0000000000401268 <+238>:	pop    %r13
   0x000000000040126a <+240>:	retq
End of assembler dump.
(gdb) ni
0x00000000004011c1 in phase_6 ()
(gdb) ni
0x00000000004011c4 in phase_6 ()
(gdb) p $eax
$27 = 2
(gdb) p $ebx
$28 = 2
(gdb) ni
0x00000000004011c8 in phase_6 ()
(gdb) p *(int *) ($rbp)
$29 = 1
(gdb) ni
0x00000000004011cb in phase_6 ()
(gdb) p $eax
$30 = 3
(gdb) p *(int *) ($rbp)
$31 = 1
(gdb) ni
0x00000000004011d2 in phase_6 ()
(gdb) ni
0x00000000004011d5 in phase_6 ()
(gdb) p $ebx
$32 = 3
(gdb) ni
0x00000000004011d8 in phase_6 ()
(gdb) ni
0x00000000004011c1 in phase_6 ()
(gdb) p $eax
$33 = 3
(gdb) ni
0x00000000004011c4 in phase_6 ()
(gdb) ni
0x00000000004011c8 in phase_6 ()
(gdb) p $eax
$34 = 4
(gdb) ni
0x00000000004011cb in phase_6 ()
(gdb) ni
0x00000000004011d2 in phase_6 ()
(gdb) ni
0x00000000004011d5 in phase_6 ()
(gdb) ni
0x00000000004011d8 in phase_6 ()
(gdb) ni
0x00000000004011c1 in phase_6 ()
(gdb) ni
0x00000000004011c4 in phase_6 ()
(gdb) ni
0x00000000004011c8 in phase_6 ()
(gdb) ni
0x00000000004011cb in phase_6 ()
(gdb) ni
0x00000000004011d2 in phase_6 ()
(gdb) ni
0x00000000004011d5 in phase_6 ()
(gdb) ni
0x00000000004011d8 in phase_6 ()
(gdb) ni
0x00000000004011c1 in phase_6 ()
(gdb) ni
0x00000000004011c4 in phase_6 ()
(gdb) ni
0x00000000004011c8 in phase_6 ()
(gdb) ni
0x00000000004011cb in phase_6 ()
(gdb) ni
0x00000000004011d2 in phase_6 ()
(gdb) ni
0x00000000004011d5 in phase_6 ()
(gdb) ni
0x00000000004011d8 in phase_6 ()
(gdb) ni
0x00000000004011da in phase_6 ()
(gdb) i r
rax            0x6	6
rbx            0x6	6
rcx            0x7fffffffdd80	140737488346496
rdx            0x7fffffffddd4	140737488346580
rsi            0x7fffffffd770	140737488344944
rdi            0x1999999999999999	1844674407370955161
rbp            0x7fffffffddc0	0x7fffffffddc0
rsp            0x7fffffffdd90	0x7fffffffdd90
r8             0x2aaaab08a060	46912502276192
r9             0x0	0
r10            0x6	6
r11            0x0	0
r12            0x1	1
r13            0x7fffffffddc0	140737488346560
r14            0x0	0
r15            0x0	0
rip            0x4011da	0x4011da <phase_6+96>
eflags         0x202	[ IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) x/i $r13
   0x7fffffffddc0:	add    %eax,(%rax)
(gdb) p $r13
$35 = 140737488346560
(gdb) c
Continuing.

Breakpoint 6, 0x00000000004011a3 in phase_6 ()
(gdb) disas
Dump of assembler code for function phase_6:
   0x000000000040117a <+0>:	push   %r13
   0x000000000040117c <+2>:	push   %r12
   0x000000000040117e <+4>:	push   %rbp
   0x000000000040117f <+5>:	push   %rbx
   0x0000000000401180 <+6>:	sub    $0x58,%rsp
   0x0000000000401184 <+10>:	lea    0x30(%rsp),%rsi
   0x0000000000401189 <+15>:	callq  0x401625 <read_six_numbers>
   0x000000000040118e <+20>:	lea    0x30(%rsp),%r13
   0x0000000000401193 <+25>:	mov    $0x0,%r12d
   0x0000000000401199 <+31>:	mov    %r13,%rbp
   0x000000000040119c <+34>:	mov    0x0(%r13),%eax
   0x00000000004011a0 <+38>:	sub    $0x1,%eax
=> 0x00000000004011a3 <+41>:	cmp    $0x5,%eax
   0x00000000004011a6 <+44>:	jbe    0x4011ad <phase_6+51>
   0x00000000004011a8 <+46>:	callq  0x4015ef <explode_bomb>
   0x00000000004011ad <+51>:	add    $0x1,%r12d
   0x00000000004011b1 <+55>:	cmp    $0x6,%r12d
   0x00000000004011b5 <+59>:	jne    0x4011be <phase_6+68>
   0x00000000004011b7 <+61>:	mov    $0x0,%esi
   0x00000000004011bc <+66>:	jmp    0x401200 <phase_6+134>
   0x00000000004011be <+68>:	mov    %r12d,%ebx
   0x00000000004011c1 <+71>:	movslq %ebx,%rax
   0x00000000004011c4 <+74>:	mov    0x30(%rsp,%rax,4),%eax
   0x00000000004011c8 <+78>:	cmp    %eax,0x0(%rbp)
   0x00000000004011cb <+81>:	jne    0x4011d2 <phase_6+88>
   0x00000000004011cd <+83>:	callq  0x4015ef <explode_bomb>
   0x00000000004011d2 <+88>:	add    $0x1,%ebx
   0x00000000004011d5 <+91>:	cmp    $0x5,%ebx
   0x00000000004011d8 <+94>:	jle    0x4011c1 <phase_6+71>
   0x00000000004011da <+96>:	add    $0x4,%r13
   0x00000000004011de <+100>:	jmp    0x401199 <phase_6+31>
   0x00000000004011e0 <+102>:	mov    0x8(%rdx),%rdx
   0x00000000004011e4 <+106>:	add    $0x1,%eax
   0x00000000004011e7 <+109>:	cmp    %ecx,%eax
   0x00000000004011e9 <+111>:	jne    0x4011e0 <phase_6+102>
   0x00000000004011eb <+113>:	jmp    0x4011f2 <phase_6+120>
   0x00000000004011ed <+115>:	mov    $0x604300,%edx
   0x00000000004011f2 <+120>:	mov    %rdx,(%rsp,%rsi,2)
   0x00000000004011f6 <+124>:	add    $0x4,%rsi
   0x00000000004011fa <+128>:	cmp    $0x18,%rsi
   0x00000000004011fe <+132>:	je     0x401215 <phase_6+155>
   0x0000000000401200 <+134>:	mov    0x30(%rsp,%rsi,1),%ecx
   0x0000000000401204 <+138>:	cmp    $0x1,%ecx
   0x0000000000401207 <+141>:	jle    0x4011ed <phase_6+115>
   0x0000000000401209 <+143>:	mov    $0x1,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040120e <+148>:	mov    $0x604300,%edx
   0x0000000000401213 <+153>:	jmp    0x4011e0 <phase_6+102>
   0x0000000000401215 <+155>:	mov    (%rsp),%rbx
   0x0000000000401219 <+159>:	lea    0x8(%rsp),%rax
   0x000000000040121e <+164>:	lea    0x30(%rsp),%rsi
   0x0000000000401223 <+169>:	mov    %rbx,%rcx
   0x0000000000401226 <+172>:	mov    (%rax),%rdx
   0x0000000000401229 <+175>:	mov    %rdx,0x8(%rcx)
   0x000000000040122d <+179>:	add    $0x8,%rax
   0x0000000000401231 <+183>:	cmp    %rsi,%rax
   0x0000000000401234 <+186>:	je     0x40123b <phase_6+193>
   0x0000000000401236 <+188>:	mov    %rdx,%rcx
   0x0000000000401239 <+191>:	jmp    0x401226 <phase_6+172>
   0x000000000040123b <+193>:	movq   $0x0,0x8(%rdx)
   0x0000000000401243 <+201>:	mov    $0x5,%ebp
   0x0000000000401248 <+206>:	mov    0x8(%rbx),%rax
   0x000000000040124c <+210>:	mov    (%rax),%eax
   0x000000000040124e <+212>:	cmp    %eax,(%rbx)
   0x0000000000401250 <+214>:	jle    0x401257 <phase_6+221>
   0x0000000000401252 <+216>:	callq  0x4015ef <explode_bomb>
   0x0000000000401257 <+221>:	mov    0x8(%rbx),%rbx
   0x000000000040125b <+225>:	sub    $0x1,%ebp
   0x000000000040125e <+228>:	jne    0x401248 <phase_6+206>
   0x0000000000401260 <+230>:	add    $0x58,%rsp
   0x0000000000401264 <+234>:	pop    %rbx
   0x0000000000401265 <+235>:	pop    %rbp
   0x0000000000401266 <+236>:	pop    %r12
   0x0000000000401268 <+238>:	pop    %r13
   0x000000000040126a <+240>:	retq
End of assembler dump.
(gdb) p $eax
$36 = 1
(gdb) p *(int *) ($r13)
$37 = 2
(gdb) b *0x04011a8
Breakpoint 7 at 0x4011a8
(gdb) b *0x04011cd
Breakpoint 8 at 0x4011cd
(gdb) b *0x0401252
Breakpoint 9 at 0x401252
(gdb) c
Continuing.

Breakpoint 6, 0x00000000004011a3 in phase_6 ()
(gdb) disas
Dump of assembler code for function phase_6:
   0x000000000040117a <+0>:	push   %r13
   0x000000000040117c <+2>:	push   %r12
   0x000000000040117e <+4>:	push   %rbp
   0x000000000040117f <+5>:	push   %rbx
   0x0000000000401180 <+6>:	sub    $0x58,%rsp
   0x0000000000401184 <+10>:	lea    0x30(%rsp),%rsi
   0x0000000000401189 <+15>:	callq  0x401625 <read_six_numbers>
   0x000000000040118e <+20>:	lea    0x30(%rsp),%r13
   0x0000000000401193 <+25>:	mov    $0x0,%r12d
   0x0000000000401199 <+31>:	mov    %r13,%rbp
   0x000000000040119c <+34>:	mov    0x0(%r13),%eax
   0x00000000004011a0 <+38>:	sub    $0x1,%eax
=> 0x00000000004011a3 <+41>:	cmp    $0x5,%eax
   0x00000000004011a6 <+44>:	jbe    0x4011ad <phase_6+51>
   0x00000000004011a8 <+46>:	callq  0x4015ef <explode_bomb>
   0x00000000004011ad <+51>:	add    $0x1,%r12d
   0x00000000004011b1 <+55>:	cmp    $0x6,%r12d
   0x00000000004011b5 <+59>:	jne    0x4011be <phase_6+68>
   0x00000000004011b7 <+61>:	mov    $0x0,%esi
   0x00000000004011bc <+66>:	jmp    0x401200 <phase_6+134>
   0x00000000004011be <+68>:	mov    %r12d,%ebx
   0x00000000004011c1 <+71>:	movslq %ebx,%rax
   0x00000000004011c4 <+74>:	mov    0x30(%rsp,%rax,4),%eax
   0x00000000004011c8 <+78>:	cmp    %eax,0x0(%rbp)
   0x00000000004011cb <+81>:	jne    0x4011d2 <phase_6+88>
   0x00000000004011cd <+83>:	callq  0x4015ef <explode_bomb>
   0x00000000004011d2 <+88>:	add    $0x1,%ebx
   0x00000000004011d5 <+91>:	cmp    $0x5,%ebx
   0x00000000004011d8 <+94>:	jle    0x4011c1 <phase_6+71>
   0x00000000004011da <+96>:	add    $0x4,%r13
   0x00000000004011de <+100>:	jmp    0x401199 <phase_6+31>
   0x00000000004011e0 <+102>:	mov    0x8(%rdx),%rdx
   0x00000000004011e4 <+106>:	add    $0x1,%eax
   0x00000000004011e7 <+109>:	cmp    %ecx,%eax
   0x00000000004011e9 <+111>:	jne    0x4011e0 <phase_6+102>
   0x00000000004011eb <+113>:	jmp    0x4011f2 <phase_6+120>
   0x00000000004011ed <+115>:	mov    $0x604300,%edx
   0x00000000004011f2 <+120>:	mov    %rdx,(%rsp,%rsi,2)
   0x00000000004011f6 <+124>:	add    $0x4,%rsi
   0x00000000004011fa <+128>:	cmp    $0x18,%rsi
   0x00000000004011fe <+132>:	je     0x401215 <phase_6+155>
   0x0000000000401200 <+134>:	mov    0x30(%rsp,%rsi,1),%ecx
   0x0000000000401204 <+138>:	cmp    $0x1,%ecx
   0x0000000000401207 <+141>:	jle    0x4011ed <phase_6+115>
   0x0000000000401209 <+143>:	mov    $0x1,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040120e <+148>:	mov    $0x604300,%edx
   0x0000000000401213 <+153>:	jmp    0x4011e0 <phase_6+102>
   0x0000000000401215 <+155>:	mov    (%rsp),%rbx
   0x0000000000401219 <+159>:	lea    0x8(%rsp),%rax
   0x000000000040121e <+164>:	lea    0x30(%rsp),%rsi
   0x0000000000401223 <+169>:	mov    %rbx,%rcx
   0x0000000000401226 <+172>:	mov    (%rax),%rdx
   0x0000000000401229 <+175>:	mov    %rdx,0x8(%rcx)
   0x000000000040122d <+179>:	add    $0x8,%rax
   0x0000000000401231 <+183>:	cmp    %rsi,%rax
   0x0000000000401234 <+186>:	je     0x40123b <phase_6+193>
   0x0000000000401236 <+188>:	mov    %rdx,%rcx
   0x0000000000401239 <+191>:	jmp    0x401226 <phase_6+172>
   0x000000000040123b <+193>:	movq   $0x0,0x8(%rdx)
   0x0000000000401243 <+201>:	mov    $0x5,%ebp
   0x0000000000401248 <+206>:	mov    0x8(%rbx),%rax
   0x000000000040124c <+210>:	mov    (%rax),%eax
   0x000000000040124e <+212>:	cmp    %eax,(%rbx)
   0x0000000000401250 <+214>:	jle    0x401257 <phase_6+221>
   0x0000000000401252 <+216>:	callq  0x4015ef <explode_bomb>
   0x0000000000401257 <+221>:	mov    0x8(%rbx),%rbx
   0x000000000040125b <+225>:	sub    $0x1,%ebp
   0x000000000040125e <+228>:	jne    0x401248 <phase_6+206>
   0x0000000000401260 <+230>:	add    $0x58,%rsp
   0x0000000000401264 <+234>:	pop    %rbx
   0x0000000000401265 <+235>:	pop    %rbp
   0x0000000000401266 <+236>:	pop    %r12
   0x0000000000401268 <+238>:	pop    %r13
   0x000000000040126a <+240>:	retq
End of assembler dump.
(gdb) c
Continuing.

Breakpoint 6, 0x00000000004011a3 in phase_6 ()
(gdb)
Continuing.

Breakpoint 6, 0x00000000004011a3 in phase_6 ()
(gdb)
Continuing.

Breakpoint 6, 0x00000000004011a3 in phase_6 ()
(gdb)
Continuing.

Breakpoint 9, 0x0000000000401252 in phase_6 ()
(gdb) disas
Dump of assembler code for function phase_6:
   0x000000000040117a <+0>:	push   %r13
   0x000000000040117c <+2>:	push   %r12
   0x000000000040117e <+4>:	push   %rbp
   0x000000000040117f <+5>:	push   %rbx
   0x0000000000401180 <+6>:	sub    $0x58,%rsp
   0x0000000000401184 <+10>:	lea    0x30(%rsp),%rsi
   0x0000000000401189 <+15>:	callq  0x401625 <read_six_numbers>
   0x000000000040118e <+20>:	lea    0x30(%rsp),%r13
   0x0000000000401193 <+25>:	mov    $0x0,%r12d
   0x0000000000401199 <+31>:	mov    %r13,%rbp
   0x000000000040119c <+34>:	mov    0x0(%r13),%eax
   0x00000000004011a0 <+38>:	sub    $0x1,%eax
   0x00000000004011a3 <+41>:	cmp    $0x5,%eax
   0x00000000004011a6 <+44>:	jbe    0x4011ad <phase_6+51>
   0x00000000004011a8 <+46>:	callq  0x4015ef <explode_bomb>
   0x00000000004011ad <+51>:	add    $0x1,%r12d
   0x00000000004011b1 <+55>:	cmp    $0x6,%r12d
   0x00000000004011b5 <+59>:	jne    0x4011be <phase_6+68>
   0x00000000004011b7 <+61>:	mov    $0x0,%esi
   0x00000000004011bc <+66>:	jmp    0x401200 <phase_6+134>
   0x00000000004011be <+68>:	mov    %r12d,%ebx
   0x00000000004011c1 <+71>:	movslq %ebx,%rax
   0x00000000004011c4 <+74>:	mov    0x30(%rsp,%rax,4),%eax
   0x00000000004011c8 <+78>:	cmp    %eax,0x0(%rbp)
   0x00000000004011cb <+81>:	jne    0x4011d2 <phase_6+88>
   0x00000000004011cd <+83>:	callq  0x4015ef <explode_bomb>
   0x00000000004011d2 <+88>:	add    $0x1,%ebx
   0x00000000004011d5 <+91>:	cmp    $0x5,%ebx
   0x00000000004011d8 <+94>:	jle    0x4011c1 <phase_6+71>
   0x00000000004011da <+96>:	add    $0x4,%r13
   0x00000000004011de <+100>:	jmp    0x401199 <phase_6+31>
   0x00000000004011e0 <+102>:	mov    0x8(%rdx),%rdx
   0x00000000004011e4 <+106>:	add    $0x1,%eax
   0x00000000004011e7 <+109>:	cmp    %ecx,%eax
   0x00000000004011e9 <+111>:	jne    0x4011e0 <phase_6+102>
   0x00000000004011eb <+113>:	jmp    0x4011f2 <phase_6+120>
   0x00000000004011ed <+115>:	mov    $0x604300,%edx
   0x00000000004011f2 <+120>:	mov    %rdx,(%rsp,%rsi,2)
   0x00000000004011f6 <+124>:	add    $0x4,%rsi
   0x00000000004011fa <+128>:	cmp    $0x18,%rsi
   0x00000000004011fe <+132>:	je     0x401215 <phase_6+155>
   0x0000000000401200 <+134>:	mov    0x30(%rsp,%rsi,1),%ecx
   0x0000000000401204 <+138>:	cmp    $0x1,%ecx
   0x0000000000401207 <+141>:	jle    0x4011ed <phase_6+115>
   0x0000000000401209 <+143>:	mov    $0x1,%eax
---Type <return> to continue, or q <return> to quit---
   0x000000000040120e <+148>:	mov    $0x604300,%edx
   0x0000000000401213 <+153>:	jmp    0x4011e0 <phase_6+102>
   0x0000000000401215 <+155>:	mov    (%rsp),%rbx
   0x0000000000401219 <+159>:	lea    0x8(%rsp),%rax
   0x000000000040121e <+164>:	lea    0x30(%rsp),%rsi
   0x0000000000401223 <+169>:	mov    %rbx,%rcx
   0x0000000000401226 <+172>:	mov    (%rax),%rdx
   0x0000000000401229 <+175>:	mov    %rdx,0x8(%rcx)
   0x000000000040122d <+179>:	add    $0x8,%rax
   0x0000000000401231 <+183>:	cmp    %rsi,%rax
   0x0000000000401234 <+186>:	je     0x40123b <phase_6+193>
   0x0000000000401236 <+188>:	mov    %rdx,%rcx
   0x0000000000401239 <+191>:	jmp    0x401226 <phase_6+172>
   0x000000000040123b <+193>:	movq   $0x0,0x8(%rdx)
   0x0000000000401243 <+201>:	mov    $0x5,%ebp
   0x0000000000401248 <+206>:	mov    0x8(%rbx),%rax
   0x000000000040124c <+210>:	mov    (%rax),%eax
   0x000000000040124e <+212>:	cmp    %eax,(%rbx)
   0x0000000000401250 <+214>:	jle    0x401257 <phase_6+221>
=> 0x0000000000401252 <+216>:	callq  0x4015ef <explode_bomb>
   0x0000000000401257 <+221>:	mov    0x8(%rbx),%rbx
   0x000000000040125b <+225>:	sub    $0x1,%ebp
   0x000000000040125e <+228>:	jne    0x401248 <phase_6+206>
   0x0000000000401260 <+230>:	add    $0x58,%rsp
   0x0000000000401264 <+234>:	pop    %rbx
   0x0000000000401265 <+235>:	pop    %rbp
   0x0000000000401266 <+236>:	pop    %r12
   0x0000000000401268 <+238>:	pop    %r13
   0x000000000040126a <+240>:	retq
End of assembler dump.
(gdb) p $eax
$38 = 466
(gdb) p $rbx
$39 = 6308608
(gdb) p *(int *) ($rbx)
$40 = 552
(gdb) x/3xi
   0x604304 <node1+4>:	add    %eax,(%rax)
   0x604306 <node1+6>:	add    %al,(%rax)
   0x604308 <node1+8>:	adc    %al,0x60(%rbx)
(gdb)
